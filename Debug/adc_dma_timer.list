
adc_dma_timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a31c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  0800a42c  0800a42c  0001a42c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a54c  0800a54c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800a54c  0800a54c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a54c  0800a54c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a54c  0800a54c  0001a54c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a550  0800a550  0001a550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a554  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001318  200001e0  0800a734  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200014f8  0800a734  000214f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000143f8  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003682  00000000  00000000  00034601  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001200  00000000  00000000  00037c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001058  00000000  00000000  00038e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b47f  00000000  00000000  00039ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000163b4  00000000  00000000  0005535f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000924f0  00000000  00000000  0006b713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fdc03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004eb8  00000000  00000000  000fdc54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a414 	.word	0x0800a414

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800a414 	.word	0x0800a414

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr
 800092c:	0000      	movs	r0, r0
	...

08000930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000934:	f000 fb80 	bl	8001038 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000938:	f000 f8ba 	bl	8000ab0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800093c:	f000 f9f2 	bl	8000d24 <MX_GPIO_Init>
  MX_DMA_Init();
 8000940:	f000 f9d2 	bl	8000ce8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000944:	f000 f912 	bl	8000b6c <MX_ADC1_Init>
  MX_TIM3_Init();
 8000948:	f000 f980 	bl	8000c4c <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 800094c:	f008 fbca 	bl	80090e4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

HAL_ADCEx_Calibration_Start(&hadc1);
 8000950:	4843      	ldr	r0, [pc, #268]	; (8000a60 <main+0x130>)
 8000952:	f001 f861 	bl	8001a18 <HAL_ADCEx_Calibration_Start>
HAL_TIM_Base_Start(&htim3);
 8000956:	4843      	ldr	r0, [pc, #268]	; (8000a64 <main+0x134>)
 8000958:	f004 f824 	bl	80049a4 <HAL_TIM_Base_Start>
HAL_ADC_Start_DMA(&hadc1,(uint32_t*)adc_val,4);
 800095c:	2204      	movs	r2, #4
 800095e:	4942      	ldr	r1, [pc, #264]	; (8000a68 <main+0x138>)
 8000960:	483f      	ldr	r0, [pc, #252]	; (8000a60 <main+0x130>)
 8000962:	f000 fca3 	bl	80012ac <HAL_ADC_Start_DMA>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  while(waitForConv == 0) {}
 8000966:	bf00      	nop
 8000968:	4b40      	ldr	r3, [pc, #256]	; (8000a6c <main+0x13c>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	b2db      	uxtb	r3, r3
 800096e:	2b00      	cmp	r3, #0
 8000970:	d0fa      	beq.n	8000968 <main+0x38>
	  waitForConv = 0;
 8000972:	4b3e      	ldr	r3, [pc, #248]	; (8000a6c <main+0x13c>)
 8000974:	2200      	movs	r2, #0
 8000976:	701a      	strb	r2, [r3, #0]
	  adc_val[2]/=(.06*18);
 8000978:	4b3b      	ldr	r3, [pc, #236]	; (8000a68 <main+0x138>)
 800097a:	889b      	ldrh	r3, [r3, #4]
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff fd39 	bl	80003f4 <__aeabi_i2d>
 8000982:	a335      	add	r3, pc, #212	; (adr r3, 8000a58 <main+0x128>)
 8000984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000988:	f7ff fec8 	bl	800071c <__aeabi_ddiv>
 800098c:	4602      	mov	r2, r0
 800098e:	460b      	mov	r3, r1
 8000990:	4610      	mov	r0, r2
 8000992:	4619      	mov	r1, r3
 8000994:	f7ff ffaa 	bl	80008ec <__aeabi_d2uiz>
 8000998:	4603      	mov	r3, r0
 800099a:	b29a      	uxth	r2, r3
 800099c:	4b32      	ldr	r3, [pc, #200]	; (8000a68 <main+0x138>)
 800099e:	809a      	strh	r2, [r3, #4]
	  	adc_val[3]/=(.06*18);
 80009a0:	4b31      	ldr	r3, [pc, #196]	; (8000a68 <main+0x138>)
 80009a2:	88db      	ldrh	r3, [r3, #6]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff fd25 	bl	80003f4 <__aeabi_i2d>
 80009aa:	a32b      	add	r3, pc, #172	; (adr r3, 8000a58 <main+0x128>)
 80009ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009b0:	f7ff feb4 	bl	800071c <__aeabi_ddiv>
 80009b4:	4602      	mov	r2, r0
 80009b6:	460b      	mov	r3, r1
 80009b8:	4610      	mov	r0, r2
 80009ba:	4619      	mov	r1, r3
 80009bc:	f7ff ff96 	bl	80008ec <__aeabi_d2uiz>
 80009c0:	4603      	mov	r3, r0
 80009c2:	b29a      	uxth	r2, r3
 80009c4:	4b28      	ldr	r3, [pc, #160]	; (8000a68 <main+0x138>)
 80009c6:	80da      	strh	r2, [r3, #6]


	  		sprintf((char*)voltage_1,"value of voltage_1 is = %d\n",adc_val[0]);
 80009c8:	4b27      	ldr	r3, [pc, #156]	; (8000a68 <main+0x138>)
 80009ca:	881b      	ldrh	r3, [r3, #0]
 80009cc:	461a      	mov	r2, r3
 80009ce:	4928      	ldr	r1, [pc, #160]	; (8000a70 <main+0x140>)
 80009d0:	4828      	ldr	r0, [pc, #160]	; (8000a74 <main+0x144>)
 80009d2:	f009 f8a5 	bl	8009b20 <siprintf>
	  		CDC_Transmit_FS(voltage_1,28);
 80009d6:	211c      	movs	r1, #28
 80009d8:	4826      	ldr	r0, [pc, #152]	; (8000a74 <main+0x144>)
 80009da:	f008 fc85 	bl	80092e8 <CDC_Transmit_FS>
	  		while(((USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData)->TxState != 0){}
 80009de:	bf00      	nop
 80009e0:	4b25      	ldr	r3, [pc, #148]	; (8000a78 <main+0x148>)
 80009e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80009e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d1f8      	bne.n	80009e0 <main+0xb0>
	  		sprintf(voltage_2,"value of voltage_2 is = %d\n",adc_val[1]);
 80009ee:	4b1e      	ldr	r3, [pc, #120]	; (8000a68 <main+0x138>)
 80009f0:	885b      	ldrh	r3, [r3, #2]
 80009f2:	461a      	mov	r2, r3
 80009f4:	4921      	ldr	r1, [pc, #132]	; (8000a7c <main+0x14c>)
 80009f6:	4822      	ldr	r0, [pc, #136]	; (8000a80 <main+0x150>)
 80009f8:	f009 f892 	bl	8009b20 <siprintf>
	  		CDC_Transmit_FS(voltage_2,28);
 80009fc:	211c      	movs	r1, #28
 80009fe:	4820      	ldr	r0, [pc, #128]	; (8000a80 <main+0x150>)
 8000a00:	f008 fc72 	bl	80092e8 <CDC_Transmit_FS>
	  		while(((USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData)->TxState != 0){}
 8000a04:	bf00      	nop
 8000a06:	4b1c      	ldr	r3, [pc, #112]	; (8000a78 <main+0x148>)
 8000a08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8000a0c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d1f8      	bne.n	8000a06 <main+0xd6>
	  		 sprintf(current_1,"value of current_1 is = %d\n",adc_val[2]);
 8000a14:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <main+0x138>)
 8000a16:	889b      	ldrh	r3, [r3, #4]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	491a      	ldr	r1, [pc, #104]	; (8000a84 <main+0x154>)
 8000a1c:	481a      	ldr	r0, [pc, #104]	; (8000a88 <main+0x158>)
 8000a1e:	f009 f87f 	bl	8009b20 <siprintf>
	  		 CDC_Transmit_FS(current_1,28);
 8000a22:	211c      	movs	r1, #28
 8000a24:	4818      	ldr	r0, [pc, #96]	; (8000a88 <main+0x158>)
 8000a26:	f008 fc5f 	bl	80092e8 <CDC_Transmit_FS>
	  		while(((USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData)->TxState != 0){}
 8000a2a:	bf00      	nop
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <main+0x148>)
 8000a2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8000a32:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d1f8      	bne.n	8000a2c <main+0xfc>
	  		sprintf(current_2,"value of current_2 is = %d\n",adc_val[3]);
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <main+0x138>)
 8000a3c:	88db      	ldrh	r3, [r3, #6]
 8000a3e:	461a      	mov	r2, r3
 8000a40:	4912      	ldr	r1, [pc, #72]	; (8000a8c <main+0x15c>)
 8000a42:	4813      	ldr	r0, [pc, #76]	; (8000a90 <main+0x160>)
 8000a44:	f009 f86c 	bl	8009b20 <siprintf>
	  		CDC_Transmit_FS(current_2,28);
 8000a48:	211c      	movs	r1, #28
 8000a4a:	4811      	ldr	r0, [pc, #68]	; (8000a90 <main+0x160>)
 8000a4c:	f008 fc4c 	bl	80092e8 <CDC_Transmit_FS>
	  while(waitForConv == 0) {}
 8000a50:	e789      	b.n	8000966 <main+0x36>
 8000a52:	bf00      	nop
 8000a54:	f3af 8000 	nop.w
 8000a58:	147ae148 	.word	0x147ae148
 8000a5c:	3ff147ae 	.word	0x3ff147ae
 8000a60:	200001fc 	.word	0x200001fc
 8000a64:	20000270 	.word	0x20000270
 8000a68:	200002b8 	.word	0x200002b8
 8000a6c:	20000330 	.word	0x20000330
 8000a70:	0800a42c 	.word	0x0800a42c
 8000a74:	200002c0 	.word	0x200002c0
 8000a78:	20000340 	.word	0x20000340
 8000a7c:	0800a448 	.word	0x0800a448
 8000a80:	200002dc 	.word	0x200002dc
 8000a84:	0800a464 	.word	0x0800a464
 8000a88:	200002f8 	.word	0x200002f8
 8000a8c:	0800a480 	.word	0x0800a480
 8000a90:	20000314 	.word	0x20000314

08000a94 <HAL_ADC_ConvCpltCallback>:
  }
  /* USER CODE END 3 */
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	waitForConv = 1;
 8000a9c:	4b03      	ldr	r3, [pc, #12]	; (8000aac <HAL_ADC_ConvCpltCallback+0x18>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	701a      	strb	r2, [r3, #0]
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr
 8000aac:	20000330 	.word	0x20000330

08000ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b094      	sub	sp, #80	; 0x50
 8000ab4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aba:	2228      	movs	r2, #40	; 0x28
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f009 f826 	bl	8009b10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ae4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000aea:	2300      	movs	r3, #0
 8000aec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aee:	2301      	movs	r3, #1
 8000af0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af2:	2302      	movs	r3, #2
 8000af4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000af6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000afa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000afc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b00:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b06:	4618      	mov	r0, r3
 8000b08:	f003 f980 	bl	8003e0c <HAL_RCC_OscConfig>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000b12:	f000 f929 	bl	8000d68 <Error_Handler>



  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b16:	230f      	movs	r3, #15
 8000b18:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b26:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	2101      	movs	r1, #1
 8000b32:	4618      	mov	r0, r3
 8000b34:	f003 fbec 	bl	8004310 <HAL_RCC_ClockConfig>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000b3e:	f000 f913 	bl	8000d68 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000b42:	2312      	movs	r3, #18
 8000b44:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000b46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b4a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000b4c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b50:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	4618      	mov	r0, r3
 8000b56:	f003 fd5f 	bl	8004618 <HAL_RCCEx_PeriphCLKConfig>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000b60:	f000 f902 	bl	8000d68 <Error_Handler>
  }
}
 8000b64:	bf00      	nop
 8000b66:	3750      	adds	r7, #80	; 0x50
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b72:	1d3b      	adds	r3, r7, #4
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b7c:	4b31      	ldr	r3, [pc, #196]	; (8000c44 <MX_ADC1_Init+0xd8>)
 8000b7e:	4a32      	ldr	r2, [pc, #200]	; (8000c48 <MX_ADC1_Init+0xdc>)
 8000b80:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b82:	4b30      	ldr	r3, [pc, #192]	; (8000c44 <MX_ADC1_Init+0xd8>)
 8000b84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b88:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b8a:	4b2e      	ldr	r3, [pc, #184]	; (8000c44 <MX_ADC1_Init+0xd8>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b90:	4b2c      	ldr	r3, [pc, #176]	; (8000c44 <MX_ADC1_Init+0xd8>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000b96:	4b2b      	ldr	r3, [pc, #172]	; (8000c44 <MX_ADC1_Init+0xd8>)
 8000b98:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000b9c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b9e:	4b29      	ldr	r3, [pc, #164]	; (8000c44 <MX_ADC1_Init+0xd8>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8000ba4:	4b27      	ldr	r3, [pc, #156]	; (8000c44 <MX_ADC1_Init+0xd8>)
 8000ba6:	2204      	movs	r2, #4
 8000ba8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000baa:	4826      	ldr	r0, [pc, #152]	; (8000c44 <MX_ADC1_Init+0xd8>)
 8000bac:	f000 faa6 	bl	80010fc <HAL_ADC_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000bb6:	f000 f8d7 	bl	8000d68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	4619      	mov	r1, r3
 8000bca:	481e      	ldr	r0, [pc, #120]	; (8000c44 <MX_ADC1_Init+0xd8>)
 8000bcc:	f000 fd2a 	bl	8001624 <HAL_ADC_ConfigChannel>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000bd6:	f000 f8c7 	bl	8000d68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000bde:	2302      	movs	r3, #2
 8000be0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000be2:	2303      	movs	r3, #3
 8000be4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	4619      	mov	r1, r3
 8000bea:	4816      	ldr	r0, [pc, #88]	; (8000c44 <MX_ADC1_Init+0xd8>)
 8000bec:	f000 fd1a 	bl	8001624 <HAL_ADC_ConfigChannel>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000bf6:	f000 f8b7 	bl	8000d68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8000c02:	2305      	movs	r3, #5
 8000c04:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	4619      	mov	r1, r3
 8000c0a:	480e      	ldr	r0, [pc, #56]	; (8000c44 <MX_ADC1_Init+0xd8>)
 8000c0c:	f000 fd0a 	bl	8001624 <HAL_ADC_ConfigChannel>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000c16:	f000 f8a7 	bl	8000d68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000c1e:	2304      	movs	r3, #4
 8000c20:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000c22:	2307      	movs	r3, #7
 8000c24:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c26:	1d3b      	adds	r3, r7, #4
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4806      	ldr	r0, [pc, #24]	; (8000c44 <MX_ADC1_Init+0xd8>)
 8000c2c:	f000 fcfa 	bl	8001624 <HAL_ADC_ConfigChannel>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8000c36:	f000 f897 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c3a:	bf00      	nop
 8000c3c:	3710      	adds	r7, #16
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	200001fc 	.word	0x200001fc
 8000c48:	40012400 	.word	0x40012400

08000c4c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c52:	f107 0308 	add.w	r3, r7, #8
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c60:	463b      	mov	r3, r7
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c68:	4b1d      	ldr	r3, [pc, #116]	; (8000ce0 <MX_TIM3_Init+0x94>)
 8000c6a:	4a1e      	ldr	r2, [pc, #120]	; (8000ce4 <MX_TIM3_Init+0x98>)
 8000c6c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 24000-1;
 8000c6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <MX_TIM3_Init+0x94>)
 8000c70:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8000c74:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c76:	4b1a      	ldr	r3, [pc, #104]	; (8000ce0 <MX_TIM3_Init+0x94>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000c7c:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <MX_TIM3_Init+0x94>)
 8000c7e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c82:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c84:	4b16      	ldr	r3, [pc, #88]	; (8000ce0 <MX_TIM3_Init+0x94>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <MX_TIM3_Init+0x94>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c90:	4813      	ldr	r0, [pc, #76]	; (8000ce0 <MX_TIM3_Init+0x94>)
 8000c92:	f003 fe37 	bl	8004904 <HAL_TIM_Base_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000c9c:	f000 f864 	bl	8000d68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ca0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ca6:	f107 0308 	add.w	r3, r7, #8
 8000caa:	4619      	mov	r1, r3
 8000cac:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <MX_TIM3_Init+0x94>)
 8000cae:	f003 fec3 	bl	8004a38 <HAL_TIM_ConfigClockSource>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000cb8:	f000 f856 	bl	8000d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000cbc:	2320      	movs	r3, #32
 8000cbe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000cc0:	2380      	movs	r3, #128	; 0x80
 8000cc2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cc4:	463b      	mov	r3, r7
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <MX_TIM3_Init+0x94>)
 8000cca:	f004 f871 	bl	8004db0 <HAL_TIMEx_MasterConfigSynchronization>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000cd4:	f000 f848 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000cd8:	bf00      	nop
 8000cda:	3718      	adds	r7, #24
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000270 	.word	0x20000270
 8000ce4:	40000400 	.word	0x40000400

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <MX_DMA_Init+0x38>)
 8000cf0:	695b      	ldr	r3, [r3, #20]
 8000cf2:	4a0b      	ldr	r2, [pc, #44]	; (8000d20 <MX_DMA_Init+0x38>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6153      	str	r3, [r2, #20]
 8000cfa:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <MX_DMA_Init+0x38>)
 8000cfc:	695b      	ldr	r3, [r3, #20]
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2100      	movs	r1, #0
 8000d0a:	200b      	movs	r0, #11
 8000d0c:	f001 f811 	bl	8001d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d10:	200b      	movs	r0, #11
 8000d12:	f001 f82a 	bl	8001d6a <HAL_NVIC_EnableIRQ>

}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40021000 	.word	0x40021000

08000d24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <MX_GPIO_Init+0x40>)
 8000d2c:	699b      	ldr	r3, [r3, #24]
 8000d2e:	4a0d      	ldr	r2, [pc, #52]	; (8000d64 <MX_GPIO_Init+0x40>)
 8000d30:	f043 0320 	orr.w	r3, r3, #32
 8000d34:	6193      	str	r3, [r2, #24]
 8000d36:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <MX_GPIO_Init+0x40>)
 8000d38:	699b      	ldr	r3, [r3, #24]
 8000d3a:	f003 0320 	and.w	r3, r3, #32
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d42:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <MX_GPIO_Init+0x40>)
 8000d44:	699b      	ldr	r3, [r3, #24]
 8000d46:	4a07      	ldr	r2, [pc, #28]	; (8000d64 <MX_GPIO_Init+0x40>)
 8000d48:	f043 0304 	orr.w	r3, r3, #4
 8000d4c:	6193      	str	r3, [r2, #24]
 8000d4e:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <MX_GPIO_Init+0x40>)
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	f003 0304 	and.w	r3, r3, #4
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]

}
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr
 8000d64:	40021000 	.word	0x40021000

08000d68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d6c:	b672      	cpsid	i
}
 8000d6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <Error_Handler+0x8>
	...

08000d74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <HAL_MspInit+0x40>)
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	4a0d      	ldr	r2, [pc, #52]	; (8000db4 <HAL_MspInit+0x40>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	6193      	str	r3, [r2, #24]
 8000d86:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <HAL_MspInit+0x40>)
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	607b      	str	r3, [r7, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d92:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <HAL_MspInit+0x40>)
 8000d94:	69db      	ldr	r3, [r3, #28]
 8000d96:	4a07      	ldr	r2, [pc, #28]	; (8000db4 <HAL_MspInit+0x40>)
 8000d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d9c:	61d3      	str	r3, [r2, #28]
 8000d9e:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <HAL_MspInit+0x40>)
 8000da0:	69db      	ldr	r3, [r3, #28]
 8000da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da6:	603b      	str	r3, [r7, #0]
 8000da8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr
 8000db4:	40021000 	.word	0x40021000

08000db8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b088      	sub	sp, #32
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 0310 	add.w	r3, r7, #16
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a2c      	ldr	r2, [pc, #176]	; (8000e84 <HAL_ADC_MspInit+0xcc>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d151      	bne.n	8000e7c <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dd8:	4b2b      	ldr	r3, [pc, #172]	; (8000e88 <HAL_ADC_MspInit+0xd0>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	4a2a      	ldr	r2, [pc, #168]	; (8000e88 <HAL_ADC_MspInit+0xd0>)
 8000dde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000de2:	6193      	str	r3, [r2, #24]
 8000de4:	4b28      	ldr	r3, [pc, #160]	; (8000e88 <HAL_ADC_MspInit+0xd0>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df0:	4b25      	ldr	r3, [pc, #148]	; (8000e88 <HAL_ADC_MspInit+0xd0>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	4a24      	ldr	r2, [pc, #144]	; (8000e88 <HAL_ADC_MspInit+0xd0>)
 8000df6:	f043 0304 	orr.w	r3, r3, #4
 8000dfa:	6193      	str	r3, [r2, #24]
 8000dfc:	4b22      	ldr	r3, [pc, #136]	; (8000e88 <HAL_ADC_MspInit+0xd0>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	f003 0304 	and.w	r3, r3, #4
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000e08:	230f      	movs	r3, #15
 8000e0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e10:	f107 0310 	add.w	r3, r7, #16
 8000e14:	4619      	mov	r1, r3
 8000e16:	481d      	ldr	r0, [pc, #116]	; (8000e8c <HAL_ADC_MspInit+0xd4>)
 8000e18:	f001 f9b0 	bl	800217c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000e1c:	4b1c      	ldr	r3, [pc, #112]	; (8000e90 <HAL_ADC_MspInit+0xd8>)
 8000e1e:	4a1d      	ldr	r2, [pc, #116]	; (8000e94 <HAL_ADC_MspInit+0xdc>)
 8000e20:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e22:	4b1b      	ldr	r3, [pc, #108]	; (8000e90 <HAL_ADC_MspInit+0xd8>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e28:	4b19      	ldr	r3, [pc, #100]	; (8000e90 <HAL_ADC_MspInit+0xd8>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e2e:	4b18      	ldr	r3, [pc, #96]	; (8000e90 <HAL_ADC_MspInit+0xd8>)
 8000e30:	2280      	movs	r2, #128	; 0x80
 8000e32:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e34:	4b16      	ldr	r3, [pc, #88]	; (8000e90 <HAL_ADC_MspInit+0xd8>)
 8000e36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e3a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e3c:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <HAL_ADC_MspInit+0xd8>)
 8000e3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e42:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e44:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <HAL_ADC_MspInit+0xd8>)
 8000e46:	2220      	movs	r2, #32
 8000e48:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e4a:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <HAL_ADC_MspInit+0xd8>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e50:	480f      	ldr	r0, [pc, #60]	; (8000e90 <HAL_ADC_MspInit+0xd8>)
 8000e52:	f000 ffa5 	bl	8001da0 <HAL_DMA_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000e5c:	f7ff ff84 	bl	8000d68 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4a0b      	ldr	r2, [pc, #44]	; (8000e90 <HAL_ADC_MspInit+0xd8>)
 8000e64:	621a      	str	r2, [r3, #32]
 8000e66:	4a0a      	ldr	r2, [pc, #40]	; (8000e90 <HAL_ADC_MspInit+0xd8>)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2100      	movs	r1, #0
 8000e70:	2012      	movs	r0, #18
 8000e72:	f000 ff5e 	bl	8001d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000e76:	2012      	movs	r0, #18
 8000e78:	f000 ff77 	bl	8001d6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e7c:	bf00      	nop
 8000e7e:	3720      	adds	r7, #32
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40012400 	.word	0x40012400
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	40010800 	.word	0x40010800
 8000e90:	2000022c 	.word	0x2000022c
 8000e94:	40020008 	.word	0x40020008

08000e98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a09      	ldr	r2, [pc, #36]	; (8000ecc <HAL_TIM_Base_MspInit+0x34>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d10b      	bne.n	8000ec2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <HAL_TIM_Base_MspInit+0x38>)
 8000eac:	69db      	ldr	r3, [r3, #28]
 8000eae:	4a08      	ldr	r2, [pc, #32]	; (8000ed0 <HAL_TIM_Base_MspInit+0x38>)
 8000eb0:	f043 0302 	orr.w	r3, r3, #2
 8000eb4:	61d3      	str	r3, [r2, #28]
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_TIM_Base_MspInit+0x38>)
 8000eb8:	69db      	ldr	r3, [r3, #28]
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ec2:	bf00      	nop
 8000ec4:	3714      	adds	r7, #20
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr
 8000ecc:	40000400 	.word	0x40000400
 8000ed0:	40021000 	.word	0x40021000

08000ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <NMI_Handler+0x4>

08000eda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ede:	e7fe      	b.n	8000ede <HardFault_Handler+0x4>

08000ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <MemManage_Handler+0x4>

08000ee6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eea:	e7fe      	b.n	8000eea <BusFault_Handler+0x4>

08000eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <UsageFault_Handler+0x4>

08000ef2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bc80      	pop	{r7}
 8000efc:	4770      	bx	lr

08000efe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bc80      	pop	{r7}
 8000f08:	4770      	bx	lr

08000f0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bc80      	pop	{r7}
 8000f14:	4770      	bx	lr

08000f16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f1a:	f000 f8d3 	bl	80010c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f28:	4802      	ldr	r0, [pc, #8]	; (8000f34 <DMA1_Channel1_IRQHandler+0x10>)
 8000f2a:	f000 fff3 	bl	8001f14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	2000022c 	.word	0x2000022c

08000f38 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000f3c:	4802      	ldr	r0, [pc, #8]	; (8000f48 <ADC1_2_IRQHandler+0x10>)
 8000f3e:	f000 fa93 	bl	8001468 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	200001fc 	.word	0x200001fc

08000f4c <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000f50:	4802      	ldr	r0, [pc, #8]	; (8000f5c <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000f52:	f001 fbc8 	bl	80026e6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000fdc 	.word	0x20000fdc

08000f60 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000f64:	4802      	ldr	r0, [pc, #8]	; (8000f70 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000f66:	f001 fbbe 	bl	80026e6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000fdc 	.word	0x20000fdc

08000f74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f7c:	4a14      	ldr	r2, [pc, #80]	; (8000fd0 <_sbrk+0x5c>)
 8000f7e:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <_sbrk+0x60>)
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f88:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <_sbrk+0x64>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d102      	bne.n	8000f96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <_sbrk+0x64>)
 8000f92:	4a12      	ldr	r2, [pc, #72]	; (8000fdc <_sbrk+0x68>)
 8000f94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <_sbrk+0x64>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d207      	bcs.n	8000fb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fa4:	f008 fd8a 	bl	8009abc <__errno>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	220c      	movs	r2, #12
 8000fac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fae:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb2:	e009      	b.n	8000fc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <_sbrk+0x64>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fba:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <_sbrk+0x64>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	4a05      	ldr	r2, [pc, #20]	; (8000fd8 <_sbrk+0x64>)
 8000fc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3718      	adds	r7, #24
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20005000 	.word	0x20005000
 8000fd4:	00000400 	.word	0x00000400
 8000fd8:	20000334 	.word	0x20000334
 8000fdc:	200014f8 	.word	0x200014f8

08000fe0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr

08000fec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fec:	480c      	ldr	r0, [pc, #48]	; (8001020 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fee:	490d      	ldr	r1, [pc, #52]	; (8001024 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ff0:	4a0d      	ldr	r2, [pc, #52]	; (8001028 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ff2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff4:	e002      	b.n	8000ffc <LoopCopyDataInit>

08000ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffa:	3304      	adds	r3, #4

08000ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001000:	d3f9      	bcc.n	8000ff6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001002:	4a0a      	ldr	r2, [pc, #40]	; (800102c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001004:	4c0a      	ldr	r4, [pc, #40]	; (8001030 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001008:	e001      	b.n	800100e <LoopFillZerobss>

0800100a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800100c:	3204      	adds	r2, #4

0800100e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001010:	d3fb      	bcc.n	800100a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001012:	f7ff ffe5 	bl	8000fe0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001016:	f008 fd57 	bl	8009ac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800101a:	f7ff fc89 	bl	8000930 <main>
  bx lr
 800101e:	4770      	bx	lr
  ldr r0, =_sdata
 8001020:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001024:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001028:	0800a554 	.word	0x0800a554
  ldr r2, =_sbss
 800102c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001030:	200014f8 	.word	0x200014f8

08001034 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001034:	e7fe      	b.n	8001034 <CAN1_RX1_IRQHandler>
	...

08001038 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800103c:	4b08      	ldr	r3, [pc, #32]	; (8001060 <HAL_Init+0x28>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a07      	ldr	r2, [pc, #28]	; (8001060 <HAL_Init+0x28>)
 8001042:	f043 0310 	orr.w	r3, r3, #16
 8001046:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001048:	2003      	movs	r0, #3
 800104a:	f000 fe67 	bl	8001d1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800104e:	200f      	movs	r0, #15
 8001050:	f000 f808 	bl	8001064 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001054:	f7ff fe8e 	bl	8000d74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40022000 	.word	0x40022000

08001064 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800106c:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <HAL_InitTick+0x54>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4b12      	ldr	r3, [pc, #72]	; (80010bc <HAL_InitTick+0x58>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	4619      	mov	r1, r3
 8001076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800107a:	fbb3 f3f1 	udiv	r3, r3, r1
 800107e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001082:	4618      	mov	r0, r3
 8001084:	f000 fe7f 	bl	8001d86 <HAL_SYSTICK_Config>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e00e      	b.n	80010b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2b0f      	cmp	r3, #15
 8001096:	d80a      	bhi.n	80010ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001098:	2200      	movs	r2, #0
 800109a:	6879      	ldr	r1, [r7, #4]
 800109c:	f04f 30ff 	mov.w	r0, #4294967295
 80010a0:	f000 fe47 	bl	8001d32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010a4:	4a06      	ldr	r2, [pc, #24]	; (80010c0 <HAL_InitTick+0x5c>)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010aa:	2300      	movs	r3, #0
 80010ac:	e000      	b.n	80010b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000000 	.word	0x20000000
 80010bc:	20000008 	.word	0x20000008
 80010c0:	20000004 	.word	0x20000004

080010c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c8:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <HAL_IncTick+0x1c>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	461a      	mov	r2, r3
 80010ce:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <HAL_IncTick+0x20>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4413      	add	r3, r2
 80010d4:	4a03      	ldr	r2, [pc, #12]	; (80010e4 <HAL_IncTick+0x20>)
 80010d6:	6013      	str	r3, [r2, #0]
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr
 80010e0:	20000008 	.word	0x20000008
 80010e4:	20000338 	.word	0x20000338

080010e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  return uwTick;
 80010ec:	4b02      	ldr	r3, [pc, #8]	; (80010f8 <HAL_GetTick+0x10>)
 80010ee:	681b      	ldr	r3, [r3, #0]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr
 80010f8:	20000338 	.word	0x20000338

080010fc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001104:	2300      	movs	r3, #0
 8001106:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001108:	2300      	movs	r3, #0
 800110a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800110c:	2300      	movs	r3, #0
 800110e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001110:	2300      	movs	r3, #0
 8001112:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d101      	bne.n	800111e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e0be      	b.n	800129c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001128:	2b00      	cmp	r3, #0
 800112a:	d109      	bne.n	8001140 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2200      	movs	r2, #0
 8001136:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff fe3c 	bl	8000db8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f000 fbc1 	bl	80018c8 <ADC_ConversionStop_Disable>
 8001146:	4603      	mov	r3, r0
 8001148:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800114e:	f003 0310 	and.w	r3, r3, #16
 8001152:	2b00      	cmp	r3, #0
 8001154:	f040 8099 	bne.w	800128a <HAL_ADC_Init+0x18e>
 8001158:	7dfb      	ldrb	r3, [r7, #23]
 800115a:	2b00      	cmp	r3, #0
 800115c:	f040 8095 	bne.w	800128a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001164:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001168:	f023 0302 	bic.w	r3, r3, #2
 800116c:	f043 0202 	orr.w	r2, r3, #2
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800117c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	7b1b      	ldrb	r3, [r3, #12]
 8001182:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001184:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001186:	68ba      	ldr	r2, [r7, #8]
 8001188:	4313      	orrs	r3, r2
 800118a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001194:	d003      	beq.n	800119e <HAL_ADC_Init+0xa2>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d102      	bne.n	80011a4 <HAL_ADC_Init+0xa8>
 800119e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011a2:	e000      	b.n	80011a6 <HAL_ADC_Init+0xaa>
 80011a4:	2300      	movs	r3, #0
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	7d1b      	ldrb	r3, [r3, #20]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d119      	bne.n	80011e8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	7b1b      	ldrb	r3, [r3, #12]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d109      	bne.n	80011d0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	3b01      	subs	r3, #1
 80011c2:	035a      	lsls	r2, r3, #13
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	e00b      	b.n	80011e8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d4:	f043 0220 	orr.w	r2, r3, #32
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e0:	f043 0201 	orr.w	r2, r3, #1
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	430a      	orrs	r2, r1
 80011fa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	689a      	ldr	r2, [r3, #8]
 8001202:	4b28      	ldr	r3, [pc, #160]	; (80012a4 <HAL_ADC_Init+0x1a8>)
 8001204:	4013      	ands	r3, r2
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	6812      	ldr	r2, [r2, #0]
 800120a:	68b9      	ldr	r1, [r7, #8]
 800120c:	430b      	orrs	r3, r1
 800120e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001218:	d003      	beq.n	8001222 <HAL_ADC_Init+0x126>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d104      	bne.n	800122c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	691b      	ldr	r3, [r3, #16]
 8001226:	3b01      	subs	r3, #1
 8001228:	051b      	lsls	r3, r3, #20
 800122a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001232:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	430a      	orrs	r2, r1
 800123e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689a      	ldr	r2, [r3, #8]
 8001246:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <HAL_ADC_Init+0x1ac>)
 8001248:	4013      	ands	r3, r2
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	429a      	cmp	r2, r3
 800124e:	d10b      	bne.n	8001268 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800125a:	f023 0303 	bic.w	r3, r3, #3
 800125e:	f043 0201 	orr.w	r2, r3, #1
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001266:	e018      	b.n	800129a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800126c:	f023 0312 	bic.w	r3, r3, #18
 8001270:	f043 0210 	orr.w	r2, r3, #16
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800127c:	f043 0201 	orr.w	r2, r3, #1
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001288:	e007      	b.n	800129a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800128e:	f043 0210 	orr.w	r2, r3, #16
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800129a:	7dfb      	ldrb	r3, [r7, #23]
}
 800129c:	4618      	mov	r0, r3
 800129e:	3718      	adds	r7, #24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	ffe1f7fd 	.word	0xffe1f7fd
 80012a8:	ff1f0efe 	.word	0xff1f0efe

080012ac <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012b8:	2300      	movs	r3, #0
 80012ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a64      	ldr	r2, [pc, #400]	; (8001454 <HAL_ADC_Start_DMA+0x1a8>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d004      	beq.n	80012d0 <HAL_ADC_Start_DMA+0x24>
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a63      	ldr	r2, [pc, #396]	; (8001458 <HAL_ADC_Start_DMA+0x1ac>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d106      	bne.n	80012de <HAL_ADC_Start_DMA+0x32>
 80012d0:	4b60      	ldr	r3, [pc, #384]	; (8001454 <HAL_ADC_Start_DMA+0x1a8>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f040 80b3 	bne.w	8001444 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d101      	bne.n	80012ec <HAL_ADC_Start_DMA+0x40>
 80012e8:	2302      	movs	r3, #2
 80012ea:	e0ae      	b.n	800144a <HAL_ADC_Start_DMA+0x19e>
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2201      	movs	r2, #1
 80012f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80012f4:	68f8      	ldr	r0, [r7, #12]
 80012f6:	f000 fa8d 	bl	8001814 <ADC_Enable>
 80012fa:	4603      	mov	r3, r0
 80012fc:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80012fe:	7dfb      	ldrb	r3, [r7, #23]
 8001300:	2b00      	cmp	r3, #0
 8001302:	f040 809a 	bne.w	800143a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800130a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800130e:	f023 0301 	bic.w	r3, r3, #1
 8001312:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a4e      	ldr	r2, [pc, #312]	; (8001458 <HAL_ADC_Start_DMA+0x1ac>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d105      	bne.n	8001330 <HAL_ADC_Start_DMA+0x84>
 8001324:	4b4b      	ldr	r3, [pc, #300]	; (8001454 <HAL_ADC_Start_DMA+0x1a8>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d115      	bne.n	800135c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001334:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001346:	2b00      	cmp	r3, #0
 8001348:	d026      	beq.n	8001398 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800134e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001352:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800135a:	e01d      	b.n	8001398 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001360:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a39      	ldr	r2, [pc, #228]	; (8001454 <HAL_ADC_Start_DMA+0x1a8>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d004      	beq.n	800137c <HAL_ADC_Start_DMA+0xd0>
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a38      	ldr	r2, [pc, #224]	; (8001458 <HAL_ADC_Start_DMA+0x1ac>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d10d      	bne.n	8001398 <HAL_ADC_Start_DMA+0xec>
 800137c:	4b35      	ldr	r3, [pc, #212]	; (8001454 <HAL_ADC_Start_DMA+0x1a8>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001384:	2b00      	cmp	r3, #0
 8001386:	d007      	beq.n	8001398 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800138c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001390:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800139c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d006      	beq.n	80013b2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a8:	f023 0206 	bic.w	r2, r3, #6
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	62da      	str	r2, [r3, #44]	; 0x2c
 80013b0:	e002      	b.n	80013b8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2200      	movs	r2, #0
 80013b6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2200      	movs	r2, #0
 80013bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	6a1b      	ldr	r3, [r3, #32]
 80013c4:	4a25      	ldr	r2, [pc, #148]	; (800145c <HAL_ADC_Start_DMA+0x1b0>)
 80013c6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	6a1b      	ldr	r3, [r3, #32]
 80013cc:	4a24      	ldr	r2, [pc, #144]	; (8001460 <HAL_ADC_Start_DMA+0x1b4>)
 80013ce:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	6a1b      	ldr	r3, [r3, #32]
 80013d4:	4a23      	ldr	r2, [pc, #140]	; (8001464 <HAL_ADC_Start_DMA+0x1b8>)
 80013d6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f06f 0202 	mvn.w	r2, #2
 80013e0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	689a      	ldr	r2, [r3, #8]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013f0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	6a18      	ldr	r0, [r3, #32]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	334c      	adds	r3, #76	; 0x4c
 80013fc:	4619      	mov	r1, r3
 80013fe:	68ba      	ldr	r2, [r7, #8]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f000 fd27 	bl	8001e54 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001410:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001414:	d108      	bne.n	8001428 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001424:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001426:	e00f      	b.n	8001448 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	689a      	ldr	r2, [r3, #8]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001436:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001438:	e006      	b.n	8001448 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	2200      	movs	r2, #0
 800143e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001442:	e001      	b.n	8001448 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001448:	7dfb      	ldrb	r3, [r7, #23]
}
 800144a:	4618      	mov	r0, r3
 800144c:	3718      	adds	r7, #24
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40012400 	.word	0x40012400
 8001458:	40012800 	.word	0x40012800
 800145c:	0800194b 	.word	0x0800194b
 8001460:	080019c7 	.word	0x080019c7
 8001464:	080019e3 	.word	0x080019e3

08001468 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f003 0320 	and.w	r3, r3, #32
 800147a:	2b20      	cmp	r3, #32
 800147c:	d140      	bne.n	8001500 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	2b02      	cmp	r3, #2
 800148a:	d139      	bne.n	8001500 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001490:	f003 0310 	and.w	r3, r3, #16
 8001494:	2b00      	cmp	r3, #0
 8001496:	d105      	bne.n	80014a4 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80014ae:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80014b2:	d11d      	bne.n	80014f0 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d119      	bne.n	80014f0 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	685a      	ldr	r2, [r3, #4]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f022 0220 	bic.w	r2, r2, #32
 80014ca:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d105      	bne.n	80014f0 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e8:	f043 0201 	orr.w	r2, r3, #1
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff facf 	bl	8000a94 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f06f 0212 	mvn.w	r2, #18
 80014fe:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800150a:	2b80      	cmp	r3, #128	; 0x80
 800150c:	d14f      	bne.n	80015ae <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	2b04      	cmp	r3, #4
 800151a:	d148      	bne.n	80015ae <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001520:	f003 0310 	and.w	r3, r3, #16
 8001524:	2b00      	cmp	r3, #0
 8001526:	d105      	bne.n	8001534 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800153e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001542:	d012      	beq.n	800156a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800154e:	2b00      	cmp	r3, #0
 8001550:	d125      	bne.n	800159e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800155c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001560:	d11d      	bne.n	800159e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001566:	2b00      	cmp	r3, #0
 8001568:	d119      	bne.n	800159e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	685a      	ldr	r2, [r3, #4]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001578:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800158e:	2b00      	cmp	r3, #0
 8001590:	d105      	bne.n	800159e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001596:	f043 0201 	orr.w	r2, r3, #1
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f000 fae6 	bl	8001b70 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f06f 020c 	mvn.w	r2, #12
 80015ac:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015b8:	2b40      	cmp	r3, #64	; 0x40
 80015ba:	d114      	bne.n	80015e6 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d10d      	bne.n	80015e6 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f000 f812 	bl	8001600 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f06f 0201 	mvn.w	r2, #1
 80015e4:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr

08001600 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr

08001612 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr

08001624 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800162e:	2300      	movs	r3, #0
 8001630:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001632:	2300      	movs	r3, #0
 8001634:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800163c:	2b01      	cmp	r3, #1
 800163e:	d101      	bne.n	8001644 <HAL_ADC_ConfigChannel+0x20>
 8001640:	2302      	movs	r3, #2
 8001642:	e0dc      	b.n	80017fe <HAL_ADC_ConfigChannel+0x1da>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	2b06      	cmp	r3, #6
 8001652:	d81c      	bhi.n	800168e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685a      	ldr	r2, [r3, #4]
 800165e:	4613      	mov	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	3b05      	subs	r3, #5
 8001666:	221f      	movs	r2, #31
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	4019      	ands	r1, r3
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	6818      	ldr	r0, [r3, #0]
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685a      	ldr	r2, [r3, #4]
 8001678:	4613      	mov	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	3b05      	subs	r3, #5
 8001680:	fa00 f203 	lsl.w	r2, r0, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	430a      	orrs	r2, r1
 800168a:	635a      	str	r2, [r3, #52]	; 0x34
 800168c:	e03c      	b.n	8001708 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2b0c      	cmp	r3, #12
 8001694:	d81c      	bhi.n	80016d0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685a      	ldr	r2, [r3, #4]
 80016a0:	4613      	mov	r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4413      	add	r3, r2
 80016a6:	3b23      	subs	r3, #35	; 0x23
 80016a8:	221f      	movs	r2, #31
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43db      	mvns	r3, r3
 80016b0:	4019      	ands	r1, r3
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	6818      	ldr	r0, [r3, #0]
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	4613      	mov	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4413      	add	r3, r2
 80016c0:	3b23      	subs	r3, #35	; 0x23
 80016c2:	fa00 f203 	lsl.w	r2, r0, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	430a      	orrs	r2, r1
 80016cc:	631a      	str	r2, [r3, #48]	; 0x30
 80016ce:	e01b      	b.n	8001708 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685a      	ldr	r2, [r3, #4]
 80016da:	4613      	mov	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4413      	add	r3, r2
 80016e0:	3b41      	subs	r3, #65	; 0x41
 80016e2:	221f      	movs	r2, #31
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	43db      	mvns	r3, r3
 80016ea:	4019      	ands	r1, r3
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	6818      	ldr	r0, [r3, #0]
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	4613      	mov	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	4413      	add	r3, r2
 80016fa:	3b41      	subs	r3, #65	; 0x41
 80016fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	430a      	orrs	r2, r1
 8001706:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2b09      	cmp	r3, #9
 800170e:	d91c      	bls.n	800174a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	68d9      	ldr	r1, [r3, #12]
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	4613      	mov	r3, r2
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	4413      	add	r3, r2
 8001720:	3b1e      	subs	r3, #30
 8001722:	2207      	movs	r2, #7
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	43db      	mvns	r3, r3
 800172a:	4019      	ands	r1, r3
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	6898      	ldr	r0, [r3, #8]
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4613      	mov	r3, r2
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	4413      	add	r3, r2
 800173a:	3b1e      	subs	r3, #30
 800173c:	fa00 f203 	lsl.w	r2, r0, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	430a      	orrs	r2, r1
 8001746:	60da      	str	r2, [r3, #12]
 8001748:	e019      	b.n	800177e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6919      	ldr	r1, [r3, #16]
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	4613      	mov	r3, r2
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	4413      	add	r3, r2
 800175a:	2207      	movs	r2, #7
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	4019      	ands	r1, r3
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	6898      	ldr	r0, [r3, #8]
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	4613      	mov	r3, r2
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	4413      	add	r3, r2
 8001772:	fa00 f203 	lsl.w	r2, r0, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	430a      	orrs	r2, r1
 800177c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2b10      	cmp	r3, #16
 8001784:	d003      	beq.n	800178e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800178a:	2b11      	cmp	r3, #17
 800178c:	d132      	bne.n	80017f4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a1d      	ldr	r2, [pc, #116]	; (8001808 <HAL_ADC_ConfigChannel+0x1e4>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d125      	bne.n	80017e4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d126      	bne.n	80017f4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	689a      	ldr	r2, [r3, #8]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80017b4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2b10      	cmp	r3, #16
 80017bc:	d11a      	bne.n	80017f4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017be:	4b13      	ldr	r3, [pc, #76]	; (800180c <HAL_ADC_ConfigChannel+0x1e8>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a13      	ldr	r2, [pc, #76]	; (8001810 <HAL_ADC_ConfigChannel+0x1ec>)
 80017c4:	fba2 2303 	umull	r2, r3, r2, r3
 80017c8:	0c9a      	lsrs	r2, r3, #18
 80017ca:	4613      	mov	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017d4:	e002      	b.n	80017dc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	3b01      	subs	r3, #1
 80017da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1f9      	bne.n	80017d6 <HAL_ADC_ConfigChannel+0x1b2>
 80017e2:	e007      	b.n	80017f4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e8:	f043 0220 	orr.w	r2, r3, #32
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3714      	adds	r7, #20
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr
 8001808:	40012400 	.word	0x40012400
 800180c:	20000000 	.word	0x20000000
 8001810:	431bde83 	.word	0x431bde83

08001814 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800181c:	2300      	movs	r3, #0
 800181e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001820:	2300      	movs	r3, #0
 8001822:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b01      	cmp	r3, #1
 8001830:	d040      	beq.n	80018b4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f042 0201 	orr.w	r2, r2, #1
 8001840:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001842:	4b1f      	ldr	r3, [pc, #124]	; (80018c0 <ADC_Enable+0xac>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a1f      	ldr	r2, [pc, #124]	; (80018c4 <ADC_Enable+0xb0>)
 8001848:	fba2 2303 	umull	r2, r3, r2, r3
 800184c:	0c9b      	lsrs	r3, r3, #18
 800184e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001850:	e002      	b.n	8001858 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	3b01      	subs	r3, #1
 8001856:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1f9      	bne.n	8001852 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800185e:	f7ff fc43 	bl	80010e8 <HAL_GetTick>
 8001862:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001864:	e01f      	b.n	80018a6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001866:	f7ff fc3f 	bl	80010e8 <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d918      	bls.n	80018a6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b01      	cmp	r3, #1
 8001880:	d011      	beq.n	80018a6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001886:	f043 0210 	orr.w	r2, r3, #16
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001892:	f043 0201 	orr.w	r2, r3, #1
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e007      	b.n	80018b6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d1d8      	bne.n	8001866 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000000 	.word	0x20000000
 80018c4:	431bde83 	.word	0x431bde83

080018c8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018d0:	2300      	movs	r3, #0
 80018d2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d12e      	bne.n	8001940 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f022 0201 	bic.w	r2, r2, #1
 80018f0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80018f2:	f7ff fbf9 	bl	80010e8 <HAL_GetTick>
 80018f6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80018f8:	e01b      	b.n	8001932 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80018fa:	f7ff fbf5 	bl	80010e8 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d914      	bls.n	8001932 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	2b01      	cmp	r3, #1
 8001914:	d10d      	bne.n	8001932 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191a:	f043 0210 	orr.w	r2, r3, #16
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001926:	f043 0201 	orr.w	r2, r3, #1
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e007      	b.n	8001942 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	2b01      	cmp	r3, #1
 800193e:	d0dc      	beq.n	80018fa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b084      	sub	sp, #16
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001956:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001960:	2b00      	cmp	r3, #0
 8001962:	d127      	bne.n	80019b4 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001968:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800197a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800197e:	d115      	bne.n	80019ac <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001984:	2b00      	cmp	r3, #0
 8001986:	d111      	bne.n	80019ac <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001998:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d105      	bne.n	80019ac <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a4:	f043 0201 	orr.w	r2, r3, #1
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	f7ff f871 	bl	8000a94 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80019b2:	e004      	b.n	80019be <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6a1b      	ldr	r3, [r3, #32]
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	4798      	blx	r3
}
 80019be:	bf00      	nop
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b084      	sub	sp, #16
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	f7ff fe0a 	bl	80015ee <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019da:	bf00      	nop
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b084      	sub	sp, #16
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ee:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a00:	f043 0204 	orr.w	r2, r3, #4
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	f7ff fe02 	bl	8001612 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001a18:	b590      	push	{r4, r7, lr}
 8001a1a:	b087      	sub	sp, #28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a20:	2300      	movs	r3, #0
 8001a22:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001a24:	2300      	movs	r3, #0
 8001a26:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d101      	bne.n	8001a36 <HAL_ADCEx_Calibration_Start+0x1e>
 8001a32:	2302      	movs	r3, #2
 8001a34:	e095      	b.n	8001b62 <HAL_ADCEx_Calibration_Start+0x14a>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff ff42 	bl	80018c8 <ADC_ConversionStop_Disable>
 8001a44:	4603      	mov	r3, r0
 8001a46:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001a48:	7dfb      	ldrb	r3, [r7, #23]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f040 8084 	bne.w	8001b58 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a54:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a58:	f023 0302 	bic.w	r3, r3, #2
 8001a5c:	f043 0202 	orr.w	r2, r3, #2
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001a64:	4b41      	ldr	r3, [pc, #260]	; (8001b6c <HAL_ADCEx_Calibration_Start+0x154>)
 8001a66:	681c      	ldr	r4, [r3, #0]
 8001a68:	2002      	movs	r0, #2
 8001a6a:	f002 fe8b 	bl	8004784 <HAL_RCCEx_GetPeriphCLKFreq>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001a74:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001a76:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001a78:	e002      	b.n	8001a80 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f9      	bne.n	8001a7a <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff fec4 	bl	8001814 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	689a      	ldr	r2, [r3, #8]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f042 0208 	orr.w	r2, r2, #8
 8001a9a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001a9c:	f7ff fb24 	bl	80010e8 <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001aa2:	e01b      	b.n	8001adc <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001aa4:	f7ff fb20 	bl	80010e8 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b0a      	cmp	r3, #10
 8001ab0:	d914      	bls.n	8001adc <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f003 0308 	and.w	r3, r3, #8
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d00d      	beq.n	8001adc <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac4:	f023 0312 	bic.w	r3, r3, #18
 8001ac8:	f043 0210 	orr.w	r2, r3, #16
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e042      	b.n	8001b62 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f003 0308 	and.w	r3, r3, #8
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1dc      	bne.n	8001aa4 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f042 0204 	orr.w	r2, r2, #4
 8001af8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001afa:	f7ff faf5 	bl	80010e8 <HAL_GetTick>
 8001afe:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001b00:	e01b      	b.n	8001b3a <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001b02:	f7ff faf1 	bl	80010e8 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b0a      	cmp	r3, #10
 8001b0e:	d914      	bls.n	8001b3a <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f003 0304 	and.w	r3, r3, #4
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d00d      	beq.n	8001b3a <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b22:	f023 0312 	bic.w	r3, r3, #18
 8001b26:	f043 0210 	orr.w	r2, r3, #16
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e013      	b.n	8001b62 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1dc      	bne.n	8001b02 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b4c:	f023 0303 	bic.w	r3, r3, #3
 8001b50:	f043 0201 	orr.w	r2, r3, #1
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001b60:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	371c      	adds	r7, #28
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd90      	pop	{r4, r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000000 	.word	0x20000000

08001b70 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bc80      	pop	{r7}
 8001b80:	4770      	bx	lr
	...

08001b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b94:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bb6:	4a04      	ldr	r2, [pc, #16]	; (8001bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	60d3      	str	r3, [r2, #12]
}
 8001bbc:	bf00      	nop
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bc80      	pop	{r7}
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd0:	4b04      	ldr	r3, [pc, #16]	; (8001be4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	0a1b      	lsrs	r3, r3, #8
 8001bd6:	f003 0307 	and.w	r3, r3, #7
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	db0b      	blt.n	8001c12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	f003 021f 	and.w	r2, r3, #31
 8001c00:	4906      	ldr	r1, [pc, #24]	; (8001c1c <__NVIC_EnableIRQ+0x34>)
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	095b      	lsrs	r3, r3, #5
 8001c08:	2001      	movs	r0, #1
 8001c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr
 8001c1c:	e000e100 	.word	0xe000e100

08001c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	6039      	str	r1, [r7, #0]
 8001c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	db0a      	blt.n	8001c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	490c      	ldr	r1, [pc, #48]	; (8001c6c <__NVIC_SetPriority+0x4c>)
 8001c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3e:	0112      	lsls	r2, r2, #4
 8001c40:	b2d2      	uxtb	r2, r2
 8001c42:	440b      	add	r3, r1
 8001c44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c48:	e00a      	b.n	8001c60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	4908      	ldr	r1, [pc, #32]	; (8001c70 <__NVIC_SetPriority+0x50>)
 8001c50:	79fb      	ldrb	r3, [r7, #7]
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	3b04      	subs	r3, #4
 8001c58:	0112      	lsls	r2, r2, #4
 8001c5a:	b2d2      	uxtb	r2, r2
 8001c5c:	440b      	add	r3, r1
 8001c5e:	761a      	strb	r2, [r3, #24]
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bc80      	pop	{r7}
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	e000e100 	.word	0xe000e100
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b089      	sub	sp, #36	; 0x24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	f1c3 0307 	rsb	r3, r3, #7
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	bf28      	it	cs
 8001c92:	2304      	movcs	r3, #4
 8001c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	3304      	adds	r3, #4
 8001c9a:	2b06      	cmp	r3, #6
 8001c9c:	d902      	bls.n	8001ca4 <NVIC_EncodePriority+0x30>
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	3b03      	subs	r3, #3
 8001ca2:	e000      	b.n	8001ca6 <NVIC_EncodePriority+0x32>
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43da      	mvns	r2, r3
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	401a      	ands	r2, r3
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc6:	43d9      	mvns	r1, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ccc:	4313      	orrs	r3, r2
         );
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3724      	adds	r7, #36	; 0x24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr

08001cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ce8:	d301      	bcc.n	8001cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cea:	2301      	movs	r3, #1
 8001cec:	e00f      	b.n	8001d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cee:	4a0a      	ldr	r2, [pc, #40]	; (8001d18 <SysTick_Config+0x40>)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cf6:	210f      	movs	r1, #15
 8001cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cfc:	f7ff ff90 	bl	8001c20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d00:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <SysTick_Config+0x40>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d06:	4b04      	ldr	r3, [pc, #16]	; (8001d18 <SysTick_Config+0x40>)
 8001d08:	2207      	movs	r2, #7
 8001d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	e000e010 	.word	0xe000e010

08001d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff ff2d 	bl	8001b84 <__NVIC_SetPriorityGrouping>
}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b086      	sub	sp, #24
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	4603      	mov	r3, r0
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	607a      	str	r2, [r7, #4]
 8001d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d44:	f7ff ff42 	bl	8001bcc <__NVIC_GetPriorityGrouping>
 8001d48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	68b9      	ldr	r1, [r7, #8]
 8001d4e:	6978      	ldr	r0, [r7, #20]
 8001d50:	f7ff ff90 	bl	8001c74 <NVIC_EncodePriority>
 8001d54:	4602      	mov	r2, r0
 8001d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff ff5f 	bl	8001c20 <__NVIC_SetPriority>
}
 8001d62:	bf00      	nop
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	4603      	mov	r3, r0
 8001d72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff ff35 	bl	8001be8 <__NVIC_EnableIRQ>
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7ff ffa2 	bl	8001cd8 <SysTick_Config>
 8001d94:	4603      	mov	r3, r0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
	...

08001da0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001da8:	2300      	movs	r3, #0
 8001daa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e043      	b.n	8001e3e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	4b22      	ldr	r3, [pc, #136]	; (8001e48 <HAL_DMA_Init+0xa8>)
 8001dbe:	4413      	add	r3, r2
 8001dc0:	4a22      	ldr	r2, [pc, #136]	; (8001e4c <HAL_DMA_Init+0xac>)
 8001dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc6:	091b      	lsrs	r3, r3, #4
 8001dc8:	009a      	lsls	r2, r3, #2
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a1f      	ldr	r2, [pc, #124]	; (8001e50 <HAL_DMA_Init+0xb0>)
 8001dd2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001dea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001dee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001df8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e18:	68fa      	ldr	r2, [r7, #12]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3714      	adds	r7, #20
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr
 8001e48:	bffdfff8 	.word	0xbffdfff8
 8001e4c:	cccccccd 	.word	0xcccccccd
 8001e50:	40020000 	.word	0x40020000

08001e54 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
 8001e60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e62:	2300      	movs	r3, #0
 8001e64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d101      	bne.n	8001e74 <HAL_DMA_Start_IT+0x20>
 8001e70:	2302      	movs	r3, #2
 8001e72:	e04a      	b.n	8001f0a <HAL_DMA_Start_IT+0xb6>
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d13a      	bne.n	8001efc <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2202      	movs	r2, #2
 8001e8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2200      	movs	r2, #0
 8001e92:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f022 0201 	bic.w	r2, r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	68b9      	ldr	r1, [r7, #8]
 8001eaa:	68f8      	ldr	r0, [r7, #12]
 8001eac:	f000 f938 	bl	8002120 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d008      	beq.n	8001eca <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f042 020e 	orr.w	r2, r2, #14
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	e00f      	b.n	8001eea <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 0204 	bic.w	r2, r2, #4
 8001ed8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f042 020a 	orr.w	r2, r2, #10
 8001ee8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f042 0201 	orr.w	r2, r2, #1
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	e005      	b.n	8001f08 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001f04:	2302      	movs	r3, #2
 8001f06:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001f08:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
	...

08001f14 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f30:	2204      	movs	r2, #4
 8001f32:	409a      	lsls	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	4013      	ands	r3, r2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d04f      	beq.n	8001fdc <HAL_DMA_IRQHandler+0xc8>
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f003 0304 	and.w	r3, r3, #4
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d04a      	beq.n	8001fdc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0320 	and.w	r3, r3, #32
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d107      	bne.n	8001f64 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 0204 	bic.w	r2, r2, #4
 8001f62:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a66      	ldr	r2, [pc, #408]	; (8002104 <HAL_DMA_IRQHandler+0x1f0>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d029      	beq.n	8001fc2 <HAL_DMA_IRQHandler+0xae>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a65      	ldr	r2, [pc, #404]	; (8002108 <HAL_DMA_IRQHandler+0x1f4>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d022      	beq.n	8001fbe <HAL_DMA_IRQHandler+0xaa>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a63      	ldr	r2, [pc, #396]	; (800210c <HAL_DMA_IRQHandler+0x1f8>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d01a      	beq.n	8001fb8 <HAL_DMA_IRQHandler+0xa4>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a62      	ldr	r2, [pc, #392]	; (8002110 <HAL_DMA_IRQHandler+0x1fc>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d012      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0x9e>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a60      	ldr	r2, [pc, #384]	; (8002114 <HAL_DMA_IRQHandler+0x200>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d00a      	beq.n	8001fac <HAL_DMA_IRQHandler+0x98>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a5f      	ldr	r2, [pc, #380]	; (8002118 <HAL_DMA_IRQHandler+0x204>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d102      	bne.n	8001fa6 <HAL_DMA_IRQHandler+0x92>
 8001fa0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001fa4:	e00e      	b.n	8001fc4 <HAL_DMA_IRQHandler+0xb0>
 8001fa6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001faa:	e00b      	b.n	8001fc4 <HAL_DMA_IRQHandler+0xb0>
 8001fac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001fb0:	e008      	b.n	8001fc4 <HAL_DMA_IRQHandler+0xb0>
 8001fb2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fb6:	e005      	b.n	8001fc4 <HAL_DMA_IRQHandler+0xb0>
 8001fb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fbc:	e002      	b.n	8001fc4 <HAL_DMA_IRQHandler+0xb0>
 8001fbe:	2340      	movs	r3, #64	; 0x40
 8001fc0:	e000      	b.n	8001fc4 <HAL_DMA_IRQHandler+0xb0>
 8001fc2:	2304      	movs	r3, #4
 8001fc4:	4a55      	ldr	r2, [pc, #340]	; (800211c <HAL_DMA_IRQHandler+0x208>)
 8001fc6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f000 8094 	beq.w	80020fa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001fda:	e08e      	b.n	80020fa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe0:	2202      	movs	r2, #2
 8001fe2:	409a      	lsls	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d056      	beq.n	800209a <HAL_DMA_IRQHandler+0x186>
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d051      	beq.n	800209a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0320 	and.w	r3, r3, #32
 8002000:	2b00      	cmp	r3, #0
 8002002:	d10b      	bne.n	800201c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 020a 	bic.w	r2, r2, #10
 8002012:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a38      	ldr	r2, [pc, #224]	; (8002104 <HAL_DMA_IRQHandler+0x1f0>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d029      	beq.n	800207a <HAL_DMA_IRQHandler+0x166>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a37      	ldr	r2, [pc, #220]	; (8002108 <HAL_DMA_IRQHandler+0x1f4>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d022      	beq.n	8002076 <HAL_DMA_IRQHandler+0x162>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a35      	ldr	r2, [pc, #212]	; (800210c <HAL_DMA_IRQHandler+0x1f8>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d01a      	beq.n	8002070 <HAL_DMA_IRQHandler+0x15c>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a34      	ldr	r2, [pc, #208]	; (8002110 <HAL_DMA_IRQHandler+0x1fc>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d012      	beq.n	800206a <HAL_DMA_IRQHandler+0x156>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a32      	ldr	r2, [pc, #200]	; (8002114 <HAL_DMA_IRQHandler+0x200>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d00a      	beq.n	8002064 <HAL_DMA_IRQHandler+0x150>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a31      	ldr	r2, [pc, #196]	; (8002118 <HAL_DMA_IRQHandler+0x204>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d102      	bne.n	800205e <HAL_DMA_IRQHandler+0x14a>
 8002058:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800205c:	e00e      	b.n	800207c <HAL_DMA_IRQHandler+0x168>
 800205e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002062:	e00b      	b.n	800207c <HAL_DMA_IRQHandler+0x168>
 8002064:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002068:	e008      	b.n	800207c <HAL_DMA_IRQHandler+0x168>
 800206a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800206e:	e005      	b.n	800207c <HAL_DMA_IRQHandler+0x168>
 8002070:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002074:	e002      	b.n	800207c <HAL_DMA_IRQHandler+0x168>
 8002076:	2320      	movs	r3, #32
 8002078:	e000      	b.n	800207c <HAL_DMA_IRQHandler+0x168>
 800207a:	2302      	movs	r3, #2
 800207c:	4a27      	ldr	r2, [pc, #156]	; (800211c <HAL_DMA_IRQHandler+0x208>)
 800207e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208c:	2b00      	cmp	r3, #0
 800208e:	d034      	beq.n	80020fa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002098:	e02f      	b.n	80020fa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	2208      	movs	r2, #8
 80020a0:	409a      	lsls	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	4013      	ands	r3, r2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d028      	beq.n	80020fc <HAL_DMA_IRQHandler+0x1e8>
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	f003 0308 	and.w	r3, r3, #8
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d023      	beq.n	80020fc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 020e 	bic.w	r2, r2, #14
 80020c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020cc:	2101      	movs	r1, #1
 80020ce:	fa01 f202 	lsl.w	r2, r1, r2
 80020d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d004      	beq.n	80020fc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	4798      	blx	r3
    }
  }
  return;
 80020fa:	bf00      	nop
 80020fc:	bf00      	nop
}
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40020008 	.word	0x40020008
 8002108:	4002001c 	.word	0x4002001c
 800210c:	40020030 	.word	0x40020030
 8002110:	40020044 	.word	0x40020044
 8002114:	40020058 	.word	0x40020058
 8002118:	4002006c 	.word	0x4002006c
 800211c:	40020000 	.word	0x40020000

08002120 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
 800212c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002136:	2101      	movs	r1, #1
 8002138:	fa01 f202 	lsl.w	r2, r1, r2
 800213c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2b10      	cmp	r3, #16
 800214c:	d108      	bne.n	8002160 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800215e:	e007      	b.n	8002170 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68ba      	ldr	r2, [r7, #8]
 8002166:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	60da      	str	r2, [r3, #12]
}
 8002170:	bf00      	nop
 8002172:	3714      	adds	r7, #20
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr
	...

0800217c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800217c:	b480      	push	{r7}
 800217e:	b08b      	sub	sp, #44	; 0x2c
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002186:	2300      	movs	r3, #0
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800218a:	2300      	movs	r3, #0
 800218c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800218e:	e169      	b.n	8002464 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002190:	2201      	movs	r2, #1
 8002192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	69fa      	ldr	r2, [r7, #28]
 80021a0:	4013      	ands	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	f040 8158 	bne.w	800245e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	4a9a      	ldr	r2, [pc, #616]	; (800241c <HAL_GPIO_Init+0x2a0>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d05e      	beq.n	8002276 <HAL_GPIO_Init+0xfa>
 80021b8:	4a98      	ldr	r2, [pc, #608]	; (800241c <HAL_GPIO_Init+0x2a0>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d875      	bhi.n	80022aa <HAL_GPIO_Init+0x12e>
 80021be:	4a98      	ldr	r2, [pc, #608]	; (8002420 <HAL_GPIO_Init+0x2a4>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d058      	beq.n	8002276 <HAL_GPIO_Init+0xfa>
 80021c4:	4a96      	ldr	r2, [pc, #600]	; (8002420 <HAL_GPIO_Init+0x2a4>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d86f      	bhi.n	80022aa <HAL_GPIO_Init+0x12e>
 80021ca:	4a96      	ldr	r2, [pc, #600]	; (8002424 <HAL_GPIO_Init+0x2a8>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d052      	beq.n	8002276 <HAL_GPIO_Init+0xfa>
 80021d0:	4a94      	ldr	r2, [pc, #592]	; (8002424 <HAL_GPIO_Init+0x2a8>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d869      	bhi.n	80022aa <HAL_GPIO_Init+0x12e>
 80021d6:	4a94      	ldr	r2, [pc, #592]	; (8002428 <HAL_GPIO_Init+0x2ac>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d04c      	beq.n	8002276 <HAL_GPIO_Init+0xfa>
 80021dc:	4a92      	ldr	r2, [pc, #584]	; (8002428 <HAL_GPIO_Init+0x2ac>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d863      	bhi.n	80022aa <HAL_GPIO_Init+0x12e>
 80021e2:	4a92      	ldr	r2, [pc, #584]	; (800242c <HAL_GPIO_Init+0x2b0>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d046      	beq.n	8002276 <HAL_GPIO_Init+0xfa>
 80021e8:	4a90      	ldr	r2, [pc, #576]	; (800242c <HAL_GPIO_Init+0x2b0>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d85d      	bhi.n	80022aa <HAL_GPIO_Init+0x12e>
 80021ee:	2b12      	cmp	r3, #18
 80021f0:	d82a      	bhi.n	8002248 <HAL_GPIO_Init+0xcc>
 80021f2:	2b12      	cmp	r3, #18
 80021f4:	d859      	bhi.n	80022aa <HAL_GPIO_Init+0x12e>
 80021f6:	a201      	add	r2, pc, #4	; (adr r2, 80021fc <HAL_GPIO_Init+0x80>)
 80021f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021fc:	08002277 	.word	0x08002277
 8002200:	08002251 	.word	0x08002251
 8002204:	08002263 	.word	0x08002263
 8002208:	080022a5 	.word	0x080022a5
 800220c:	080022ab 	.word	0x080022ab
 8002210:	080022ab 	.word	0x080022ab
 8002214:	080022ab 	.word	0x080022ab
 8002218:	080022ab 	.word	0x080022ab
 800221c:	080022ab 	.word	0x080022ab
 8002220:	080022ab 	.word	0x080022ab
 8002224:	080022ab 	.word	0x080022ab
 8002228:	080022ab 	.word	0x080022ab
 800222c:	080022ab 	.word	0x080022ab
 8002230:	080022ab 	.word	0x080022ab
 8002234:	080022ab 	.word	0x080022ab
 8002238:	080022ab 	.word	0x080022ab
 800223c:	080022ab 	.word	0x080022ab
 8002240:	08002259 	.word	0x08002259
 8002244:	0800226d 	.word	0x0800226d
 8002248:	4a79      	ldr	r2, [pc, #484]	; (8002430 <HAL_GPIO_Init+0x2b4>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d013      	beq.n	8002276 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800224e:	e02c      	b.n	80022aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	623b      	str	r3, [r7, #32]
          break;
 8002256:	e029      	b.n	80022ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	3304      	adds	r3, #4
 800225e:	623b      	str	r3, [r7, #32]
          break;
 8002260:	e024      	b.n	80022ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	3308      	adds	r3, #8
 8002268:	623b      	str	r3, [r7, #32]
          break;
 800226a:	e01f      	b.n	80022ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	330c      	adds	r3, #12
 8002272:	623b      	str	r3, [r7, #32]
          break;
 8002274:	e01a      	b.n	80022ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d102      	bne.n	8002284 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800227e:	2304      	movs	r3, #4
 8002280:	623b      	str	r3, [r7, #32]
          break;
 8002282:	e013      	b.n	80022ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d105      	bne.n	8002298 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800228c:	2308      	movs	r3, #8
 800228e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	69fa      	ldr	r2, [r7, #28]
 8002294:	611a      	str	r2, [r3, #16]
          break;
 8002296:	e009      	b.n	80022ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002298:	2308      	movs	r3, #8
 800229a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	69fa      	ldr	r2, [r7, #28]
 80022a0:	615a      	str	r2, [r3, #20]
          break;
 80022a2:	e003      	b.n	80022ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022a4:	2300      	movs	r3, #0
 80022a6:	623b      	str	r3, [r7, #32]
          break;
 80022a8:	e000      	b.n	80022ac <HAL_GPIO_Init+0x130>
          break;
 80022aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	2bff      	cmp	r3, #255	; 0xff
 80022b0:	d801      	bhi.n	80022b6 <HAL_GPIO_Init+0x13a>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	e001      	b.n	80022ba <HAL_GPIO_Init+0x13e>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	3304      	adds	r3, #4
 80022ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	2bff      	cmp	r3, #255	; 0xff
 80022c0:	d802      	bhi.n	80022c8 <HAL_GPIO_Init+0x14c>
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	e002      	b.n	80022ce <HAL_GPIO_Init+0x152>
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	3b08      	subs	r3, #8
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	210f      	movs	r1, #15
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	fa01 f303 	lsl.w	r3, r1, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	401a      	ands	r2, r3
 80022e0:	6a39      	ldr	r1, [r7, #32]
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	fa01 f303 	lsl.w	r3, r1, r3
 80022e8:	431a      	orrs	r2, r3
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f000 80b1 	beq.w	800245e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022fc:	4b4d      	ldr	r3, [pc, #308]	; (8002434 <HAL_GPIO_Init+0x2b8>)
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	4a4c      	ldr	r2, [pc, #304]	; (8002434 <HAL_GPIO_Init+0x2b8>)
 8002302:	f043 0301 	orr.w	r3, r3, #1
 8002306:	6193      	str	r3, [r2, #24]
 8002308:	4b4a      	ldr	r3, [pc, #296]	; (8002434 <HAL_GPIO_Init+0x2b8>)
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	60bb      	str	r3, [r7, #8]
 8002312:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002314:	4a48      	ldr	r2, [pc, #288]	; (8002438 <HAL_GPIO_Init+0x2bc>)
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	089b      	lsrs	r3, r3, #2
 800231a:	3302      	adds	r3, #2
 800231c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002320:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	f003 0303 	and.w	r3, r3, #3
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	220f      	movs	r2, #15
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	4013      	ands	r3, r2
 8002336:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a40      	ldr	r2, [pc, #256]	; (800243c <HAL_GPIO_Init+0x2c0>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d013      	beq.n	8002368 <HAL_GPIO_Init+0x1ec>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a3f      	ldr	r2, [pc, #252]	; (8002440 <HAL_GPIO_Init+0x2c4>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d00d      	beq.n	8002364 <HAL_GPIO_Init+0x1e8>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a3e      	ldr	r2, [pc, #248]	; (8002444 <HAL_GPIO_Init+0x2c8>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d007      	beq.n	8002360 <HAL_GPIO_Init+0x1e4>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a3d      	ldr	r2, [pc, #244]	; (8002448 <HAL_GPIO_Init+0x2cc>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d101      	bne.n	800235c <HAL_GPIO_Init+0x1e0>
 8002358:	2303      	movs	r3, #3
 800235a:	e006      	b.n	800236a <HAL_GPIO_Init+0x1ee>
 800235c:	2304      	movs	r3, #4
 800235e:	e004      	b.n	800236a <HAL_GPIO_Init+0x1ee>
 8002360:	2302      	movs	r3, #2
 8002362:	e002      	b.n	800236a <HAL_GPIO_Init+0x1ee>
 8002364:	2301      	movs	r3, #1
 8002366:	e000      	b.n	800236a <HAL_GPIO_Init+0x1ee>
 8002368:	2300      	movs	r3, #0
 800236a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800236c:	f002 0203 	and.w	r2, r2, #3
 8002370:	0092      	lsls	r2, r2, #2
 8002372:	4093      	lsls	r3, r2
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	4313      	orrs	r3, r2
 8002378:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800237a:	492f      	ldr	r1, [pc, #188]	; (8002438 <HAL_GPIO_Init+0x2bc>)
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	089b      	lsrs	r3, r3, #2
 8002380:	3302      	adds	r3, #2
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d006      	beq.n	80023a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002394:	4b2d      	ldr	r3, [pc, #180]	; (800244c <HAL_GPIO_Init+0x2d0>)
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	492c      	ldr	r1, [pc, #176]	; (800244c <HAL_GPIO_Init+0x2d0>)
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	4313      	orrs	r3, r2
 800239e:	600b      	str	r3, [r1, #0]
 80023a0:	e006      	b.n	80023b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023a2:	4b2a      	ldr	r3, [pc, #168]	; (800244c <HAL_GPIO_Init+0x2d0>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	43db      	mvns	r3, r3
 80023aa:	4928      	ldr	r1, [pc, #160]	; (800244c <HAL_GPIO_Init+0x2d0>)
 80023ac:	4013      	ands	r3, r2
 80023ae:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d006      	beq.n	80023ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023bc:	4b23      	ldr	r3, [pc, #140]	; (800244c <HAL_GPIO_Init+0x2d0>)
 80023be:	685a      	ldr	r2, [r3, #4]
 80023c0:	4922      	ldr	r1, [pc, #136]	; (800244c <HAL_GPIO_Init+0x2d0>)
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	604b      	str	r3, [r1, #4]
 80023c8:	e006      	b.n	80023d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023ca:	4b20      	ldr	r3, [pc, #128]	; (800244c <HAL_GPIO_Init+0x2d0>)
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	43db      	mvns	r3, r3
 80023d2:	491e      	ldr	r1, [pc, #120]	; (800244c <HAL_GPIO_Init+0x2d0>)
 80023d4:	4013      	ands	r3, r2
 80023d6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d006      	beq.n	80023f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023e4:	4b19      	ldr	r3, [pc, #100]	; (800244c <HAL_GPIO_Init+0x2d0>)
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	4918      	ldr	r1, [pc, #96]	; (800244c <HAL_GPIO_Init+0x2d0>)
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	608b      	str	r3, [r1, #8]
 80023f0:	e006      	b.n	8002400 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023f2:	4b16      	ldr	r3, [pc, #88]	; (800244c <HAL_GPIO_Init+0x2d0>)
 80023f4:	689a      	ldr	r2, [r3, #8]
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	43db      	mvns	r3, r3
 80023fa:	4914      	ldr	r1, [pc, #80]	; (800244c <HAL_GPIO_Init+0x2d0>)
 80023fc:	4013      	ands	r3, r2
 80023fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d021      	beq.n	8002450 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800240c:	4b0f      	ldr	r3, [pc, #60]	; (800244c <HAL_GPIO_Init+0x2d0>)
 800240e:	68da      	ldr	r2, [r3, #12]
 8002410:	490e      	ldr	r1, [pc, #56]	; (800244c <HAL_GPIO_Init+0x2d0>)
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	4313      	orrs	r3, r2
 8002416:	60cb      	str	r3, [r1, #12]
 8002418:	e021      	b.n	800245e <HAL_GPIO_Init+0x2e2>
 800241a:	bf00      	nop
 800241c:	10320000 	.word	0x10320000
 8002420:	10310000 	.word	0x10310000
 8002424:	10220000 	.word	0x10220000
 8002428:	10210000 	.word	0x10210000
 800242c:	10120000 	.word	0x10120000
 8002430:	10110000 	.word	0x10110000
 8002434:	40021000 	.word	0x40021000
 8002438:	40010000 	.word	0x40010000
 800243c:	40010800 	.word	0x40010800
 8002440:	40010c00 	.word	0x40010c00
 8002444:	40011000 	.word	0x40011000
 8002448:	40011400 	.word	0x40011400
 800244c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002450:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <HAL_GPIO_Init+0x304>)
 8002452:	68da      	ldr	r2, [r3, #12]
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	43db      	mvns	r3, r3
 8002458:	4909      	ldr	r1, [pc, #36]	; (8002480 <HAL_GPIO_Init+0x304>)
 800245a:	4013      	ands	r3, r2
 800245c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	3301      	adds	r3, #1
 8002462:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246a:	fa22 f303 	lsr.w	r3, r2, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	f47f ae8e 	bne.w	8002190 <HAL_GPIO_Init+0x14>
  }
}
 8002474:	bf00      	nop
 8002476:	bf00      	nop
 8002478:	372c      	adds	r7, #44	; 0x2c
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr
 8002480:	40010400 	.word	0x40010400

08002484 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002486:	b08b      	sub	sp, #44	; 0x2c
 8002488:	af06      	add	r7, sp, #24
 800248a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e0fd      	b.n	8002692 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d106      	bne.n	80024b0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f007 f854 	bl	8009558 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2203      	movs	r2, #3
 80024b4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	f002 fcfb 	bl	8004eb8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	603b      	str	r3, [r7, #0]
 80024c8:	687e      	ldr	r6, [r7, #4]
 80024ca:	466d      	mov	r5, sp
 80024cc:	f106 0410 	add.w	r4, r6, #16
 80024d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024d4:	6823      	ldr	r3, [r4, #0]
 80024d6:	602b      	str	r3, [r5, #0]
 80024d8:	1d33      	adds	r3, r6, #4
 80024da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024dc:	6838      	ldr	r0, [r7, #0]
 80024de:	f002 fcc5 	bl	8004e6c <USB_CoreInit>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d005      	beq.n	80024f4 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2202      	movs	r2, #2
 80024ec:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e0ce      	b.n	8002692 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2100      	movs	r1, #0
 80024fa:	4618      	mov	r0, r3
 80024fc:	f002 fcf6 	bl	8004eec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002500:	2300      	movs	r3, #0
 8002502:	73fb      	strb	r3, [r7, #15]
 8002504:	e04c      	b.n	80025a0 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002506:	7bfb      	ldrb	r3, [r7, #15]
 8002508:	6879      	ldr	r1, [r7, #4]
 800250a:	1c5a      	adds	r2, r3, #1
 800250c:	4613      	mov	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4413      	add	r3, r2
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	440b      	add	r3, r1
 8002516:	3301      	adds	r3, #1
 8002518:	2201      	movs	r2, #1
 800251a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800251c:	7bfb      	ldrb	r3, [r7, #15]
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	1c5a      	adds	r2, r3, #1
 8002522:	4613      	mov	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4413      	add	r3, r2
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	440b      	add	r3, r1
 800252c:	7bfa      	ldrb	r2, [r7, #15]
 800252e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002530:	7bfa      	ldrb	r2, [r7, #15]
 8002532:	7bfb      	ldrb	r3, [r7, #15]
 8002534:	b298      	uxth	r0, r3
 8002536:	6879      	ldr	r1, [r7, #4]
 8002538:	4613      	mov	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4413      	add	r3, r2
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	440b      	add	r3, r1
 8002542:	3336      	adds	r3, #54	; 0x36
 8002544:	4602      	mov	r2, r0
 8002546:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002548:	7bfb      	ldrb	r3, [r7, #15]
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	1c5a      	adds	r2, r3, #1
 800254e:	4613      	mov	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4413      	add	r3, r2
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	440b      	add	r3, r1
 8002558:	3303      	adds	r3, #3
 800255a:	2200      	movs	r2, #0
 800255c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800255e:	7bfa      	ldrb	r2, [r7, #15]
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	4613      	mov	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	440b      	add	r3, r1
 800256c:	3338      	adds	r3, #56	; 0x38
 800256e:	2200      	movs	r2, #0
 8002570:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002572:	7bfa      	ldrb	r2, [r7, #15]
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	4613      	mov	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4413      	add	r3, r2
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	440b      	add	r3, r1
 8002580:	333c      	adds	r3, #60	; 0x3c
 8002582:	2200      	movs	r2, #0
 8002584:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002586:	7bfa      	ldrb	r2, [r7, #15]
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	4613      	mov	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	440b      	add	r3, r1
 8002594:	3340      	adds	r3, #64	; 0x40
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800259a:	7bfb      	ldrb	r3, [r7, #15]
 800259c:	3301      	adds	r3, #1
 800259e:	73fb      	strb	r3, [r7, #15]
 80025a0:	7bfa      	ldrb	r2, [r7, #15]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d3ad      	bcc.n	8002506 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025aa:	2300      	movs	r3, #0
 80025ac:	73fb      	strb	r3, [r7, #15]
 80025ae:	e044      	b.n	800263a <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025b0:	7bfa      	ldrb	r2, [r7, #15]
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	4613      	mov	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4413      	add	r3, r2
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	440b      	add	r3, r1
 80025be:	f203 1369 	addw	r3, r3, #361	; 0x169
 80025c2:	2200      	movs	r2, #0
 80025c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80025c6:	7bfa      	ldrb	r2, [r7, #15]
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	4613      	mov	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4413      	add	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	440b      	add	r3, r1
 80025d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80025d8:	7bfa      	ldrb	r2, [r7, #15]
 80025da:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025dc:	7bfa      	ldrb	r2, [r7, #15]
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	4613      	mov	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	440b      	add	r3, r1
 80025ea:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80025ee:	2200      	movs	r2, #0
 80025f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025f2:	7bfa      	ldrb	r2, [r7, #15]
 80025f4:	6879      	ldr	r1, [r7, #4]
 80025f6:	4613      	mov	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4413      	add	r3, r2
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	440b      	add	r3, r1
 8002600:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002608:	7bfa      	ldrb	r2, [r7, #15]
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	4613      	mov	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	440b      	add	r3, r1
 8002616:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800261e:	7bfa      	ldrb	r2, [r7, #15]
 8002620:	6879      	ldr	r1, [r7, #4]
 8002622:	4613      	mov	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4413      	add	r3, r2
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	440b      	add	r3, r1
 800262c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002634:	7bfb      	ldrb	r3, [r7, #15]
 8002636:	3301      	adds	r3, #1
 8002638:	73fb      	strb	r3, [r7, #15]
 800263a:	7bfa      	ldrb	r2, [r7, #15]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	429a      	cmp	r2, r3
 8002642:	d3b5      	bcc.n	80025b0 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	603b      	str	r3, [r7, #0]
 800264a:	687e      	ldr	r6, [r7, #4]
 800264c:	466d      	mov	r5, sp
 800264e:	f106 0410 	add.w	r4, r6, #16
 8002652:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002654:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002656:	6823      	ldr	r3, [r4, #0]
 8002658:	602b      	str	r3, [r5, #0]
 800265a:	1d33      	adds	r3, r6, #4
 800265c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800265e:	6838      	ldr	r0, [r7, #0]
 8002660:	f002 fc50 	bl	8004f04 <USB_DevInit>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d005      	beq.n	8002676 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2202      	movs	r2, #2
 800266e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e00d      	b.n	8002692 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f005 f902 	bl	8007894 <USB_DevDisconnect>

  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3714      	adds	r7, #20
 8002696:	46bd      	mov	sp, r7
 8002698:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800269a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b082      	sub	sp, #8
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d101      	bne.n	80026b0 <HAL_PCD_Start+0x16>
 80026ac:	2302      	movs	r3, #2
 80026ae:	e016      	b.n	80026de <HAL_PCD_Start+0x44>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f002 fbe5 	bl	8004e8c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80026c2:	2101      	movs	r1, #1
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f007 f9c2 	bl	8009a4e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f005 f8d6 	bl	8007880 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b088      	sub	sp, #32
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f005 f8d8 	bl	80078a8 <USB_ReadInterrupts>
 80026f8:	4603      	mov	r3, r0
 80026fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002702:	d102      	bne.n	800270a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 fb5f 	bl	8002dc8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f005 f8ca 	bl	80078a8 <USB_ReadInterrupts>
 8002714:	4603      	mov	r3, r0
 8002716:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800271a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800271e:	d112      	bne.n	8002746 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002728:	b29a      	uxth	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002732:	b292      	uxth	r2, r2
 8002734:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f006 ff90 	bl	800965e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800273e:	2100      	movs	r1, #0
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 f923 	bl	800298c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f005 f8ac 	bl	80078a8 <USB_ReadInterrupts>
 8002750:	4603      	mov	r3, r0
 8002752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002756:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800275a:	d10b      	bne.n	8002774 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002764:	b29a      	uxth	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800276e:	b292      	uxth	r2, r2
 8002770:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4618      	mov	r0, r3
 800277a:	f005 f895 	bl	80078a8 <USB_ReadInterrupts>
 800277e:	4603      	mov	r3, r0
 8002780:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002784:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002788:	d10b      	bne.n	80027a2 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002792:	b29a      	uxth	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800279c:	b292      	uxth	r2, r2
 800279e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f005 f87e 	bl	80078a8 <USB_ReadInterrupts>
 80027ac:	4603      	mov	r3, r0
 80027ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027b6:	d126      	bne.n	8002806 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 0204 	bic.w	r2, r2, #4
 80027ca:	b292      	uxth	r2, r2
 80027cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80027d8:	b29a      	uxth	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f022 0208 	bic.w	r2, r2, #8
 80027e2:	b292      	uxth	r2, r2
 80027e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f006 ff71 	bl	80096d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002800:	b292      	uxth	r2, r2
 8002802:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f005 f84c 	bl	80078a8 <USB_ReadInterrupts>
 8002810:	4603      	mov	r3, r0
 8002812:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002816:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800281a:	f040 8082 	bne.w	8002922 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800281e:	2300      	movs	r3, #0
 8002820:	77fb      	strb	r3, [r7, #31]
 8002822:	e010      	b.n	8002846 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	461a      	mov	r2, r3
 800282a:	7ffb      	ldrb	r3, [r7, #31]
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	441a      	add	r2, r3
 8002830:	7ffb      	ldrb	r3, [r7, #31]
 8002832:	8812      	ldrh	r2, [r2, #0]
 8002834:	b292      	uxth	r2, r2
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	3320      	adds	r3, #32
 800283a:	443b      	add	r3, r7
 800283c:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002840:	7ffb      	ldrb	r3, [r7, #31]
 8002842:	3301      	adds	r3, #1
 8002844:	77fb      	strb	r3, [r7, #31]
 8002846:	7ffb      	ldrb	r3, [r7, #31]
 8002848:	2b07      	cmp	r3, #7
 800284a:	d9eb      	bls.n	8002824 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002854:	b29a      	uxth	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f042 0201 	orr.w	r2, r2, #1
 800285e:	b292      	uxth	r2, r2
 8002860:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800286c:	b29a      	uxth	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 0201 	bic.w	r2, r2, #1
 8002876:	b292      	uxth	r2, r2
 8002878:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800287c:	bf00      	nop
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002886:	b29b      	uxth	r3, r3
 8002888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800288c:	2b00      	cmp	r3, #0
 800288e:	d0f6      	beq.n	800287e <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002898:	b29a      	uxth	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028a2:	b292      	uxth	r2, r2
 80028a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80028a8:	2300      	movs	r3, #0
 80028aa:	77fb      	strb	r3, [r7, #31]
 80028ac:	e00f      	b.n	80028ce <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80028ae:	7ffb      	ldrb	r3, [r7, #31]
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6812      	ldr	r2, [r2, #0]
 80028b4:	4611      	mov	r1, r2
 80028b6:	7ffa      	ldrb	r2, [r7, #31]
 80028b8:	0092      	lsls	r2, r2, #2
 80028ba:	440a      	add	r2, r1
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	3320      	adds	r3, #32
 80028c0:	443b      	add	r3, r7
 80028c2:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80028c6:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80028c8:	7ffb      	ldrb	r3, [r7, #31]
 80028ca:	3301      	adds	r3, #1
 80028cc:	77fb      	strb	r3, [r7, #31]
 80028ce:	7ffb      	ldrb	r3, [r7, #31]
 80028d0:	2b07      	cmp	r3, #7
 80028d2:	d9ec      	bls.n	80028ae <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80028dc:	b29a      	uxth	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f042 0208 	orr.w	r2, r2, #8
 80028e6:	b292      	uxth	r2, r2
 80028e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028fe:	b292      	uxth	r2, r2
 8002900:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800290c:	b29a      	uxth	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f042 0204 	orr.w	r2, r2, #4
 8002916:	b292      	uxth	r2, r2
 8002918:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f006 febd 	bl	800969c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f004 ffbe 	bl	80078a8 <USB_ReadInterrupts>
 800292c:	4603      	mov	r3, r0
 800292e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002932:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002936:	d10e      	bne.n	8002956 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002940:	b29a      	uxth	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800294a:	b292      	uxth	r2, r2
 800294c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f006 fe76 	bl	8009642 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f004 ffa4 	bl	80078a8 <USB_ReadInterrupts>
 8002960:	4603      	mov	r3, r0
 8002962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800296a:	d10b      	bne.n	8002984 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002974:	b29a      	uxth	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800297e:	b292      	uxth	r2, r2
 8002980:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002984:	bf00      	nop
 8002986:	3720      	adds	r7, #32
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	460b      	mov	r3, r1
 8002996:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d101      	bne.n	80029a6 <HAL_PCD_SetAddress+0x1a>
 80029a2:	2302      	movs	r3, #2
 80029a4:	e013      	b.n	80029ce <HAL_PCD_SetAddress+0x42>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	78fa      	ldrb	r2, [r7, #3]
 80029b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	78fa      	ldrb	r2, [r7, #3]
 80029bc:	4611      	mov	r1, r2
 80029be:	4618      	mov	r0, r3
 80029c0:	f004 ff4b 	bl	800785a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b084      	sub	sp, #16
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
 80029de:	4608      	mov	r0, r1
 80029e0:	4611      	mov	r1, r2
 80029e2:	461a      	mov	r2, r3
 80029e4:	4603      	mov	r3, r0
 80029e6:	70fb      	strb	r3, [r7, #3]
 80029e8:	460b      	mov	r3, r1
 80029ea:	803b      	strh	r3, [r7, #0]
 80029ec:	4613      	mov	r3, r2
 80029ee:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80029f0:	2300      	movs	r3, #0
 80029f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	da0e      	bge.n	8002a1a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029fc:	78fb      	ldrb	r3, [r7, #3]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	1c5a      	adds	r2, r3, #1
 8002a04:	4613      	mov	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	4413      	add	r3, r2
 8002a10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2201      	movs	r2, #1
 8002a16:	705a      	strb	r2, [r3, #1]
 8002a18:	e00e      	b.n	8002a38 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a1a:	78fb      	ldrb	r3, [r7, #3]
 8002a1c:	f003 0207 	and.w	r2, r3, #7
 8002a20:	4613      	mov	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	4413      	add	r3, r2
 8002a30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002a38:	78fb      	ldrb	r3, [r7, #3]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	b2da      	uxtb	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002a44:	883a      	ldrh	r2, [r7, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	78ba      	ldrb	r2, [r7, #2]
 8002a4e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	785b      	ldrb	r3, [r3, #1]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d004      	beq.n	8002a62 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002a62:	78bb      	ldrb	r3, [r7, #2]
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d102      	bne.n	8002a6e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d101      	bne.n	8002a7c <HAL_PCD_EP_Open+0xa6>
 8002a78:	2302      	movs	r3, #2
 8002a7a:	e00e      	b.n	8002a9a <HAL_PCD_EP_Open+0xc4>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68f9      	ldr	r1, [r7, #12]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f002 fa5a 	bl	8004f44 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002a98:	7afb      	ldrb	r3, [r7, #11]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b084      	sub	sp, #16
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
 8002aaa:	460b      	mov	r3, r1
 8002aac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002aae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	da0e      	bge.n	8002ad4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ab6:	78fb      	ldrb	r3, [r7, #3]
 8002ab8:	f003 0307 	and.w	r3, r3, #7
 8002abc:	1c5a      	adds	r2, r3, #1
 8002abe:	4613      	mov	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	4413      	add	r3, r2
 8002aca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	705a      	strb	r2, [r3, #1]
 8002ad2:	e00e      	b.n	8002af2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ad4:	78fb      	ldrb	r3, [r7, #3]
 8002ad6:	f003 0207 	and.w	r2, r3, #7
 8002ada:	4613      	mov	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	4413      	add	r3, r2
 8002aea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002af2:	78fb      	ldrb	r3, [r7, #3]
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d101      	bne.n	8002b0c <HAL_PCD_EP_Close+0x6a>
 8002b08:	2302      	movs	r3, #2
 8002b0a:	e00e      	b.n	8002b2a <HAL_PCD_EP_Close+0x88>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68f9      	ldr	r1, [r7, #12]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f002 fd7c 	bl	8005618 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b086      	sub	sp, #24
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	60f8      	str	r0, [r7, #12]
 8002b3a:	607a      	str	r2, [r7, #4]
 8002b3c:	603b      	str	r3, [r7, #0]
 8002b3e:	460b      	mov	r3, r1
 8002b40:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b42:	7afb      	ldrb	r3, [r7, #11]
 8002b44:	f003 0207 	and.w	r2, r3, #7
 8002b48:	4613      	mov	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	4413      	add	r3, r2
 8002b58:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b72:	7afb      	ldrb	r3, [r7, #11]
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b7e:	7afb      	ldrb	r3, [r7, #11]
 8002b80:	f003 0307 	and.w	r3, r3, #7
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d106      	bne.n	8002b96 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6979      	ldr	r1, [r7, #20]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f002 ff2e 	bl	80059f0 <USB_EPStartXfer>
 8002b94:	e005      	b.n	8002ba2 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6979      	ldr	r1, [r7, #20]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f002 ff27 	bl	80059f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3718      	adds	r7, #24
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002bb8:	78fb      	ldrb	r3, [r7, #3]
 8002bba:	f003 0207 	and.w	r2, r3, #7
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4413      	add	r3, r2
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	440b      	add	r3, r1
 8002bca:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002bce:	681b      	ldr	r3, [r3, #0]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bc80      	pop	{r7}
 8002bd8:	4770      	bx	lr

08002bda <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b086      	sub	sp, #24
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	60f8      	str	r0, [r7, #12]
 8002be2:	607a      	str	r2, [r7, #4]
 8002be4:	603b      	str	r3, [r7, #0]
 8002be6:	460b      	mov	r3, r1
 8002be8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bea:	7afb      	ldrb	r3, [r7, #11]
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	1c5a      	adds	r2, r3, #1
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	2201      	movs	r2, #1
 8002c24:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c26:	7afb      	ldrb	r3, [r7, #11]
 8002c28:	f003 0307 	and.w	r3, r3, #7
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c32:	7afb      	ldrb	r3, [r7, #11]
 8002c34:	f003 0307 	and.w	r3, r3, #7
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d106      	bne.n	8002c4a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6979      	ldr	r1, [r7, #20]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f002 fed4 	bl	80059f0 <USB_EPStartXfer>
 8002c48:	e005      	b.n	8002c56 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6979      	ldr	r1, [r7, #20]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f002 fecd 	bl	80059f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3718      	adds	r7, #24
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	460b      	mov	r3, r1
 8002c6a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002c6c:	78fb      	ldrb	r3, [r7, #3]
 8002c6e:	f003 0207 	and.w	r2, r3, #7
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d901      	bls.n	8002c7e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e04c      	b.n	8002d18 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	da0e      	bge.n	8002ca4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c86:	78fb      	ldrb	r3, [r7, #3]
 8002c88:	f003 0307 	and.w	r3, r3, #7
 8002c8c:	1c5a      	adds	r2, r3, #1
 8002c8e:	4613      	mov	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4413      	add	r3, r2
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	4413      	add	r3, r2
 8002c9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	705a      	strb	r2, [r3, #1]
 8002ca2:	e00c      	b.n	8002cbe <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ca4:	78fa      	ldrb	r2, [r7, #3]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4413      	add	r3, r2
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cc4:	78fb      	ldrb	r3, [r7, #3]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	b2da      	uxtb	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d101      	bne.n	8002cde <HAL_PCD_EP_SetStall+0x7e>
 8002cda:	2302      	movs	r3, #2
 8002cdc:	e01c      	b.n	8002d18 <HAL_PCD_EP_SetStall+0xb8>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68f9      	ldr	r1, [r7, #12]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f004 fcb7 	bl	8007660 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cf2:	78fb      	ldrb	r3, [r7, #3]
 8002cf4:	f003 0307 	and.w	r3, r3, #7
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d108      	bne.n	8002d0e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002d06:	4619      	mov	r1, r3
 8002d08:	4610      	mov	r0, r2
 8002d0a:	f004 fddc 	bl	80078c6 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	460b      	mov	r3, r1
 8002d2a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002d2c:	78fb      	ldrb	r3, [r7, #3]
 8002d2e:	f003 020f 	and.w	r2, r3, #15
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d901      	bls.n	8002d3e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e040      	b.n	8002dc0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	da0e      	bge.n	8002d64 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d46:	78fb      	ldrb	r3, [r7, #3]
 8002d48:	f003 0307 	and.w	r3, r3, #7
 8002d4c:	1c5a      	adds	r2, r3, #1
 8002d4e:	4613      	mov	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4413      	add	r3, r2
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	4413      	add	r3, r2
 8002d5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	705a      	strb	r2, [r3, #1]
 8002d62:	e00e      	b.n	8002d82 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d64:	78fb      	ldrb	r3, [r7, #3]
 8002d66:	f003 0207 	and.w	r2, r3, #7
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4413      	add	r3, r2
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	4413      	add	r3, r2
 8002d7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d88:	78fb      	ldrb	r3, [r7, #3]
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	b2da      	uxtb	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d101      	bne.n	8002da2 <HAL_PCD_EP_ClrStall+0x82>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	e00e      	b.n	8002dc0 <HAL_PCD_EP_ClrStall+0xa0>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68f9      	ldr	r1, [r7, #12]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f004 fca5 	bl	8007700 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b08e      	sub	sp, #56	; 0x38
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002dd0:	e2ec      	b.n	80033ac <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002dda:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002ddc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	f003 030f 	and.w	r3, r3, #15
 8002de4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002de8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f040 8161 	bne.w	80030b4 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002df2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002df4:	f003 0310 	and.w	r3, r3, #16
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d152      	bne.n	8002ea2 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	881b      	ldrh	r3, [r3, #0]
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002e08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e0c:	81fb      	strh	r3, [r7, #14]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	89fb      	ldrh	r3, [r7, #14]
 8002e14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	3328      	adds	r3, #40	; 0x28
 8002e24:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	461a      	mov	r2, r3
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	4413      	add	r3, r2
 8002e3a:	3302      	adds	r3, #2
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6812      	ldr	r2, [r2, #0]
 8002e42:	4413      	add	r3, r2
 8002e44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e48:	881b      	ldrh	r3, [r3, #0]
 8002e4a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e50:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	695a      	ldr	r2, [r3, #20]
 8002e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	441a      	add	r2, r3
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002e60:	2100      	movs	r1, #0
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f006 fbd3 	bl	800960e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f000 829b 	beq.w	80033ac <PCD_EP_ISR_Handler+0x5e4>
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f040 8296 	bne.w	80033ac <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	b292      	uxth	r2, r2
 8002e94:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002ea0:	e284      	b.n	80033ac <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ea8:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	881b      	ldrh	r3, [r3, #0]
 8002eb0:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002eb2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002eb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d034      	beq.n	8002f26 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	4413      	add	r3, r2
 8002ed0:	3306      	adds	r3, #6
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	6812      	ldr	r2, [r2, #0]
 8002ed8:	4413      	add	r3, r2
 8002eda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ede:	881b      	ldrh	r3, [r3, #0]
 8002ee0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6818      	ldr	r0, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	f004 fd33 	bl	8007966 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	823b      	strh	r3, [r7, #16]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	8a3a      	ldrh	r2, [r7, #16]
 8002f16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f1a:	b292      	uxth	r2, r2
 8002f1c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f006 fb48 	bl	80095b4 <HAL_PCD_SetupStageCallback>
 8002f24:	e242      	b.n	80033ac <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002f26:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f280 823e 	bge.w	80033ac <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	881b      	ldrh	r3, [r3, #0]
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	83bb      	strh	r3, [r7, #28]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	8bba      	ldrh	r2, [r7, #28]
 8002f46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f4a:	b292      	uxth	r2, r2
 8002f4c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	461a      	mov	r2, r3
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	4413      	add	r3, r2
 8002f62:	3306      	adds	r3, #6
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	6812      	ldr	r2, [r2, #0]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f70:	881b      	ldrh	r3, [r3, #0]
 8002f72:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d019      	beq.n	8002fb6 <PCD_EP_ISR_Handler+0x1ee>
 8002f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d015      	beq.n	8002fb6 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6818      	ldr	r0, [r3, #0]
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	6959      	ldr	r1, [r3, #20]
 8002f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f94:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f98:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	f004 fce3 	bl	8007966 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa2:	695a      	ldr	r2, [r3, #20]
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa6:	69db      	ldr	r3, [r3, #28]
 8002fa8:	441a      	add	r2, r3
 8002faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fac:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002fae:	2100      	movs	r1, #0
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f006 fb11 	bl	80095d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	881b      	ldrh	r3, [r3, #0]
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f040 81f2 	bne.w	80033ac <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	61bb      	str	r3, [r7, #24]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	461a      	mov	r2, r3
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	4413      	add	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002fe6:	617b      	str	r3, [r7, #20]
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d112      	bne.n	8003016 <PCD_EP_ISR_Handler+0x24e>
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	801a      	strh	r2, [r3, #0]
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	881b      	ldrh	r3, [r3, #0]
 8003004:	b29b      	uxth	r3, r3
 8003006:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800300a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800300e:	b29a      	uxth	r2, r3
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	801a      	strh	r2, [r3, #0]
 8003014:	e02f      	b.n	8003076 <PCD_EP_ISR_Handler+0x2ae>
 8003016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	2b3e      	cmp	r3, #62	; 0x3e
 800301c:	d813      	bhi.n	8003046 <PCD_EP_ISR_Handler+0x27e>
 800301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	085b      	lsrs	r3, r3, #1
 8003024:	633b      	str	r3, [r7, #48]	; 0x30
 8003026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b00      	cmp	r3, #0
 8003030:	d002      	beq.n	8003038 <PCD_EP_ISR_Handler+0x270>
 8003032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003034:	3301      	adds	r3, #1
 8003036:	633b      	str	r3, [r7, #48]	; 0x30
 8003038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303a:	b29b      	uxth	r3, r3
 800303c:	029b      	lsls	r3, r3, #10
 800303e:	b29a      	uxth	r2, r3
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	801a      	strh	r2, [r3, #0]
 8003044:	e017      	b.n	8003076 <PCD_EP_ISR_Handler+0x2ae>
 8003046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	095b      	lsrs	r3, r3, #5
 800304c:	633b      	str	r3, [r7, #48]	; 0x30
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	f003 031f 	and.w	r3, r3, #31
 8003056:	2b00      	cmp	r3, #0
 8003058:	d102      	bne.n	8003060 <PCD_EP_ISR_Handler+0x298>
 800305a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305c:	3b01      	subs	r3, #1
 800305e:	633b      	str	r3, [r7, #48]	; 0x30
 8003060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003062:	b29b      	uxth	r3, r3
 8003064:	029b      	lsls	r3, r3, #10
 8003066:	b29b      	uxth	r3, r3
 8003068:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800306c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003070:	b29a      	uxth	r2, r3
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	b29b      	uxth	r3, r3
 800307e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003086:	827b      	strh	r3, [r7, #18]
 8003088:	8a7b      	ldrh	r3, [r7, #18]
 800308a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800308e:	827b      	strh	r3, [r7, #18]
 8003090:	8a7b      	ldrh	r3, [r7, #18]
 8003092:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003096:	827b      	strh	r3, [r7, #18]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	8a7b      	ldrh	r3, [r7, #18]
 800309e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	8013      	strh	r3, [r2, #0]
 80030b2:	e17b      	b.n	80033ac <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	461a      	mov	r2, r3
 80030ba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4413      	add	r3, r2
 80030c2:	881b      	ldrh	r3, [r3, #0]
 80030c4:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80030c6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f280 80ea 	bge.w	80032a4 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	461a      	mov	r2, r3
 80030d6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	881b      	ldrh	r3, [r3, #0]
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80030e6:	4013      	ands	r3, r2
 80030e8:	853b      	strh	r3, [r7, #40]	; 0x28
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	461a      	mov	r2, r3
 80030f0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4413      	add	r3, r2
 80030f8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80030fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030fe:	b292      	uxth	r2, r2
 8003100:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003102:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003106:	4613      	mov	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4413      	add	r3, r2
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	4413      	add	r3, r2
 8003116:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311a:	7b1b      	ldrb	r3, [r3, #12]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d122      	bne.n	8003166 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003128:	b29b      	uxth	r3, r3
 800312a:	461a      	mov	r2, r3
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	4413      	add	r3, r2
 8003134:	3306      	adds	r3, #6
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	6812      	ldr	r2, [r2, #0]
 800313c:	4413      	add	r3, r2
 800313e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003142:	881b      	ldrh	r3, [r3, #0]
 8003144:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003148:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800314a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800314c:	2b00      	cmp	r3, #0
 800314e:	f000 8087 	beq.w	8003260 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6818      	ldr	r0, [r3, #0]
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	6959      	ldr	r1, [r3, #20]
 800315a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315c:	88da      	ldrh	r2, [r3, #6]
 800315e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003160:	f004 fc01 	bl	8007966 <USB_ReadPMA>
 8003164:	e07c      	b.n	8003260 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	78db      	ldrb	r3, [r3, #3]
 800316a:	2b02      	cmp	r3, #2
 800316c:	d108      	bne.n	8003180 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800316e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003170:	461a      	mov	r2, r3
 8003172:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 f927 	bl	80033c8 <HAL_PCD_EP_DB_Receive>
 800317a:	4603      	mov	r3, r0
 800317c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800317e:	e06f      	b.n	8003260 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	461a      	mov	r2, r3
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	881b      	ldrh	r3, [r3, #0]
 8003190:	b29b      	uxth	r3, r3
 8003192:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800319a:	847b      	strh	r3, [r7, #34]	; 0x22
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	461a      	mov	r2, r3
 80031a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	441a      	add	r2, r3
 80031aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80031ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80031bc:	b29b      	uxth	r3, r3
 80031be:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	461a      	mov	r2, r3
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	881b      	ldrh	r3, [r3, #0]
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d021      	beq.n	800321e <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	461a      	mov	r2, r3
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	4413      	add	r3, r2
 80031ee:	3302      	adds	r3, #2
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	6812      	ldr	r2, [r2, #0]
 80031f6:	4413      	add	r3, r2
 80031f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031fc:	881b      	ldrh	r3, [r3, #0]
 80031fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003202:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003204:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003206:	2b00      	cmp	r3, #0
 8003208:	d02a      	beq.n	8003260 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6818      	ldr	r0, [r3, #0]
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	6959      	ldr	r1, [r3, #20]
 8003212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003214:	891a      	ldrh	r2, [r3, #8]
 8003216:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003218:	f004 fba5 	bl	8007966 <USB_ReadPMA>
 800321c:	e020      	b.n	8003260 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003226:	b29b      	uxth	r3, r3
 8003228:	461a      	mov	r2, r3
 800322a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	4413      	add	r3, r2
 8003232:	3306      	adds	r3, #6
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	6812      	ldr	r2, [r2, #0]
 800323a:	4413      	add	r3, r2
 800323c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003240:	881b      	ldrh	r3, [r3, #0]
 8003242:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003246:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003248:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800324a:	2b00      	cmp	r3, #0
 800324c:	d008      	beq.n	8003260 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6818      	ldr	r0, [r3, #0]
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	6959      	ldr	r1, [r3, #20]
 8003256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003258:	895a      	ldrh	r2, [r3, #10]
 800325a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800325c:	f004 fb83 	bl	8007966 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	69da      	ldr	r2, [r3, #28]
 8003264:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003266:	441a      	add	r2, r3
 8003268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800326c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326e:	695a      	ldr	r2, [r3, #20]
 8003270:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003272:	441a      	add	r2, r3
 8003274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003276:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d004      	beq.n	800328a <PCD_EP_ISR_Handler+0x4c2>
 8003280:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	429a      	cmp	r2, r3
 8003288:	d206      	bcs.n	8003298 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800328a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	4619      	mov	r1, r3
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f006 f9a1 	bl	80095d8 <HAL_PCD_DataOutStageCallback>
 8003296:	e005      	b.n	80032a4 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800329e:	4618      	mov	r0, r3
 80032a0:	f002 fba6 	bl	80059f0 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80032a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80032a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d07e      	beq.n	80033ac <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80032ae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80032b2:	1c5a      	adds	r2, r3, #1
 80032b4:	4613      	mov	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4413      	add	r3, r2
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	4413      	add	r3, r2
 80032c0:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	461a      	mov	r2, r3
 80032c8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	4413      	add	r3, r2
 80032d0:	881b      	ldrh	r3, [r3, #0]
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80032d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032dc:	843b      	strh	r3, [r7, #32]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	461a      	mov	r2, r3
 80032e4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	441a      	add	r2, r3
 80032ec:	8c3b      	ldrh	r3, [r7, #32]
 80032ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80032fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fc:	78db      	ldrb	r3, [r3, #3]
 80032fe:	2b03      	cmp	r3, #3
 8003300:	d00c      	beq.n	800331c <PCD_EP_ISR_Handler+0x554>
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	78db      	ldrb	r3, [r3, #3]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d008      	beq.n	800331c <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800330a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800330e:	2b02      	cmp	r3, #2
 8003310:	d146      	bne.n	80033a0 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003312:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003318:	2b00      	cmp	r3, #0
 800331a:	d141      	bne.n	80033a0 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003324:	b29b      	uxth	r3, r3
 8003326:	461a      	mov	r2, r3
 8003328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	4413      	add	r3, r2
 8003330:	3302      	adds	r3, #2
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	6812      	ldr	r2, [r2, #0]
 8003338:	4413      	add	r3, r2
 800333a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800333e:	881b      	ldrh	r3, [r3, #0]
 8003340:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003344:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003348:	699a      	ldr	r2, [r3, #24]
 800334a:	8bfb      	ldrh	r3, [r7, #30]
 800334c:	429a      	cmp	r2, r3
 800334e:	d906      	bls.n	800335e <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	699a      	ldr	r2, [r3, #24]
 8003354:	8bfb      	ldrh	r3, [r7, #30]
 8003356:	1ad2      	subs	r2, r2, r3
 8003358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335a:	619a      	str	r2, [r3, #24]
 800335c:	e002      	b.n	8003364 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 800335e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003360:	2200      	movs	r2, #0
 8003362:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d106      	bne.n	800337a <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	4619      	mov	r1, r3
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f006 f94b 	bl	800960e <HAL_PCD_DataInStageCallback>
 8003378:	e018      	b.n	80033ac <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	695a      	ldr	r2, [r3, #20]
 800337e:	8bfb      	ldrh	r3, [r7, #30]
 8003380:	441a      	add	r2, r3
 8003382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003384:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	69da      	ldr	r2, [r3, #28]
 800338a:	8bfb      	ldrh	r3, [r7, #30]
 800338c:	441a      	add	r2, r3
 800338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003390:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003398:	4618      	mov	r0, r3
 800339a:	f002 fb29 	bl	80059f0 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800339e:	e005      	b.n	80033ac <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80033a0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80033a2:	461a      	mov	r2, r3
 80033a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f91b 	bl	80035e2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	b21b      	sxth	r3, r3
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f6ff ad0a 	blt.w	8002dd2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3738      	adds	r7, #56	; 0x38
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b088      	sub	sp, #32
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	4613      	mov	r3, r2
 80033d4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80033d6:	88fb      	ldrh	r3, [r7, #6]
 80033d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d07e      	beq.n	80034de <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	461a      	mov	r2, r3
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	4413      	add	r3, r2
 80033f4:	3302      	adds	r3, #2
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	6812      	ldr	r2, [r2, #0]
 80033fc:	4413      	add	r3, r2
 80033fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003402:	881b      	ldrh	r3, [r3, #0]
 8003404:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003408:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	699a      	ldr	r2, [r3, #24]
 800340e:	8b7b      	ldrh	r3, [r7, #26]
 8003410:	429a      	cmp	r2, r3
 8003412:	d306      	bcc.n	8003422 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	699a      	ldr	r2, [r3, #24]
 8003418:	8b7b      	ldrh	r3, [r7, #26]
 800341a:	1ad2      	subs	r2, r2, r3
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	619a      	str	r2, [r3, #24]
 8003420:	e002      	b.n	8003428 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	2200      	movs	r2, #0
 8003426:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d123      	bne.n	8003478 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	461a      	mov	r2, r3
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4413      	add	r3, r2
 800343e:	881b      	ldrh	r3, [r3, #0]
 8003440:	b29b      	uxth	r3, r3
 8003442:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800344a:	833b      	strh	r3, [r7, #24]
 800344c:	8b3b      	ldrh	r3, [r7, #24]
 800344e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003452:	833b      	strh	r3, [r7, #24]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	461a      	mov	r2, r3
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	441a      	add	r2, r3
 8003462:	8b3b      	ldrh	r3, [r7, #24]
 8003464:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003468:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800346c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003474:	b29b      	uxth	r3, r3
 8003476:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003478:	88fb      	ldrh	r3, [r7, #6]
 800347a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800347e:	2b00      	cmp	r3, #0
 8003480:	d01f      	beq.n	80034c2 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	461a      	mov	r2, r3
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4413      	add	r3, r2
 8003490:	881b      	ldrh	r3, [r3, #0]
 8003492:	b29b      	uxth	r3, r3
 8003494:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800349c:	82fb      	strh	r3, [r7, #22]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	461a      	mov	r2, r3
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	441a      	add	r2, r3
 80034ac:	8afb      	ldrh	r3, [r7, #22]
 80034ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80034be:	b29b      	uxth	r3, r3
 80034c0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80034c2:	8b7b      	ldrh	r3, [r7, #26]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f000 8087 	beq.w	80035d8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6818      	ldr	r0, [r3, #0]
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	6959      	ldr	r1, [r3, #20]
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	891a      	ldrh	r2, [r3, #8]
 80034d6:	8b7b      	ldrh	r3, [r7, #26]
 80034d8:	f004 fa45 	bl	8007966 <USB_ReadPMA>
 80034dc:	e07c      	b.n	80035d8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	461a      	mov	r2, r3
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	4413      	add	r3, r2
 80034f2:	3306      	adds	r3, #6
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	6812      	ldr	r2, [r2, #0]
 80034fa:	4413      	add	r3, r2
 80034fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003506:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	699a      	ldr	r2, [r3, #24]
 800350c:	8b7b      	ldrh	r3, [r7, #26]
 800350e:	429a      	cmp	r2, r3
 8003510:	d306      	bcc.n	8003520 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	699a      	ldr	r2, [r3, #24]
 8003516:	8b7b      	ldrh	r3, [r7, #26]
 8003518:	1ad2      	subs	r2, r2, r3
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	619a      	str	r2, [r3, #24]
 800351e:	e002      	b.n	8003526 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	2200      	movs	r2, #0
 8003524:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d123      	bne.n	8003576 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	461a      	mov	r2, r3
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4413      	add	r3, r2
 800353c:	881b      	ldrh	r3, [r3, #0]
 800353e:	b29b      	uxth	r3, r3
 8003540:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003544:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003548:	83fb      	strh	r3, [r7, #30]
 800354a:	8bfb      	ldrh	r3, [r7, #30]
 800354c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003550:	83fb      	strh	r3, [r7, #30]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	461a      	mov	r2, r3
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	441a      	add	r2, r3
 8003560:	8bfb      	ldrh	r3, [r7, #30]
 8003562:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003566:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800356a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800356e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003572:	b29b      	uxth	r3, r3
 8003574:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003576:	88fb      	ldrh	r3, [r7, #6]
 8003578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800357c:	2b00      	cmp	r3, #0
 800357e:	d11f      	bne.n	80035c0 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	461a      	mov	r2, r3
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4413      	add	r3, r2
 800358e:	881b      	ldrh	r3, [r3, #0]
 8003590:	b29b      	uxth	r3, r3
 8003592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800359a:	83bb      	strh	r3, [r7, #28]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	461a      	mov	r2, r3
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	441a      	add	r2, r3
 80035aa:	8bbb      	ldrh	r3, [r7, #28]
 80035ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80035bc:	b29b      	uxth	r3, r3
 80035be:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80035c0:	8b7b      	ldrh	r3, [r7, #26]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d008      	beq.n	80035d8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6818      	ldr	r0, [r3, #0]
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	6959      	ldr	r1, [r3, #20]
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	895a      	ldrh	r2, [r3, #10]
 80035d2:	8b7b      	ldrh	r3, [r7, #26]
 80035d4:	f004 f9c7 	bl	8007966 <USB_ReadPMA>
    }
  }

  return count;
 80035d8:	8b7b      	ldrh	r3, [r7, #26]
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3720      	adds	r7, #32
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b0a2      	sub	sp, #136	; 0x88
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	60f8      	str	r0, [r7, #12]
 80035ea:	60b9      	str	r1, [r7, #8]
 80035ec:	4613      	mov	r3, r2
 80035ee:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80035f0:	88fb      	ldrh	r3, [r7, #6]
 80035f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f000 81c7 	beq.w	800398a <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003604:	b29b      	uxth	r3, r3
 8003606:	461a      	mov	r2, r3
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	4413      	add	r3, r2
 8003610:	3302      	adds	r3, #2
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	6812      	ldr	r2, [r2, #0]
 8003618:	4413      	add	r3, r2
 800361a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800361e:	881b      	ldrh	r3, [r3, #0]
 8003620:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003624:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	699a      	ldr	r2, [r3, #24]
 800362c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003630:	429a      	cmp	r2, r3
 8003632:	d907      	bls.n	8003644 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	699a      	ldr	r2, [r3, #24]
 8003638:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800363c:	1ad2      	subs	r2, r2, r3
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	619a      	str	r2, [r3, #24]
 8003642:	e002      	b.n	800364a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	2200      	movs	r2, #0
 8003648:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	2b00      	cmp	r3, #0
 8003650:	f040 80b9 	bne.w	80037c6 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	785b      	ldrb	r3, [r3, #1]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d126      	bne.n	80036aa <HAL_PCD_EP_DB_Transmit+0xc8>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	62bb      	str	r3, [r7, #40]	; 0x28
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800366a:	b29b      	uxth	r3, r3
 800366c:	461a      	mov	r2, r3
 800366e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003670:	4413      	add	r3, r2
 8003672:	62bb      	str	r3, [r7, #40]	; 0x28
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	011a      	lsls	r2, r3, #4
 800367a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367c:	4413      	add	r3, r2
 800367e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003682:	627b      	str	r3, [r7, #36]	; 0x24
 8003684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003686:	881b      	ldrh	r3, [r3, #0]
 8003688:	b29b      	uxth	r3, r3
 800368a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800368e:	b29a      	uxth	r2, r3
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	801a      	strh	r2, [r3, #0]
 8003694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003696:	881b      	ldrh	r3, [r3, #0]
 8003698:	b29b      	uxth	r3, r3
 800369a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800369e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a6:	801a      	strh	r2, [r3, #0]
 80036a8:	e01a      	b.n	80036e0 <HAL_PCD_EP_DB_Transmit+0xfe>
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	785b      	ldrb	r3, [r3, #1]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d116      	bne.n	80036e0 <HAL_PCD_EP_DB_Transmit+0xfe>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	633b      	str	r3, [r7, #48]	; 0x30
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	461a      	mov	r2, r3
 80036c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c6:	4413      	add	r3, r2
 80036c8:	633b      	str	r3, [r7, #48]	; 0x30
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	011a      	lsls	r2, r3, #4
 80036d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d2:	4413      	add	r3, r2
 80036d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80036d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036dc:	2200      	movs	r2, #0
 80036de:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	623b      	str	r3, [r7, #32]
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	785b      	ldrb	r3, [r3, #1]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d126      	bne.n	800373c <HAL_PCD_EP_DB_Transmit+0x15a>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	61bb      	str	r3, [r7, #24]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	461a      	mov	r2, r3
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	4413      	add	r3, r2
 8003704:	61bb      	str	r3, [r7, #24]
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	011a      	lsls	r2, r3, #4
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	4413      	add	r3, r2
 8003710:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003714:	617b      	str	r3, [r7, #20]
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	881b      	ldrh	r3, [r3, #0]
 800371a:	b29b      	uxth	r3, r3
 800371c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003720:	b29a      	uxth	r2, r3
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	801a      	strh	r2, [r3, #0]
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	881b      	ldrh	r3, [r3, #0]
 800372a:	b29b      	uxth	r3, r3
 800372c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003730:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003734:	b29a      	uxth	r2, r3
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	801a      	strh	r2, [r3, #0]
 800373a:	e017      	b.n	800376c <HAL_PCD_EP_DB_Transmit+0x18a>
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	785b      	ldrb	r3, [r3, #1]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d113      	bne.n	800376c <HAL_PCD_EP_DB_Transmit+0x18a>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800374c:	b29b      	uxth	r3, r3
 800374e:	461a      	mov	r2, r3
 8003750:	6a3b      	ldr	r3, [r7, #32]
 8003752:	4413      	add	r3, r2
 8003754:	623b      	str	r3, [r7, #32]
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	011a      	lsls	r2, r3, #4
 800375c:	6a3b      	ldr	r3, [r7, #32]
 800375e:	4413      	add	r3, r2
 8003760:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003764:	61fb      	str	r3, [r7, #28]
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	2200      	movs	r2, #0
 800376a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	4619      	mov	r1, r3
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f005 ff4b 	bl	800960e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003778:	88fb      	ldrh	r3, [r7, #6]
 800377a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 82d4 	beq.w	8003d2c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	461a      	mov	r2, r3
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4413      	add	r3, r2
 8003792:	881b      	ldrh	r3, [r3, #0]
 8003794:	b29b      	uxth	r3, r3
 8003796:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800379a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800379e:	827b      	strh	r3, [r7, #18]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	461a      	mov	r2, r3
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	441a      	add	r2, r3
 80037ae:	8a7b      	ldrh	r3, [r7, #18]
 80037b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	8013      	strh	r3, [r2, #0]
 80037c4:	e2b2      	b.n	8003d2c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80037c6:	88fb      	ldrh	r3, [r7, #6]
 80037c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d021      	beq.n	8003814 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	461a      	mov	r2, r3
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	4413      	add	r3, r2
 80037de:	881b      	ldrh	r3, [r3, #0]
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ea:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	461a      	mov	r2, r3
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	441a      	add	r2, r3
 80037fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003800:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003804:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003808:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800380c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003810:	b29b      	uxth	r3, r3
 8003812:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800381a:	2b01      	cmp	r3, #1
 800381c:	f040 8286 	bne.w	8003d2c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	695a      	ldr	r2, [r3, #20]
 8003824:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003828:	441a      	add	r2, r3
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	69da      	ldr	r2, [r3, #28]
 8003832:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003836:	441a      	add	r2, r3
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	6a1a      	ldr	r2, [r3, #32]
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	429a      	cmp	r2, r3
 8003846:	d309      	bcc.n	800385c <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	6a1a      	ldr	r2, [r3, #32]
 8003852:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003854:	1ad2      	subs	r2, r2, r3
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	621a      	str	r2, [r3, #32]
 800385a:	e015      	b.n	8003888 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d107      	bne.n	8003874 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003864:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003868:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003872:	e009      	b.n	8003888 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	2200      	movs	r2, #0
 8003886:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	785b      	ldrb	r3, [r3, #1]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d155      	bne.n	800393c <HAL_PCD_EP_DB_Transmit+0x35a>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	63bb      	str	r3, [r7, #56]	; 0x38
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800389e:	b29b      	uxth	r3, r3
 80038a0:	461a      	mov	r2, r3
 80038a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a4:	4413      	add	r3, r2
 80038a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	011a      	lsls	r2, r3, #4
 80038ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b0:	4413      	add	r3, r2
 80038b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80038b6:	637b      	str	r3, [r7, #52]	; 0x34
 80038b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d112      	bne.n	80038e4 <HAL_PCD_EP_DB_Transmit+0x302>
 80038be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038c0:	881b      	ldrh	r3, [r3, #0]
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038cc:	801a      	strh	r2, [r3, #0]
 80038ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038d0:	881b      	ldrh	r3, [r3, #0]
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038dc:	b29a      	uxth	r2, r3
 80038de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038e0:	801a      	strh	r2, [r3, #0]
 80038e2:	e047      	b.n	8003974 <HAL_PCD_EP_DB_Transmit+0x392>
 80038e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038e6:	2b3e      	cmp	r3, #62	; 0x3e
 80038e8:	d811      	bhi.n	800390e <HAL_PCD_EP_DB_Transmit+0x32c>
 80038ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038ec:	085b      	lsrs	r3, r3, #1
 80038ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80038f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d002      	beq.n	8003900 <HAL_PCD_EP_DB_Transmit+0x31e>
 80038fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038fc:	3301      	adds	r3, #1
 80038fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003900:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003902:	b29b      	uxth	r3, r3
 8003904:	029b      	lsls	r3, r3, #10
 8003906:	b29a      	uxth	r2, r3
 8003908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800390a:	801a      	strh	r2, [r3, #0]
 800390c:	e032      	b.n	8003974 <HAL_PCD_EP_DB_Transmit+0x392>
 800390e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003910:	095b      	lsrs	r3, r3, #5
 8003912:	64bb      	str	r3, [r7, #72]	; 0x48
 8003914:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003916:	f003 031f 	and.w	r3, r3, #31
 800391a:	2b00      	cmp	r3, #0
 800391c:	d102      	bne.n	8003924 <HAL_PCD_EP_DB_Transmit+0x342>
 800391e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003920:	3b01      	subs	r3, #1
 8003922:	64bb      	str	r3, [r7, #72]	; 0x48
 8003924:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003926:	b29b      	uxth	r3, r3
 8003928:	029b      	lsls	r3, r3, #10
 800392a:	b29b      	uxth	r3, r3
 800392c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003930:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003934:	b29a      	uxth	r2, r3
 8003936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003938:	801a      	strh	r2, [r3, #0]
 800393a:	e01b      	b.n	8003974 <HAL_PCD_EP_DB_Transmit+0x392>
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	785b      	ldrb	r3, [r3, #1]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d117      	bne.n	8003974 <HAL_PCD_EP_DB_Transmit+0x392>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	643b      	str	r3, [r7, #64]	; 0x40
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003952:	b29b      	uxth	r3, r3
 8003954:	461a      	mov	r2, r3
 8003956:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003958:	4413      	add	r3, r2
 800395a:	643b      	str	r3, [r7, #64]	; 0x40
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	011a      	lsls	r2, r3, #4
 8003962:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003964:	4413      	add	r3, r2
 8003966:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800396a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800396c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800396e:	b29a      	uxth	r2, r3
 8003970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003972:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6818      	ldr	r0, [r3, #0]
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	6959      	ldr	r1, [r3, #20]
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	891a      	ldrh	r2, [r3, #8]
 8003980:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003982:	b29b      	uxth	r3, r3
 8003984:	f003 ffaa 	bl	80078dc <USB_WritePMA>
 8003988:	e1d0      	b.n	8003d2c <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003992:	b29b      	uxth	r3, r3
 8003994:	461a      	mov	r2, r3
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	4413      	add	r3, r2
 800399e:	3306      	adds	r3, #6
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	6812      	ldr	r2, [r2, #0]
 80039a6:	4413      	add	r3, r2
 80039a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039ac:	881b      	ldrh	r3, [r3, #0]
 80039ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039b2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	699a      	ldr	r2, [r3, #24]
 80039ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80039be:	429a      	cmp	r2, r3
 80039c0:	d307      	bcc.n	80039d2 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	699a      	ldr	r2, [r3, #24]
 80039c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80039ca:	1ad2      	subs	r2, r2, r3
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	619a      	str	r2, [r3, #24]
 80039d0:	e002      	b.n	80039d8 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	2200      	movs	r2, #0
 80039d6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f040 80c4 	bne.w	8003b6a <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	785b      	ldrb	r3, [r3, #1]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d126      	bne.n	8003a38 <HAL_PCD_EP_DB_Transmit+0x456>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	461a      	mov	r2, r3
 80039fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039fe:	4413      	add	r3, r2
 8003a00:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	011a      	lsls	r2, r3, #4
 8003a08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a10:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a14:	881b      	ldrh	r3, [r3, #0]
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a20:	801a      	strh	r2, [r3, #0]
 8003a22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a24:	881b      	ldrh	r3, [r3, #0]
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a34:	801a      	strh	r2, [r3, #0]
 8003a36:	e01a      	b.n	8003a6e <HAL_PCD_EP_DB_Transmit+0x48c>
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	785b      	ldrb	r3, [r3, #1]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d116      	bne.n	8003a6e <HAL_PCD_EP_DB_Transmit+0x48c>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	677b      	str	r3, [r7, #116]	; 0x74
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	461a      	mov	r2, r3
 8003a52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a54:	4413      	add	r3, r2
 8003a56:	677b      	str	r3, [r7, #116]	; 0x74
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	011a      	lsls	r2, r3, #4
 8003a5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a60:	4413      	add	r3, r2
 8003a62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a66:	673b      	str	r3, [r7, #112]	; 0x70
 8003a68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	785b      	ldrb	r3, [r3, #1]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d12f      	bne.n	8003adc <HAL_PCD_EP_DB_Transmit+0x4fa>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	461a      	mov	r2, r3
 8003a90:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a94:	4413      	add	r3, r2
 8003a96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	011a      	lsls	r2, r3, #4
 8003aa0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003aa4:	4413      	add	r3, r2
 8003aa6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003aaa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003aae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ab2:	881b      	ldrh	r3, [r3, #0]
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ac0:	801a      	strh	r2, [r3, #0]
 8003ac2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ac6:	881b      	ldrh	r3, [r3, #0]
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ace:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ad8:	801a      	strh	r2, [r3, #0]
 8003ada:	e017      	b.n	8003b0c <HAL_PCD_EP_DB_Transmit+0x52a>
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	785b      	ldrb	r3, [r3, #1]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d113      	bne.n	8003b0c <HAL_PCD_EP_DB_Transmit+0x52a>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	461a      	mov	r2, r3
 8003af0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003af2:	4413      	add	r3, r2
 8003af4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	011a      	lsls	r2, r3, #4
 8003afc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003afe:	4413      	add	r3, r2
 8003b00:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b04:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003b06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003b08:	2200      	movs	r2, #0
 8003b0a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	4619      	mov	r1, r3
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f005 fd7b 	bl	800960e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003b18:	88fb      	ldrh	r3, [r7, #6]
 8003b1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f040 8104 	bne.w	8003d2c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	461a      	mov	r2, r3
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4413      	add	r3, r2
 8003b32:	881b      	ldrh	r3, [r3, #0]
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b3e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	461a      	mov	r2, r3
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	441a      	add	r2, r3
 8003b50:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003b54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	8013      	strh	r3, [r2, #0]
 8003b68:	e0e0      	b.n	8003d2c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003b6a:	88fb      	ldrh	r3, [r7, #6]
 8003b6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d121      	bne.n	8003bb8 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	461a      	mov	r2, r3
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4413      	add	r3, r2
 8003b82:	881b      	ldrh	r3, [r3, #0]
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b8e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	461a      	mov	r2, r3
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	441a      	add	r2, r3
 8003ba0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003ba4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ba8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	f040 80b4 	bne.w	8003d2c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	695a      	ldr	r2, [r3, #20]
 8003bc8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003bcc:	441a      	add	r2, r3
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	69da      	ldr	r2, [r3, #28]
 8003bd6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003bda:	441a      	add	r2, r3
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	6a1a      	ldr	r2, [r3, #32]
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d309      	bcc.n	8003c00 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	6a1a      	ldr	r2, [r3, #32]
 8003bf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bf8:	1ad2      	subs	r2, r2, r3
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	621a      	str	r2, [r3, #32]
 8003bfe:	e015      	b.n	8003c2c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d107      	bne.n	8003c18 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8003c08:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003c0c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003c16:	e009      	b.n	8003c2c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	6a1b      	ldr	r3, [r3, #32]
 8003c1c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	2200      	movs	r2, #0
 8003c22:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	667b      	str	r3, [r7, #100]	; 0x64
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	785b      	ldrb	r3, [r3, #1]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d155      	bne.n	8003ce6 <HAL_PCD_EP_DB_Transmit+0x704>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c4e:	4413      	add	r3, r2
 8003c50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	011a      	lsls	r2, r3, #4
 8003c58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c5a:	4413      	add	r3, r2
 8003c5c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c60:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d112      	bne.n	8003c8e <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003c68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c6a:	881b      	ldrh	r3, [r3, #0]
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c76:	801a      	strh	r2, [r3, #0]
 8003c78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c7a:	881b      	ldrh	r3, [r3, #0]
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c8a:	801a      	strh	r2, [r3, #0]
 8003c8c:	e044      	b.n	8003d18 <HAL_PCD_EP_DB_Transmit+0x736>
 8003c8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c90:	2b3e      	cmp	r3, #62	; 0x3e
 8003c92:	d811      	bhi.n	8003cb8 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003c94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c96:	085b      	lsrs	r3, r3, #1
 8003c98:	657b      	str	r3, [r7, #84]	; 0x54
 8003c9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d002      	beq.n	8003caa <HAL_PCD_EP_DB_Transmit+0x6c8>
 8003ca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	657b      	str	r3, [r7, #84]	; 0x54
 8003caa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	029b      	lsls	r3, r3, #10
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003cb4:	801a      	strh	r2, [r3, #0]
 8003cb6:	e02f      	b.n	8003d18 <HAL_PCD_EP_DB_Transmit+0x736>
 8003cb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cba:	095b      	lsrs	r3, r3, #5
 8003cbc:	657b      	str	r3, [r7, #84]	; 0x54
 8003cbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cc0:	f003 031f 	and.w	r3, r3, #31
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d102      	bne.n	8003cce <HAL_PCD_EP_DB_Transmit+0x6ec>
 8003cc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	657b      	str	r3, [r7, #84]	; 0x54
 8003cce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	029b      	lsls	r3, r3, #10
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ce2:	801a      	strh	r2, [r3, #0]
 8003ce4:	e018      	b.n	8003d18 <HAL_PCD_EP_DB_Transmit+0x736>
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	785b      	ldrb	r3, [r3, #1]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d114      	bne.n	8003d18 <HAL_PCD_EP_DB_Transmit+0x736>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cfc:	4413      	add	r3, r2
 8003cfe:	667b      	str	r3, [r7, #100]	; 0x64
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	011a      	lsls	r2, r3, #4
 8003d06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d08:	4413      	add	r3, r2
 8003d0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d0e:	663b      	str	r3, [r7, #96]	; 0x60
 8003d10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d16:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6818      	ldr	r0, [r3, #0]
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	6959      	ldr	r1, [r3, #20]
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	895a      	ldrh	r2, [r3, #10]
 8003d24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	f003 fdd8 	bl	80078dc <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	461a      	mov	r2, r3
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4413      	add	r3, r2
 8003d3a:	881b      	ldrh	r3, [r3, #0]
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d46:	823b      	strh	r3, [r7, #16]
 8003d48:	8a3b      	ldrh	r3, [r7, #16]
 8003d4a:	f083 0310 	eor.w	r3, r3, #16
 8003d4e:	823b      	strh	r3, [r7, #16]
 8003d50:	8a3b      	ldrh	r3, [r7, #16]
 8003d52:	f083 0320 	eor.w	r3, r3, #32
 8003d56:	823b      	strh	r3, [r7, #16]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	441a      	add	r2, r3
 8003d66:	8a3b      	ldrh	r3, [r7, #16]
 8003d68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3788      	adds	r7, #136	; 0x88
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b087      	sub	sp, #28
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	60f8      	str	r0, [r7, #12]
 8003d8e:	607b      	str	r3, [r7, #4]
 8003d90:	460b      	mov	r3, r1
 8003d92:	817b      	strh	r3, [r7, #10]
 8003d94:	4613      	mov	r3, r2
 8003d96:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003d98:	897b      	ldrh	r3, [r7, #10]
 8003d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00b      	beq.n	8003dbc <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003da4:	897b      	ldrh	r3, [r7, #10]
 8003da6:	f003 0307 	and.w	r3, r3, #7
 8003daa:	1c5a      	adds	r2, r3, #1
 8003dac:	4613      	mov	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4413      	add	r3, r2
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	4413      	add	r3, r2
 8003db8:	617b      	str	r3, [r7, #20]
 8003dba:	e009      	b.n	8003dd0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003dbc:	897a      	ldrh	r2, [r7, #10]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	4413      	add	r3, r2
 8003dc4:	00db      	lsls	r3, r3, #3
 8003dc6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	4413      	add	r3, r2
 8003dce:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003dd0:	893b      	ldrh	r3, [r7, #8]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d107      	bne.n	8003de6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	80da      	strh	r2, [r3, #6]
 8003de4:	e00b      	b.n	8003dfe <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	2201      	movs	r2, #1
 8003dea:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	0c1b      	lsrs	r3, r3, #16
 8003df8:	b29a      	uxth	r2, r3
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	371c      	adds	r7, #28
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bc80      	pop	{r7}
 8003e08:	4770      	bx	lr
	...

08003e0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e272      	b.n	8004304 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f000 8087 	beq.w	8003f3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e2c:	4b92      	ldr	r3, [pc, #584]	; (8004078 <HAL_RCC_OscConfig+0x26c>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f003 030c 	and.w	r3, r3, #12
 8003e34:	2b04      	cmp	r3, #4
 8003e36:	d00c      	beq.n	8003e52 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e38:	4b8f      	ldr	r3, [pc, #572]	; (8004078 <HAL_RCC_OscConfig+0x26c>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f003 030c 	and.w	r3, r3, #12
 8003e40:	2b08      	cmp	r3, #8
 8003e42:	d112      	bne.n	8003e6a <HAL_RCC_OscConfig+0x5e>
 8003e44:	4b8c      	ldr	r3, [pc, #560]	; (8004078 <HAL_RCC_OscConfig+0x26c>)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e50:	d10b      	bne.n	8003e6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e52:	4b89      	ldr	r3, [pc, #548]	; (8004078 <HAL_RCC_OscConfig+0x26c>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d06c      	beq.n	8003f38 <HAL_RCC_OscConfig+0x12c>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d168      	bne.n	8003f38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e24c      	b.n	8004304 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e72:	d106      	bne.n	8003e82 <HAL_RCC_OscConfig+0x76>
 8003e74:	4b80      	ldr	r3, [pc, #512]	; (8004078 <HAL_RCC_OscConfig+0x26c>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a7f      	ldr	r2, [pc, #508]	; (8004078 <HAL_RCC_OscConfig+0x26c>)
 8003e7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e7e:	6013      	str	r3, [r2, #0]
 8003e80:	e02e      	b.n	8003ee0 <HAL_RCC_OscConfig+0xd4>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10c      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x98>
 8003e8a:	4b7b      	ldr	r3, [pc, #492]	; (8004078 <HAL_RCC_OscConfig+0x26c>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a7a      	ldr	r2, [pc, #488]	; (8004078 <HAL_RCC_OscConfig+0x26c>)
 8003e90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e94:	6013      	str	r3, [r2, #0]
 8003e96:	4b78      	ldr	r3, [pc, #480]	; (8004078 <HAL_RCC_OscConfig+0x26c>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a77      	ldr	r2, [pc, #476]	; (8004078 <HAL_RCC_OscConfig+0x26c>)
 8003e9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ea0:	6013      	str	r3, [r2, #0]
 8003ea2:	e01d      	b.n	8003ee0 <HAL_RCC_OscConfig+0xd4>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003eac:	d10c      	bne.n	8003ec8 <HAL_RCC_OscConfig+0xbc>
 8003eae:	4b72      	ldr	r3, [pc, #456]	; (8004078 <HAL_RCC_OscConfig+0x26c>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a71      	ldr	r2, [pc, #452]	; (8004078 <HAL_RCC_OscConfig+0x26c>)
 8003eb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003eb8:	6013      	str	r3, [r2, #0]
 8003eba:	4b6f      	ldr	r3, [pc, #444]	; (8004078 <HAL_RCC_OscConfig+0x26c>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a6e      	ldr	r2, [pc, #440]	; (8004078 <HAL_RCC_OscConfig+0x26c>)
 8003ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ec4:	6013      	str	r3, [r2, #0]
 8003ec6:	e00b      	b.n	8003ee0 <HAL_RCC_OscConfig+0xd4>
 8003ec8:	4b6b      	ldr	r3, [pc, #428]	; (8004078 <HAL_RCC_OscConfig+0x26c>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a6a      	ldr	r2, [pc, #424]	; (8004078 <HAL_RCC_OscConfig+0x26c>)
 8003ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ed2:	6013      	str	r3, [r2, #0]
 8003ed4:	4b68      	ldr	r3, [pc, #416]	; (8004078 <HAL_RCC_OscConfig+0x26c>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a67      	ldr	r2, [pc, #412]	; (8004078 <HAL_RCC_OscConfig+0x26c>)
 8003eda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ede:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d013      	beq.n	8003f10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee8:	f7fd f8fe 	bl	80010e8 <HAL_GetTick>
 8003eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eee:	e008      	b.n	8003f02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ef0:	f7fd f8fa 	bl	80010e8 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b64      	cmp	r3, #100	; 0x64
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e200      	b.n	8004304 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f02:	4b5d      	ldr	r3, [pc, #372]	; (8004078 <HAL_RCC_OscConfig+0x26c>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d0f0      	beq.n	8003ef0 <HAL_RCC_OscConfig+0xe4>
 8003f0e:	e014      	b.n	8003f3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f10:	f7fd f8ea 	bl	80010e8 <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f16:	e008      	b.n	8003f2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f18:	f7fd f8e6 	bl	80010e8 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b64      	cmp	r3, #100	; 0x64
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e1ec      	b.n	8004304 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f2a:	4b53      	ldr	r3, [pc, #332]	; (8004078 <HAL_RCC_OscConfig+0x26c>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1f0      	bne.n	8003f18 <HAL_RCC_OscConfig+0x10c>
 8003f36:	e000      	b.n	8003f3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d063      	beq.n	800400e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f46:	4b4c      	ldr	r3, [pc, #304]	; (8004078 <HAL_RCC_OscConfig+0x26c>)
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f003 030c 	and.w	r3, r3, #12
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00b      	beq.n	8003f6a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003f52:	4b49      	ldr	r3, [pc, #292]	; (8004078 <HAL_RCC_OscConfig+0x26c>)
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f003 030c 	and.w	r3, r3, #12
 8003f5a:	2b08      	cmp	r3, #8
 8003f5c:	d11c      	bne.n	8003f98 <HAL_RCC_OscConfig+0x18c>
 8003f5e:	4b46      	ldr	r3, [pc, #280]	; (8004078 <HAL_RCC_OscConfig+0x26c>)
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d116      	bne.n	8003f98 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f6a:	4b43      	ldr	r3, [pc, #268]	; (8004078 <HAL_RCC_OscConfig+0x26c>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d005      	beq.n	8003f82 <HAL_RCC_OscConfig+0x176>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d001      	beq.n	8003f82 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e1c0      	b.n	8004304 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f82:	4b3d      	ldr	r3, [pc, #244]	; (8004078 <HAL_RCC_OscConfig+0x26c>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	4939      	ldr	r1, [pc, #228]	; (8004078 <HAL_RCC_OscConfig+0x26c>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f96:	e03a      	b.n	800400e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d020      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fa0:	4b36      	ldr	r3, [pc, #216]	; (800407c <HAL_RCC_OscConfig+0x270>)
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa6:	f7fd f89f 	bl	80010e8 <HAL_GetTick>
 8003faa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fac:	e008      	b.n	8003fc0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fae:	f7fd f89b 	bl	80010e8 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d901      	bls.n	8003fc0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e1a1      	b.n	8004304 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fc0:	4b2d      	ldr	r3, [pc, #180]	; (8004078 <HAL_RCC_OscConfig+0x26c>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d0f0      	beq.n	8003fae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fcc:	4b2a      	ldr	r3, [pc, #168]	; (8004078 <HAL_RCC_OscConfig+0x26c>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	00db      	lsls	r3, r3, #3
 8003fda:	4927      	ldr	r1, [pc, #156]	; (8004078 <HAL_RCC_OscConfig+0x26c>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	600b      	str	r3, [r1, #0]
 8003fe0:	e015      	b.n	800400e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fe2:	4b26      	ldr	r3, [pc, #152]	; (800407c <HAL_RCC_OscConfig+0x270>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe8:	f7fd f87e 	bl	80010e8 <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ff0:	f7fd f87a 	bl	80010e8 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e180      	b.n	8004304 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004002:	4b1d      	ldr	r3, [pc, #116]	; (8004078 <HAL_RCC_OscConfig+0x26c>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1f0      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0308 	and.w	r3, r3, #8
 8004016:	2b00      	cmp	r3, #0
 8004018:	d03a      	beq.n	8004090 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d019      	beq.n	8004056 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004022:	4b17      	ldr	r3, [pc, #92]	; (8004080 <HAL_RCC_OscConfig+0x274>)
 8004024:	2201      	movs	r2, #1
 8004026:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004028:	f7fd f85e 	bl	80010e8 <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004030:	f7fd f85a 	bl	80010e8 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e160      	b.n	8004304 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004042:	4b0d      	ldr	r3, [pc, #52]	; (8004078 <HAL_RCC_OscConfig+0x26c>)
 8004044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d0f0      	beq.n	8004030 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800404e:	2001      	movs	r0, #1
 8004050:	f000 fac4 	bl	80045dc <RCC_Delay>
 8004054:	e01c      	b.n	8004090 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004056:	4b0a      	ldr	r3, [pc, #40]	; (8004080 <HAL_RCC_OscConfig+0x274>)
 8004058:	2200      	movs	r2, #0
 800405a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800405c:	f7fd f844 	bl	80010e8 <HAL_GetTick>
 8004060:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004062:	e00f      	b.n	8004084 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004064:	f7fd f840 	bl	80010e8 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b02      	cmp	r3, #2
 8004070:	d908      	bls.n	8004084 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e146      	b.n	8004304 <HAL_RCC_OscConfig+0x4f8>
 8004076:	bf00      	nop
 8004078:	40021000 	.word	0x40021000
 800407c:	42420000 	.word	0x42420000
 8004080:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004084:	4b92      	ldr	r3, [pc, #584]	; (80042d0 <HAL_RCC_OscConfig+0x4c4>)
 8004086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1e9      	bne.n	8004064 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0304 	and.w	r3, r3, #4
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 80a6 	beq.w	80041ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800409e:	2300      	movs	r3, #0
 80040a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040a2:	4b8b      	ldr	r3, [pc, #556]	; (80042d0 <HAL_RCC_OscConfig+0x4c4>)
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d10d      	bne.n	80040ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ae:	4b88      	ldr	r3, [pc, #544]	; (80042d0 <HAL_RCC_OscConfig+0x4c4>)
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	4a87      	ldr	r2, [pc, #540]	; (80042d0 <HAL_RCC_OscConfig+0x4c4>)
 80040b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040b8:	61d3      	str	r3, [r2, #28]
 80040ba:	4b85      	ldr	r3, [pc, #532]	; (80042d0 <HAL_RCC_OscConfig+0x4c4>)
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c2:	60bb      	str	r3, [r7, #8]
 80040c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040c6:	2301      	movs	r3, #1
 80040c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ca:	4b82      	ldr	r3, [pc, #520]	; (80042d4 <HAL_RCC_OscConfig+0x4c8>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d118      	bne.n	8004108 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040d6:	4b7f      	ldr	r3, [pc, #508]	; (80042d4 <HAL_RCC_OscConfig+0x4c8>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a7e      	ldr	r2, [pc, #504]	; (80042d4 <HAL_RCC_OscConfig+0x4c8>)
 80040dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040e2:	f7fd f801 	bl	80010e8 <HAL_GetTick>
 80040e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e8:	e008      	b.n	80040fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040ea:	f7fc fffd 	bl	80010e8 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	2b64      	cmp	r3, #100	; 0x64
 80040f6:	d901      	bls.n	80040fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e103      	b.n	8004304 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040fc:	4b75      	ldr	r3, [pc, #468]	; (80042d4 <HAL_RCC_OscConfig+0x4c8>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004104:	2b00      	cmp	r3, #0
 8004106:	d0f0      	beq.n	80040ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d106      	bne.n	800411e <HAL_RCC_OscConfig+0x312>
 8004110:	4b6f      	ldr	r3, [pc, #444]	; (80042d0 <HAL_RCC_OscConfig+0x4c4>)
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	4a6e      	ldr	r2, [pc, #440]	; (80042d0 <HAL_RCC_OscConfig+0x4c4>)
 8004116:	f043 0301 	orr.w	r3, r3, #1
 800411a:	6213      	str	r3, [r2, #32]
 800411c:	e02d      	b.n	800417a <HAL_RCC_OscConfig+0x36e>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10c      	bne.n	8004140 <HAL_RCC_OscConfig+0x334>
 8004126:	4b6a      	ldr	r3, [pc, #424]	; (80042d0 <HAL_RCC_OscConfig+0x4c4>)
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	4a69      	ldr	r2, [pc, #420]	; (80042d0 <HAL_RCC_OscConfig+0x4c4>)
 800412c:	f023 0301 	bic.w	r3, r3, #1
 8004130:	6213      	str	r3, [r2, #32]
 8004132:	4b67      	ldr	r3, [pc, #412]	; (80042d0 <HAL_RCC_OscConfig+0x4c4>)
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	4a66      	ldr	r2, [pc, #408]	; (80042d0 <HAL_RCC_OscConfig+0x4c4>)
 8004138:	f023 0304 	bic.w	r3, r3, #4
 800413c:	6213      	str	r3, [r2, #32]
 800413e:	e01c      	b.n	800417a <HAL_RCC_OscConfig+0x36e>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	2b05      	cmp	r3, #5
 8004146:	d10c      	bne.n	8004162 <HAL_RCC_OscConfig+0x356>
 8004148:	4b61      	ldr	r3, [pc, #388]	; (80042d0 <HAL_RCC_OscConfig+0x4c4>)
 800414a:	6a1b      	ldr	r3, [r3, #32]
 800414c:	4a60      	ldr	r2, [pc, #384]	; (80042d0 <HAL_RCC_OscConfig+0x4c4>)
 800414e:	f043 0304 	orr.w	r3, r3, #4
 8004152:	6213      	str	r3, [r2, #32]
 8004154:	4b5e      	ldr	r3, [pc, #376]	; (80042d0 <HAL_RCC_OscConfig+0x4c4>)
 8004156:	6a1b      	ldr	r3, [r3, #32]
 8004158:	4a5d      	ldr	r2, [pc, #372]	; (80042d0 <HAL_RCC_OscConfig+0x4c4>)
 800415a:	f043 0301 	orr.w	r3, r3, #1
 800415e:	6213      	str	r3, [r2, #32]
 8004160:	e00b      	b.n	800417a <HAL_RCC_OscConfig+0x36e>
 8004162:	4b5b      	ldr	r3, [pc, #364]	; (80042d0 <HAL_RCC_OscConfig+0x4c4>)
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	4a5a      	ldr	r2, [pc, #360]	; (80042d0 <HAL_RCC_OscConfig+0x4c4>)
 8004168:	f023 0301 	bic.w	r3, r3, #1
 800416c:	6213      	str	r3, [r2, #32]
 800416e:	4b58      	ldr	r3, [pc, #352]	; (80042d0 <HAL_RCC_OscConfig+0x4c4>)
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	4a57      	ldr	r2, [pc, #348]	; (80042d0 <HAL_RCC_OscConfig+0x4c4>)
 8004174:	f023 0304 	bic.w	r3, r3, #4
 8004178:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d015      	beq.n	80041ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004182:	f7fc ffb1 	bl	80010e8 <HAL_GetTick>
 8004186:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004188:	e00a      	b.n	80041a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800418a:	f7fc ffad 	bl	80010e8 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	f241 3288 	movw	r2, #5000	; 0x1388
 8004198:	4293      	cmp	r3, r2
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e0b1      	b.n	8004304 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041a0:	4b4b      	ldr	r3, [pc, #300]	; (80042d0 <HAL_RCC_OscConfig+0x4c4>)
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d0ee      	beq.n	800418a <HAL_RCC_OscConfig+0x37e>
 80041ac:	e014      	b.n	80041d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041ae:	f7fc ff9b 	bl	80010e8 <HAL_GetTick>
 80041b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041b4:	e00a      	b.n	80041cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041b6:	f7fc ff97 	bl	80010e8 <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d901      	bls.n	80041cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e09b      	b.n	8004304 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041cc:	4b40      	ldr	r3, [pc, #256]	; (80042d0 <HAL_RCC_OscConfig+0x4c4>)
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	f003 0302 	and.w	r3, r3, #2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1ee      	bne.n	80041b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80041d8:	7dfb      	ldrb	r3, [r7, #23]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d105      	bne.n	80041ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041de:	4b3c      	ldr	r3, [pc, #240]	; (80042d0 <HAL_RCC_OscConfig+0x4c4>)
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	4a3b      	ldr	r2, [pc, #236]	; (80042d0 <HAL_RCC_OscConfig+0x4c4>)
 80041e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	f000 8087 	beq.w	8004302 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041f4:	4b36      	ldr	r3, [pc, #216]	; (80042d0 <HAL_RCC_OscConfig+0x4c4>)
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f003 030c 	and.w	r3, r3, #12
 80041fc:	2b08      	cmp	r3, #8
 80041fe:	d061      	beq.n	80042c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	69db      	ldr	r3, [r3, #28]
 8004204:	2b02      	cmp	r3, #2
 8004206:	d146      	bne.n	8004296 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004208:	4b33      	ldr	r3, [pc, #204]	; (80042d8 <HAL_RCC_OscConfig+0x4cc>)
 800420a:	2200      	movs	r2, #0
 800420c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800420e:	f7fc ff6b 	bl	80010e8 <HAL_GetTick>
 8004212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004214:	e008      	b.n	8004228 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004216:	f7fc ff67 	bl	80010e8 <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	2b02      	cmp	r3, #2
 8004222:	d901      	bls.n	8004228 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e06d      	b.n	8004304 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004228:	4b29      	ldr	r3, [pc, #164]	; (80042d0 <HAL_RCC_OscConfig+0x4c4>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1f0      	bne.n	8004216 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800423c:	d108      	bne.n	8004250 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800423e:	4b24      	ldr	r3, [pc, #144]	; (80042d0 <HAL_RCC_OscConfig+0x4c4>)
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	4921      	ldr	r1, [pc, #132]	; (80042d0 <HAL_RCC_OscConfig+0x4c4>)
 800424c:	4313      	orrs	r3, r2
 800424e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004250:	4b1f      	ldr	r3, [pc, #124]	; (80042d0 <HAL_RCC_OscConfig+0x4c4>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a19      	ldr	r1, [r3, #32]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004260:	430b      	orrs	r3, r1
 8004262:	491b      	ldr	r1, [pc, #108]	; (80042d0 <HAL_RCC_OscConfig+0x4c4>)
 8004264:	4313      	orrs	r3, r2
 8004266:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004268:	4b1b      	ldr	r3, [pc, #108]	; (80042d8 <HAL_RCC_OscConfig+0x4cc>)
 800426a:	2201      	movs	r2, #1
 800426c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800426e:	f7fc ff3b 	bl	80010e8 <HAL_GetTick>
 8004272:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004274:	e008      	b.n	8004288 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004276:	f7fc ff37 	bl	80010e8 <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	2b02      	cmp	r3, #2
 8004282:	d901      	bls.n	8004288 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e03d      	b.n	8004304 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004288:	4b11      	ldr	r3, [pc, #68]	; (80042d0 <HAL_RCC_OscConfig+0x4c4>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d0f0      	beq.n	8004276 <HAL_RCC_OscConfig+0x46a>
 8004294:	e035      	b.n	8004302 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004296:	4b10      	ldr	r3, [pc, #64]	; (80042d8 <HAL_RCC_OscConfig+0x4cc>)
 8004298:	2200      	movs	r2, #0
 800429a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800429c:	f7fc ff24 	bl	80010e8 <HAL_GetTick>
 80042a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042a2:	e008      	b.n	80042b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042a4:	f7fc ff20 	bl	80010e8 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e026      	b.n	8004304 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042b6:	4b06      	ldr	r3, [pc, #24]	; (80042d0 <HAL_RCC_OscConfig+0x4c4>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1f0      	bne.n	80042a4 <HAL_RCC_OscConfig+0x498>
 80042c2:	e01e      	b.n	8004302 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	69db      	ldr	r3, [r3, #28]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d107      	bne.n	80042dc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e019      	b.n	8004304 <HAL_RCC_OscConfig+0x4f8>
 80042d0:	40021000 	.word	0x40021000
 80042d4:	40007000 	.word	0x40007000
 80042d8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80042dc:	4b0b      	ldr	r3, [pc, #44]	; (800430c <HAL_RCC_OscConfig+0x500>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a1b      	ldr	r3, [r3, #32]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d106      	bne.n	80042fe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d001      	beq.n	8004302 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e000      	b.n	8004304 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3718      	adds	r7, #24
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	40021000 	.word	0x40021000

08004310 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d101      	bne.n	8004324 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e0d0      	b.n	80044c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004324:	4b6a      	ldr	r3, [pc, #424]	; (80044d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0307 	and.w	r3, r3, #7
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	429a      	cmp	r2, r3
 8004330:	d910      	bls.n	8004354 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004332:	4b67      	ldr	r3, [pc, #412]	; (80044d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f023 0207 	bic.w	r2, r3, #7
 800433a:	4965      	ldr	r1, [pc, #404]	; (80044d0 <HAL_RCC_ClockConfig+0x1c0>)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	4313      	orrs	r3, r2
 8004340:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004342:	4b63      	ldr	r3, [pc, #396]	; (80044d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0307 	and.w	r3, r3, #7
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	429a      	cmp	r2, r3
 800434e:	d001      	beq.n	8004354 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e0b8      	b.n	80044c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d020      	beq.n	80043a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b00      	cmp	r3, #0
 800436a:	d005      	beq.n	8004378 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800436c:	4b59      	ldr	r3, [pc, #356]	; (80044d4 <HAL_RCC_ClockConfig+0x1c4>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	4a58      	ldr	r2, [pc, #352]	; (80044d4 <HAL_RCC_ClockConfig+0x1c4>)
 8004372:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004376:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0308 	and.w	r3, r3, #8
 8004380:	2b00      	cmp	r3, #0
 8004382:	d005      	beq.n	8004390 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004384:	4b53      	ldr	r3, [pc, #332]	; (80044d4 <HAL_RCC_ClockConfig+0x1c4>)
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	4a52      	ldr	r2, [pc, #328]	; (80044d4 <HAL_RCC_ClockConfig+0x1c4>)
 800438a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800438e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004390:	4b50      	ldr	r3, [pc, #320]	; (80044d4 <HAL_RCC_ClockConfig+0x1c4>)
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	494d      	ldr	r1, [pc, #308]	; (80044d4 <HAL_RCC_ClockConfig+0x1c4>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d040      	beq.n	8004430 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d107      	bne.n	80043c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043b6:	4b47      	ldr	r3, [pc, #284]	; (80044d4 <HAL_RCC_ClockConfig+0x1c4>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d115      	bne.n	80043ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e07f      	b.n	80044c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d107      	bne.n	80043de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ce:	4b41      	ldr	r3, [pc, #260]	; (80044d4 <HAL_RCC_ClockConfig+0x1c4>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d109      	bne.n	80043ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e073      	b.n	80044c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043de:	4b3d      	ldr	r3, [pc, #244]	; (80044d4 <HAL_RCC_ClockConfig+0x1c4>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e06b      	b.n	80044c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043ee:	4b39      	ldr	r3, [pc, #228]	; (80044d4 <HAL_RCC_ClockConfig+0x1c4>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f023 0203 	bic.w	r2, r3, #3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	4936      	ldr	r1, [pc, #216]	; (80044d4 <HAL_RCC_ClockConfig+0x1c4>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004400:	f7fc fe72 	bl	80010e8 <HAL_GetTick>
 8004404:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004406:	e00a      	b.n	800441e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004408:	f7fc fe6e 	bl	80010e8 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	f241 3288 	movw	r2, #5000	; 0x1388
 8004416:	4293      	cmp	r3, r2
 8004418:	d901      	bls.n	800441e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e053      	b.n	80044c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800441e:	4b2d      	ldr	r3, [pc, #180]	; (80044d4 <HAL_RCC_ClockConfig+0x1c4>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f003 020c 	and.w	r2, r3, #12
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	429a      	cmp	r2, r3
 800442e:	d1eb      	bne.n	8004408 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004430:	4b27      	ldr	r3, [pc, #156]	; (80044d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0307 	and.w	r3, r3, #7
 8004438:	683a      	ldr	r2, [r7, #0]
 800443a:	429a      	cmp	r2, r3
 800443c:	d210      	bcs.n	8004460 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800443e:	4b24      	ldr	r3, [pc, #144]	; (80044d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f023 0207 	bic.w	r2, r3, #7
 8004446:	4922      	ldr	r1, [pc, #136]	; (80044d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	4313      	orrs	r3, r2
 800444c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800444e:	4b20      	ldr	r3, [pc, #128]	; (80044d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0307 	and.w	r3, r3, #7
 8004456:	683a      	ldr	r2, [r7, #0]
 8004458:	429a      	cmp	r2, r3
 800445a:	d001      	beq.n	8004460 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e032      	b.n	80044c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0304 	and.w	r3, r3, #4
 8004468:	2b00      	cmp	r3, #0
 800446a:	d008      	beq.n	800447e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800446c:	4b19      	ldr	r3, [pc, #100]	; (80044d4 <HAL_RCC_ClockConfig+0x1c4>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	4916      	ldr	r1, [pc, #88]	; (80044d4 <HAL_RCC_ClockConfig+0x1c4>)
 800447a:	4313      	orrs	r3, r2
 800447c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0308 	and.w	r3, r3, #8
 8004486:	2b00      	cmp	r3, #0
 8004488:	d009      	beq.n	800449e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800448a:	4b12      	ldr	r3, [pc, #72]	; (80044d4 <HAL_RCC_ClockConfig+0x1c4>)
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	00db      	lsls	r3, r3, #3
 8004498:	490e      	ldr	r1, [pc, #56]	; (80044d4 <HAL_RCC_ClockConfig+0x1c4>)
 800449a:	4313      	orrs	r3, r2
 800449c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800449e:	f000 f821 	bl	80044e4 <HAL_RCC_GetSysClockFreq>
 80044a2:	4602      	mov	r2, r0
 80044a4:	4b0b      	ldr	r3, [pc, #44]	; (80044d4 <HAL_RCC_ClockConfig+0x1c4>)
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	091b      	lsrs	r3, r3, #4
 80044aa:	f003 030f 	and.w	r3, r3, #15
 80044ae:	490a      	ldr	r1, [pc, #40]	; (80044d8 <HAL_RCC_ClockConfig+0x1c8>)
 80044b0:	5ccb      	ldrb	r3, [r1, r3]
 80044b2:	fa22 f303 	lsr.w	r3, r2, r3
 80044b6:	4a09      	ldr	r2, [pc, #36]	; (80044dc <HAL_RCC_ClockConfig+0x1cc>)
 80044b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80044ba:	4b09      	ldr	r3, [pc, #36]	; (80044e0 <HAL_RCC_ClockConfig+0x1d0>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4618      	mov	r0, r3
 80044c0:	f7fc fdd0 	bl	8001064 <HAL_InitTick>

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	40022000 	.word	0x40022000
 80044d4:	40021000 	.word	0x40021000
 80044d8:	0800a500 	.word	0x0800a500
 80044dc:	20000000 	.word	0x20000000
 80044e0:	20000004 	.word	0x20000004

080044e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044e4:	b490      	push	{r4, r7}
 80044e6:	b08a      	sub	sp, #40	; 0x28
 80044e8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80044ea:	4b29      	ldr	r3, [pc, #164]	; (8004590 <HAL_RCC_GetSysClockFreq+0xac>)
 80044ec:	1d3c      	adds	r4, r7, #4
 80044ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80044f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80044f4:	f240 2301 	movw	r3, #513	; 0x201
 80044f8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80044fa:	2300      	movs	r3, #0
 80044fc:	61fb      	str	r3, [r7, #28]
 80044fe:	2300      	movs	r3, #0
 8004500:	61bb      	str	r3, [r7, #24]
 8004502:	2300      	movs	r3, #0
 8004504:	627b      	str	r3, [r7, #36]	; 0x24
 8004506:	2300      	movs	r3, #0
 8004508:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800450a:	2300      	movs	r3, #0
 800450c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800450e:	4b21      	ldr	r3, [pc, #132]	; (8004594 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	f003 030c 	and.w	r3, r3, #12
 800451a:	2b04      	cmp	r3, #4
 800451c:	d002      	beq.n	8004524 <HAL_RCC_GetSysClockFreq+0x40>
 800451e:	2b08      	cmp	r3, #8
 8004520:	d003      	beq.n	800452a <HAL_RCC_GetSysClockFreq+0x46>
 8004522:	e02b      	b.n	800457c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004524:	4b1c      	ldr	r3, [pc, #112]	; (8004598 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004526:	623b      	str	r3, [r7, #32]
      break;
 8004528:	e02b      	b.n	8004582 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	0c9b      	lsrs	r3, r3, #18
 800452e:	f003 030f 	and.w	r3, r3, #15
 8004532:	3328      	adds	r3, #40	; 0x28
 8004534:	443b      	add	r3, r7
 8004536:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800453a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d012      	beq.n	800456c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004546:	4b13      	ldr	r3, [pc, #76]	; (8004594 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	0c5b      	lsrs	r3, r3, #17
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	3328      	adds	r3, #40	; 0x28
 8004552:	443b      	add	r3, r7
 8004554:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004558:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	4a0e      	ldr	r2, [pc, #56]	; (8004598 <HAL_RCC_GetSysClockFreq+0xb4>)
 800455e:	fb03 f202 	mul.w	r2, r3, r2
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	fbb2 f3f3 	udiv	r3, r2, r3
 8004568:	627b      	str	r3, [r7, #36]	; 0x24
 800456a:	e004      	b.n	8004576 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	4a0b      	ldr	r2, [pc, #44]	; (800459c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004570:	fb02 f303 	mul.w	r3, r2, r3
 8004574:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004578:	623b      	str	r3, [r7, #32]
      break;
 800457a:	e002      	b.n	8004582 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800457c:	4b06      	ldr	r3, [pc, #24]	; (8004598 <HAL_RCC_GetSysClockFreq+0xb4>)
 800457e:	623b      	str	r3, [r7, #32]
      break;
 8004580:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004582:	6a3b      	ldr	r3, [r7, #32]
}
 8004584:	4618      	mov	r0, r3
 8004586:	3728      	adds	r7, #40	; 0x28
 8004588:	46bd      	mov	sp, r7
 800458a:	bc90      	pop	{r4, r7}
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	0800a49c 	.word	0x0800a49c
 8004594:	40021000 	.word	0x40021000
 8004598:	007a1200 	.word	0x007a1200
 800459c:	003d0900 	.word	0x003d0900

080045a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045a0:	b480      	push	{r7}
 80045a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045a4:	4b02      	ldr	r3, [pc, #8]	; (80045b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80045a6:	681b      	ldr	r3, [r3, #0]
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bc80      	pop	{r7}
 80045ae:	4770      	bx	lr
 80045b0:	20000000 	.word	0x20000000

080045b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80045b8:	f7ff fff2 	bl	80045a0 <HAL_RCC_GetHCLKFreq>
 80045bc:	4602      	mov	r2, r0
 80045be:	4b05      	ldr	r3, [pc, #20]	; (80045d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	0adb      	lsrs	r3, r3, #11
 80045c4:	f003 0307 	and.w	r3, r3, #7
 80045c8:	4903      	ldr	r1, [pc, #12]	; (80045d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045ca:	5ccb      	ldrb	r3, [r1, r3]
 80045cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	40021000 	.word	0x40021000
 80045d8:	0800a510 	.word	0x0800a510

080045dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80045e4:	4b0a      	ldr	r3, [pc, #40]	; (8004610 <RCC_Delay+0x34>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a0a      	ldr	r2, [pc, #40]	; (8004614 <RCC_Delay+0x38>)
 80045ea:	fba2 2303 	umull	r2, r3, r2, r3
 80045ee:	0a5b      	lsrs	r3, r3, #9
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	fb02 f303 	mul.w	r3, r2, r3
 80045f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80045f8:	bf00      	nop
  }
  while (Delay --);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	1e5a      	subs	r2, r3, #1
 80045fe:	60fa      	str	r2, [r7, #12]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1f9      	bne.n	80045f8 <RCC_Delay+0x1c>
}
 8004604:	bf00      	nop
 8004606:	bf00      	nop
 8004608:	3714      	adds	r7, #20
 800460a:	46bd      	mov	sp, r7
 800460c:	bc80      	pop	{r7}
 800460e:	4770      	bx	lr
 8004610:	20000000 	.word	0x20000000
 8004614:	10624dd3 	.word	0x10624dd3

08004618 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004620:	2300      	movs	r3, #0
 8004622:	613b      	str	r3, [r7, #16]
 8004624:	2300      	movs	r3, #0
 8004626:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b00      	cmp	r3, #0
 8004632:	d07d      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004634:	2300      	movs	r3, #0
 8004636:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004638:	4b4f      	ldr	r3, [pc, #316]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800463a:	69db      	ldr	r3, [r3, #28]
 800463c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10d      	bne.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004644:	4b4c      	ldr	r3, [pc, #304]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004646:	69db      	ldr	r3, [r3, #28]
 8004648:	4a4b      	ldr	r2, [pc, #300]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800464a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800464e:	61d3      	str	r3, [r2, #28]
 8004650:	4b49      	ldr	r3, [pc, #292]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004652:	69db      	ldr	r3, [r3, #28]
 8004654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004658:	60bb      	str	r3, [r7, #8]
 800465a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800465c:	2301      	movs	r3, #1
 800465e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004660:	4b46      	ldr	r3, [pc, #280]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004668:	2b00      	cmp	r3, #0
 800466a:	d118      	bne.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800466c:	4b43      	ldr	r3, [pc, #268]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a42      	ldr	r2, [pc, #264]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004672:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004676:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004678:	f7fc fd36 	bl	80010e8 <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800467e:	e008      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004680:	f7fc fd32 	bl	80010e8 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b64      	cmp	r3, #100	; 0x64
 800468c:	d901      	bls.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e06d      	b.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004692:	4b3a      	ldr	r3, [pc, #232]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800469a:	2b00      	cmp	r3, #0
 800469c:	d0f0      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800469e:	4b36      	ldr	r3, [pc, #216]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046a6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d02e      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d027      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046bc:	4b2e      	ldr	r3, [pc, #184]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046be:	6a1b      	ldr	r3, [r3, #32]
 80046c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046c4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046c6:	4b2e      	ldr	r3, [pc, #184]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046c8:	2201      	movs	r2, #1
 80046ca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046cc:	4b2c      	ldr	r3, [pc, #176]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80046d2:	4a29      	ldr	r2, [pc, #164]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d014      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e2:	f7fc fd01 	bl	80010e8 <HAL_GetTick>
 80046e6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e8:	e00a      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ea:	f7fc fcfd 	bl	80010e8 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d901      	bls.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e036      	b.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004700:	4b1d      	ldr	r3, [pc, #116]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004702:	6a1b      	ldr	r3, [r3, #32]
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d0ee      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800470c:	4b1a      	ldr	r3, [pc, #104]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	4917      	ldr	r1, [pc, #92]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800471a:	4313      	orrs	r3, r2
 800471c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800471e:	7dfb      	ldrb	r3, [r7, #23]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d105      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004724:	4b14      	ldr	r3, [pc, #80]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004726:	69db      	ldr	r3, [r3, #28]
 8004728:	4a13      	ldr	r2, [pc, #76]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800472a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800472e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d008      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800473c:	4b0e      	ldr	r3, [pc, #56]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	490b      	ldr	r1, [pc, #44]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800474a:	4313      	orrs	r3, r2
 800474c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0310 	and.w	r3, r3, #16
 8004756:	2b00      	cmp	r3, #0
 8004758:	d008      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800475a:	4b07      	ldr	r3, [pc, #28]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	4904      	ldr	r1, [pc, #16]	; (8004778 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004768:	4313      	orrs	r3, r2
 800476a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3718      	adds	r7, #24
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	40021000 	.word	0x40021000
 800477c:	40007000 	.word	0x40007000
 8004780:	42420440 	.word	0x42420440

08004784 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004784:	b590      	push	{r4, r7, lr}
 8004786:	b08d      	sub	sp, #52	; 0x34
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800478c:	4b58      	ldr	r3, [pc, #352]	; (80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800478e:	f107 040c 	add.w	r4, r7, #12
 8004792:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004794:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004798:	f240 2301 	movw	r3, #513	; 0x201
 800479c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800479e:	2300      	movs	r3, #0
 80047a0:	627b      	str	r3, [r7, #36]	; 0x24
 80047a2:	2300      	movs	r3, #0
 80047a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047a6:	2300      	movs	r3, #0
 80047a8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80047aa:	2300      	movs	r3, #0
 80047ac:	61fb      	str	r3, [r7, #28]
 80047ae:	2300      	movs	r3, #0
 80047b0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2b10      	cmp	r3, #16
 80047b6:	d00a      	beq.n	80047ce <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b10      	cmp	r3, #16
 80047bc:	f200 808e 	bhi.w	80048dc <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d049      	beq.n	800485a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d079      	beq.n	80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80047cc:	e086      	b.n	80048dc <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 80047ce:	4b49      	ldr	r3, [pc, #292]	; (80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80047d4:	4b47      	ldr	r3, [pc, #284]	; (80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d07f      	beq.n	80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	0c9b      	lsrs	r3, r3, #18
 80047e4:	f003 030f 	and.w	r3, r3, #15
 80047e8:	3330      	adds	r3, #48	; 0x30
 80047ea:	443b      	add	r3, r7
 80047ec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80047f0:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d017      	beq.n	800482c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80047fc:	4b3d      	ldr	r3, [pc, #244]	; (80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	0c5b      	lsrs	r3, r3, #17
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	3330      	adds	r3, #48	; 0x30
 8004808:	443b      	add	r3, r7
 800480a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800480e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00d      	beq.n	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800481a:	4a37      	ldr	r2, [pc, #220]	; (80048f8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004822:	6a3b      	ldr	r3, [r7, #32]
 8004824:	fb02 f303 	mul.w	r3, r2, r3
 8004828:	62fb      	str	r3, [r7, #44]	; 0x2c
 800482a:	e004      	b.n	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800482c:	6a3b      	ldr	r3, [r7, #32]
 800482e:	4a33      	ldr	r2, [pc, #204]	; (80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004830:	fb02 f303 	mul.w	r3, r2, r3
 8004834:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004836:	4b2f      	ldr	r3, [pc, #188]	; (80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800483e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004842:	d102      	bne.n	800484a <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8004844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004846:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004848:	e04a      	b.n	80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 800484a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	4a2c      	ldr	r2, [pc, #176]	; (8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8004850:	fba2 2303 	umull	r2, r3, r2, r3
 8004854:	085b      	lsrs	r3, r3, #1
 8004856:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004858:	e042      	b.n	80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 800485a:	4b26      	ldr	r3, [pc, #152]	; (80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004866:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800486a:	d108      	bne.n	800487e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d003      	beq.n	800487e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8004876:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800487a:	62bb      	str	r3, [r7, #40]	; 0x28
 800487c:	e01f      	b.n	80048be <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004888:	d109      	bne.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 800488a:	4b1a      	ldr	r3, [pc, #104]	; (80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800488c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8004896:	f649 4340 	movw	r3, #40000	; 0x9c40
 800489a:	62bb      	str	r3, [r7, #40]	; 0x28
 800489c:	e00f      	b.n	80048be <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048a8:	d11c      	bne.n	80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80048aa:	4b12      	ldr	r3, [pc, #72]	; (80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d016      	beq.n	80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 80048b6:	f24f 4324 	movw	r3, #62500	; 0xf424
 80048ba:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80048bc:	e012      	b.n	80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80048be:	e011      	b.n	80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80048c0:	f7ff fe78 	bl	80045b4 <HAL_RCC_GetPCLK2Freq>
 80048c4:	4602      	mov	r2, r0
 80048c6:	4b0b      	ldr	r3, [pc, #44]	; (80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	0b9b      	lsrs	r3, r3, #14
 80048cc:	f003 0303 	and.w	r3, r3, #3
 80048d0:	3301      	adds	r3, #1
 80048d2:	005b      	lsls	r3, r3, #1
 80048d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80048da:	e004      	b.n	80048e6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80048dc:	bf00      	nop
 80048de:	e002      	b.n	80048e6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80048e0:	bf00      	nop
 80048e2:	e000      	b.n	80048e6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80048e4:	bf00      	nop
    }
  }
  return (frequency);
 80048e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3734      	adds	r7, #52	; 0x34
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd90      	pop	{r4, r7, pc}
 80048f0:	0800a4ac 	.word	0x0800a4ac
 80048f4:	40021000 	.word	0x40021000
 80048f8:	007a1200 	.word	0x007a1200
 80048fc:	003d0900 	.word	0x003d0900
 8004900:	aaaaaaab 	.word	0xaaaaaaab

08004904 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e041      	b.n	800499a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d106      	bne.n	8004930 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f7fc fab4 	bl	8000e98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2202      	movs	r2, #2
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	3304      	adds	r3, #4
 8004940:	4619      	mov	r1, r3
 8004942:	4610      	mov	r0, r2
 8004944:	f000 f93c 	bl	8004bc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3708      	adds	r7, #8
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
	...

080049a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d001      	beq.n	80049bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e032      	b.n	8004a22 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2202      	movs	r2, #2
 80049c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a18      	ldr	r2, [pc, #96]	; (8004a2c <HAL_TIM_Base_Start+0x88>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d00e      	beq.n	80049ec <HAL_TIM_Base_Start+0x48>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049d6:	d009      	beq.n	80049ec <HAL_TIM_Base_Start+0x48>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a14      	ldr	r2, [pc, #80]	; (8004a30 <HAL_TIM_Base_Start+0x8c>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d004      	beq.n	80049ec <HAL_TIM_Base_Start+0x48>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a13      	ldr	r2, [pc, #76]	; (8004a34 <HAL_TIM_Base_Start+0x90>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d111      	bne.n	8004a10 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f003 0307 	and.w	r3, r3, #7
 80049f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2b06      	cmp	r3, #6
 80049fc:	d010      	beq.n	8004a20 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f042 0201 	orr.w	r2, r2, #1
 8004a0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a0e:	e007      	b.n	8004a20 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 0201 	orr.w	r2, r2, #1
 8004a1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3714      	adds	r7, #20
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bc80      	pop	{r7}
 8004a2a:	4770      	bx	lr
 8004a2c:	40012c00 	.word	0x40012c00
 8004a30:	40000400 	.word	0x40000400
 8004a34:	40000800 	.word	0x40000800

08004a38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d101      	bne.n	8004a50 <HAL_TIM_ConfigClockSource+0x18>
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	e0b3      	b.n	8004bb8 <HAL_TIM_ConfigClockSource+0x180>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a76:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a88:	d03e      	beq.n	8004b08 <HAL_TIM_ConfigClockSource+0xd0>
 8004a8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a8e:	f200 8087 	bhi.w	8004ba0 <HAL_TIM_ConfigClockSource+0x168>
 8004a92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a96:	f000 8085 	beq.w	8004ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8004a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a9e:	d87f      	bhi.n	8004ba0 <HAL_TIM_ConfigClockSource+0x168>
 8004aa0:	2b70      	cmp	r3, #112	; 0x70
 8004aa2:	d01a      	beq.n	8004ada <HAL_TIM_ConfigClockSource+0xa2>
 8004aa4:	2b70      	cmp	r3, #112	; 0x70
 8004aa6:	d87b      	bhi.n	8004ba0 <HAL_TIM_ConfigClockSource+0x168>
 8004aa8:	2b60      	cmp	r3, #96	; 0x60
 8004aaa:	d050      	beq.n	8004b4e <HAL_TIM_ConfigClockSource+0x116>
 8004aac:	2b60      	cmp	r3, #96	; 0x60
 8004aae:	d877      	bhi.n	8004ba0 <HAL_TIM_ConfigClockSource+0x168>
 8004ab0:	2b50      	cmp	r3, #80	; 0x50
 8004ab2:	d03c      	beq.n	8004b2e <HAL_TIM_ConfigClockSource+0xf6>
 8004ab4:	2b50      	cmp	r3, #80	; 0x50
 8004ab6:	d873      	bhi.n	8004ba0 <HAL_TIM_ConfigClockSource+0x168>
 8004ab8:	2b40      	cmp	r3, #64	; 0x40
 8004aba:	d058      	beq.n	8004b6e <HAL_TIM_ConfigClockSource+0x136>
 8004abc:	2b40      	cmp	r3, #64	; 0x40
 8004abe:	d86f      	bhi.n	8004ba0 <HAL_TIM_ConfigClockSource+0x168>
 8004ac0:	2b30      	cmp	r3, #48	; 0x30
 8004ac2:	d064      	beq.n	8004b8e <HAL_TIM_ConfigClockSource+0x156>
 8004ac4:	2b30      	cmp	r3, #48	; 0x30
 8004ac6:	d86b      	bhi.n	8004ba0 <HAL_TIM_ConfigClockSource+0x168>
 8004ac8:	2b20      	cmp	r3, #32
 8004aca:	d060      	beq.n	8004b8e <HAL_TIM_ConfigClockSource+0x156>
 8004acc:	2b20      	cmp	r3, #32
 8004ace:	d867      	bhi.n	8004ba0 <HAL_TIM_ConfigClockSource+0x168>
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d05c      	beq.n	8004b8e <HAL_TIM_ConfigClockSource+0x156>
 8004ad4:	2b10      	cmp	r3, #16
 8004ad6:	d05a      	beq.n	8004b8e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004ad8:	e062      	b.n	8004ba0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6818      	ldr	r0, [r3, #0]
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	6899      	ldr	r1, [r3, #8]
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	685a      	ldr	r2, [r3, #4]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	f000 f942 	bl	8004d72 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004afc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	609a      	str	r2, [r3, #8]
      break;
 8004b06:	e04e      	b.n	8004ba6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6818      	ldr	r0, [r3, #0]
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	6899      	ldr	r1, [r3, #8]
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	685a      	ldr	r2, [r3, #4]
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	f000 f92b 	bl	8004d72 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	689a      	ldr	r2, [r3, #8]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b2a:	609a      	str	r2, [r3, #8]
      break;
 8004b2c:	e03b      	b.n	8004ba6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6818      	ldr	r0, [r3, #0]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	6859      	ldr	r1, [r3, #4]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	f000 f8a2 	bl	8004c84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2150      	movs	r1, #80	; 0x50
 8004b46:	4618      	mov	r0, r3
 8004b48:	f000 f8f9 	bl	8004d3e <TIM_ITRx_SetConfig>
      break;
 8004b4c:	e02b      	b.n	8004ba6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6818      	ldr	r0, [r3, #0]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	6859      	ldr	r1, [r3, #4]
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	f000 f8c0 	bl	8004ce0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2160      	movs	r1, #96	; 0x60
 8004b66:	4618      	mov	r0, r3
 8004b68:	f000 f8e9 	bl	8004d3e <TIM_ITRx_SetConfig>
      break;
 8004b6c:	e01b      	b.n	8004ba6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6818      	ldr	r0, [r3, #0]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	6859      	ldr	r1, [r3, #4]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	f000 f882 	bl	8004c84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2140      	movs	r1, #64	; 0x40
 8004b86:	4618      	mov	r0, r3
 8004b88:	f000 f8d9 	bl	8004d3e <TIM_ITRx_SetConfig>
      break;
 8004b8c:	e00b      	b.n	8004ba6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4619      	mov	r1, r3
 8004b98:	4610      	mov	r0, r2
 8004b9a:	f000 f8d0 	bl	8004d3e <TIM_ITRx_SetConfig>
        break;
 8004b9e:	e002      	b.n	8004ba6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004ba0:	bf00      	nop
 8004ba2:	e000      	b.n	8004ba6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004ba4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3710      	adds	r7, #16
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a29      	ldr	r2, [pc, #164]	; (8004c78 <TIM_Base_SetConfig+0xb8>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d00b      	beq.n	8004bf0 <TIM_Base_SetConfig+0x30>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bde:	d007      	beq.n	8004bf0 <TIM_Base_SetConfig+0x30>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a26      	ldr	r2, [pc, #152]	; (8004c7c <TIM_Base_SetConfig+0xbc>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d003      	beq.n	8004bf0 <TIM_Base_SetConfig+0x30>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a25      	ldr	r2, [pc, #148]	; (8004c80 <TIM_Base_SetConfig+0xc0>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d108      	bne.n	8004c02 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a1c      	ldr	r2, [pc, #112]	; (8004c78 <TIM_Base_SetConfig+0xb8>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d00b      	beq.n	8004c22 <TIM_Base_SetConfig+0x62>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c10:	d007      	beq.n	8004c22 <TIM_Base_SetConfig+0x62>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a19      	ldr	r2, [pc, #100]	; (8004c7c <TIM_Base_SetConfig+0xbc>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d003      	beq.n	8004c22 <TIM_Base_SetConfig+0x62>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a18      	ldr	r2, [pc, #96]	; (8004c80 <TIM_Base_SetConfig+0xc0>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d108      	bne.n	8004c34 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	689a      	ldr	r2, [r3, #8]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a07      	ldr	r2, [pc, #28]	; (8004c78 <TIM_Base_SetConfig+0xb8>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d103      	bne.n	8004c68 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	691a      	ldr	r2, [r3, #16]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	615a      	str	r2, [r3, #20]
}
 8004c6e:	bf00      	nop
 8004c70:	3714      	adds	r7, #20
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bc80      	pop	{r7}
 8004c76:	4770      	bx	lr
 8004c78:	40012c00 	.word	0x40012c00
 8004c7c:	40000400 	.word	0x40000400
 8004c80:	40000800 	.word	0x40000800

08004c84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b087      	sub	sp, #28
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6a1b      	ldr	r3, [r3, #32]
 8004c94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	f023 0201 	bic.w	r2, r3, #1
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	011b      	lsls	r3, r3, #4
 8004cb4:	693a      	ldr	r2, [r7, #16]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f023 030a 	bic.w	r3, r3, #10
 8004cc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	621a      	str	r2, [r3, #32]
}
 8004cd6:	bf00      	nop
 8004cd8:	371c      	adds	r7, #28
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bc80      	pop	{r7}
 8004cde:	4770      	bx	lr

08004ce0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b087      	sub	sp, #28
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6a1b      	ldr	r3, [r3, #32]
 8004cf0:	f023 0210 	bic.w	r2, r3, #16
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d0a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	031b      	lsls	r3, r3, #12
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d1c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	011b      	lsls	r3, r3, #4
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	621a      	str	r2, [r3, #32]
}
 8004d34:	bf00      	nop
 8004d36:	371c      	adds	r7, #28
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bc80      	pop	{r7}
 8004d3c:	4770      	bx	lr

08004d3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b085      	sub	sp, #20
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
 8004d46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d56:	683a      	ldr	r2, [r7, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	f043 0307 	orr.w	r3, r3, #7
 8004d60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	609a      	str	r2, [r3, #8]
}
 8004d68:	bf00      	nop
 8004d6a:	3714      	adds	r7, #20
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bc80      	pop	{r7}
 8004d70:	4770      	bx	lr

08004d72 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d72:	b480      	push	{r7}
 8004d74:	b087      	sub	sp, #28
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	60f8      	str	r0, [r7, #12]
 8004d7a:	60b9      	str	r1, [r7, #8]
 8004d7c:	607a      	str	r2, [r7, #4]
 8004d7e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d8c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	021a      	lsls	r2, r3, #8
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	431a      	orrs	r2, r3
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	609a      	str	r2, [r3, #8]
}
 8004da6:	bf00      	nop
 8004da8:	371c      	adds	r7, #28
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bc80      	pop	{r7}
 8004dae:	4770      	bx	lr

08004db0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d101      	bne.n	8004dc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	e046      	b.n	8004e56 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a16      	ldr	r2, [pc, #88]	; (8004e60 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d00e      	beq.n	8004e2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e14:	d009      	beq.n	8004e2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a12      	ldr	r2, [pc, #72]	; (8004e64 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d004      	beq.n	8004e2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a10      	ldr	r2, [pc, #64]	; (8004e68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d10c      	bne.n	8004e44 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3714      	adds	r7, #20
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bc80      	pop	{r7}
 8004e5e:	4770      	bx	lr
 8004e60:	40012c00 	.word	0x40012c00
 8004e64:	40000400 	.word	0x40000400
 8004e68:	40000800 	.word	0x40000800

08004e6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004e6c:	b084      	sub	sp, #16
 8004e6e:	b480      	push	{r7}
 8004e70:	b083      	sub	sp, #12
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
 8004e76:	f107 0014 	add.w	r0, r7, #20
 8004e7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bc80      	pop	{r7}
 8004e88:	b004      	add	sp, #16
 8004e8a:	4770      	bx	lr

08004e8c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004e9c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004ea0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3714      	adds	r7, #20
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bc80      	pop	{r7}
 8004eb6:	4770      	bx	lr

08004eb8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004ec0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004ec4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	43db      	mvns	r3, r3
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3714      	adds	r7, #20
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bc80      	pop	{r7}
 8004eea:	4770      	bx	lr

08004eec <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	370c      	adds	r7, #12
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bc80      	pop	{r7}
 8004f02:	4770      	bx	lr

08004f04 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004f04:	b084      	sub	sp, #16
 8004f06:	b480      	push	{r7}
 8004f08:	b083      	sub	sp, #12
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
 8004f0e:	f107 0014 	add.w	r0, r7, #20
 8004f12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bc80      	pop	{r7}
 8004f40:	b004      	add	sp, #16
 8004f42:	4770      	bx	lr

08004f44 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b09b      	sub	sp, #108	; 0x6c
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	4413      	add	r3, r2
 8004f5e:	881b      	ldrh	r3, [r3, #0]
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f6a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	78db      	ldrb	r3, [r3, #3]
 8004f72:	2b03      	cmp	r3, #3
 8004f74:	d81f      	bhi.n	8004fb6 <USB_ActivateEndpoint+0x72>
 8004f76:	a201      	add	r2, pc, #4	; (adr r2, 8004f7c <USB_ActivateEndpoint+0x38>)
 8004f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7c:	08004f8d 	.word	0x08004f8d
 8004f80:	08004fa9 	.word	0x08004fa9
 8004f84:	08004fbf 	.word	0x08004fbf
 8004f88:	08004f9b 	.word	0x08004f9b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004f8c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004f90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f94:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004f98:	e012      	b.n	8004fc0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004f9a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004f9e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004fa2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004fa6:	e00b      	b.n	8004fc0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004fa8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004fac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004fb0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004fb4:	e004      	b.n	8004fc0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004fbc:	e000      	b.n	8004fc0 <USB_ActivateEndpoint+0x7c>
      break;
 8004fbe:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	441a      	add	r2, r3
 8004fca:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004fce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4413      	add	r3, r2
 8004fec:	881b      	ldrh	r3, [r3, #0]
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff8:	b29a      	uxth	r2, r3
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	4313      	orrs	r3, r2
 8005002:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	441a      	add	r2, r3
 8005010:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005014:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005018:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800501c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005024:	b29b      	uxth	r3, r3
 8005026:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	7b1b      	ldrb	r3, [r3, #12]
 800502c:	2b00      	cmp	r3, #0
 800502e:	f040 8149 	bne.w	80052c4 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	785b      	ldrb	r3, [r3, #1]
 8005036:	2b00      	cmp	r3, #0
 8005038:	f000 8084 	beq.w	8005144 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	617b      	str	r3, [r7, #20]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005046:	b29b      	uxth	r3, r3
 8005048:	461a      	mov	r2, r3
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	4413      	add	r3, r2
 800504e:	617b      	str	r3, [r7, #20]
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	011a      	lsls	r2, r3, #4
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	4413      	add	r3, r2
 800505a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800505e:	613b      	str	r3, [r7, #16]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	88db      	ldrh	r3, [r3, #6]
 8005064:	085b      	lsrs	r3, r3, #1
 8005066:	b29b      	uxth	r3, r3
 8005068:	005b      	lsls	r3, r3, #1
 800506a:	b29a      	uxth	r2, r3
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	4413      	add	r3, r2
 800507a:	881b      	ldrh	r3, [r3, #0]
 800507c:	81fb      	strh	r3, [r7, #14]
 800507e:	89fb      	ldrh	r3, [r7, #14]
 8005080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005084:	2b00      	cmp	r3, #0
 8005086:	d01b      	beq.n	80050c0 <USB_ActivateEndpoint+0x17c>
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	4413      	add	r3, r2
 8005092:	881b      	ldrh	r3, [r3, #0]
 8005094:	b29b      	uxth	r3, r3
 8005096:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800509a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800509e:	81bb      	strh	r3, [r7, #12]
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	441a      	add	r2, r3
 80050aa:	89bb      	ldrh	r3, [r7, #12]
 80050ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050bc:	b29b      	uxth	r3, r3
 80050be:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	78db      	ldrb	r3, [r3, #3]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d020      	beq.n	800510a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	881b      	ldrh	r3, [r3, #0]
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050de:	813b      	strh	r3, [r7, #8]
 80050e0:	893b      	ldrh	r3, [r7, #8]
 80050e2:	f083 0320 	eor.w	r3, r3, #32
 80050e6:	813b      	strh	r3, [r7, #8]
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	441a      	add	r2, r3
 80050f2:	893b      	ldrh	r3, [r7, #8]
 80050f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005104:	b29b      	uxth	r3, r3
 8005106:	8013      	strh	r3, [r2, #0]
 8005108:	e27f      	b.n	800560a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	4413      	add	r3, r2
 8005114:	881b      	ldrh	r3, [r3, #0]
 8005116:	b29b      	uxth	r3, r3
 8005118:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800511c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005120:	817b      	strh	r3, [r7, #10]
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	441a      	add	r2, r3
 800512c:	897b      	ldrh	r3, [r7, #10]
 800512e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005132:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005136:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800513a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800513e:	b29b      	uxth	r3, r3
 8005140:	8013      	strh	r3, [r2, #0]
 8005142:	e262      	b.n	800560a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800514e:	b29b      	uxth	r3, r3
 8005150:	461a      	mov	r2, r3
 8005152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005154:	4413      	add	r3, r2
 8005156:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	011a      	lsls	r2, r3, #4
 800515e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005160:	4413      	add	r3, r2
 8005162:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005166:	62bb      	str	r3, [r7, #40]	; 0x28
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	88db      	ldrh	r3, [r3, #6]
 800516c:	085b      	lsrs	r3, r3, #1
 800516e:	b29b      	uxth	r3, r3
 8005170:	005b      	lsls	r3, r3, #1
 8005172:	b29a      	uxth	r2, r3
 8005174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005176:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	627b      	str	r3, [r7, #36]	; 0x24
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005182:	b29b      	uxth	r3, r3
 8005184:	461a      	mov	r2, r3
 8005186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005188:	4413      	add	r3, r2
 800518a:	627b      	str	r3, [r7, #36]	; 0x24
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	011a      	lsls	r2, r3, #4
 8005192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005194:	4413      	add	r3, r2
 8005196:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800519a:	623b      	str	r3, [r7, #32]
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d112      	bne.n	80051ca <USB_ActivateEndpoint+0x286>
 80051a4:	6a3b      	ldr	r3, [r7, #32]
 80051a6:	881b      	ldrh	r3, [r3, #0]
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051ae:	b29a      	uxth	r2, r3
 80051b0:	6a3b      	ldr	r3, [r7, #32]
 80051b2:	801a      	strh	r2, [r3, #0]
 80051b4:	6a3b      	ldr	r3, [r7, #32]
 80051b6:	881b      	ldrh	r3, [r3, #0]
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	6a3b      	ldr	r3, [r7, #32]
 80051c6:	801a      	strh	r2, [r3, #0]
 80051c8:	e02f      	b.n	800522a <USB_ActivateEndpoint+0x2e6>
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	2b3e      	cmp	r3, #62	; 0x3e
 80051d0:	d813      	bhi.n	80051fa <USB_ActivateEndpoint+0x2b6>
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	085b      	lsrs	r3, r3, #1
 80051d8:	663b      	str	r3, [r7, #96]	; 0x60
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d002      	beq.n	80051ec <USB_ActivateEndpoint+0x2a8>
 80051e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051e8:	3301      	adds	r3, #1
 80051ea:	663b      	str	r3, [r7, #96]	; 0x60
 80051ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	029b      	lsls	r3, r3, #10
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	6a3b      	ldr	r3, [r7, #32]
 80051f6:	801a      	strh	r2, [r3, #0]
 80051f8:	e017      	b.n	800522a <USB_ActivateEndpoint+0x2e6>
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	095b      	lsrs	r3, r3, #5
 8005200:	663b      	str	r3, [r7, #96]	; 0x60
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	f003 031f 	and.w	r3, r3, #31
 800520a:	2b00      	cmp	r3, #0
 800520c:	d102      	bne.n	8005214 <USB_ActivateEndpoint+0x2d0>
 800520e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005210:	3b01      	subs	r3, #1
 8005212:	663b      	str	r3, [r7, #96]	; 0x60
 8005214:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005216:	b29b      	uxth	r3, r3
 8005218:	029b      	lsls	r3, r3, #10
 800521a:	b29b      	uxth	r3, r3
 800521c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005220:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005224:	b29a      	uxth	r2, r3
 8005226:	6a3b      	ldr	r3, [r7, #32]
 8005228:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	4413      	add	r3, r2
 8005234:	881b      	ldrh	r3, [r3, #0]
 8005236:	83fb      	strh	r3, [r7, #30]
 8005238:	8bfb      	ldrh	r3, [r7, #30]
 800523a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d01b      	beq.n	800527a <USB_ActivateEndpoint+0x336>
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	4413      	add	r3, r2
 800524c:	881b      	ldrh	r3, [r3, #0]
 800524e:	b29b      	uxth	r3, r3
 8005250:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005258:	83bb      	strh	r3, [r7, #28]
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	441a      	add	r2, r3
 8005264:	8bbb      	ldrh	r3, [r7, #28]
 8005266:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800526a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800526e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005276:	b29b      	uxth	r3, r3
 8005278:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	4413      	add	r3, r2
 8005284:	881b      	ldrh	r3, [r3, #0]
 8005286:	b29b      	uxth	r3, r3
 8005288:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800528c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005290:	837b      	strh	r3, [r7, #26]
 8005292:	8b7b      	ldrh	r3, [r7, #26]
 8005294:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005298:	837b      	strh	r3, [r7, #26]
 800529a:	8b7b      	ldrh	r3, [r7, #26]
 800529c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80052a0:	837b      	strh	r3, [r7, #26]
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	441a      	add	r2, r3
 80052ac:	8b7b      	ldrh	r3, [r7, #26]
 80052ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052be:	b29b      	uxth	r3, r3
 80052c0:	8013      	strh	r3, [r2, #0]
 80052c2:	e1a2      	b.n	800560a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	4413      	add	r3, r2
 80052ce:	881b      	ldrh	r3, [r3, #0]
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052da:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	441a      	add	r2, r3
 80052e8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80052ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052f4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80052f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	65bb      	str	r3, [r7, #88]	; 0x58
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800530a:	b29b      	uxth	r3, r3
 800530c:	461a      	mov	r2, r3
 800530e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005310:	4413      	add	r3, r2
 8005312:	65bb      	str	r3, [r7, #88]	; 0x58
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	011a      	lsls	r2, r3, #4
 800531a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800531c:	4413      	add	r3, r2
 800531e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005322:	657b      	str	r3, [r7, #84]	; 0x54
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	891b      	ldrh	r3, [r3, #8]
 8005328:	085b      	lsrs	r3, r3, #1
 800532a:	b29b      	uxth	r3, r3
 800532c:	005b      	lsls	r3, r3, #1
 800532e:	b29a      	uxth	r2, r3
 8005330:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005332:	801a      	strh	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	653b      	str	r3, [r7, #80]	; 0x50
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800533e:	b29b      	uxth	r3, r3
 8005340:	461a      	mov	r2, r3
 8005342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005344:	4413      	add	r3, r2
 8005346:	653b      	str	r3, [r7, #80]	; 0x50
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	011a      	lsls	r2, r3, #4
 800534e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005350:	4413      	add	r3, r2
 8005352:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005356:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	895b      	ldrh	r3, [r3, #10]
 800535c:	085b      	lsrs	r3, r3, #1
 800535e:	b29b      	uxth	r3, r3
 8005360:	005b      	lsls	r3, r3, #1
 8005362:	b29a      	uxth	r2, r3
 8005364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005366:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	785b      	ldrb	r3, [r3, #1]
 800536c:	2b00      	cmp	r3, #0
 800536e:	f040 8091 	bne.w	8005494 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	4413      	add	r3, r2
 800537c:	881b      	ldrh	r3, [r3, #0]
 800537e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005380:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005382:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d01b      	beq.n	80053c2 <USB_ActivateEndpoint+0x47e>
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	4413      	add	r3, r2
 8005394:	881b      	ldrh	r3, [r3, #0]
 8005396:	b29b      	uxth	r3, r3
 8005398:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800539c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	441a      	add	r2, r3
 80053ac:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80053ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053be:	b29b      	uxth	r3, r3
 80053c0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	4413      	add	r3, r2
 80053cc:	881b      	ldrh	r3, [r3, #0]
 80053ce:	873b      	strh	r3, [r7, #56]	; 0x38
 80053d0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80053d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d01b      	beq.n	8005412 <USB_ActivateEndpoint+0x4ce>
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	4413      	add	r3, r2
 80053e4:	881b      	ldrh	r3, [r3, #0]
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	441a      	add	r2, r3
 80053fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80053fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005402:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800540a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800540e:	b29b      	uxth	r3, r3
 8005410:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	4413      	add	r3, r2
 800541c:	881b      	ldrh	r3, [r3, #0]
 800541e:	b29b      	uxth	r3, r3
 8005420:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005428:	86bb      	strh	r3, [r7, #52]	; 0x34
 800542a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800542c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005430:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005432:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005434:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005438:	86bb      	strh	r3, [r7, #52]	; 0x34
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	441a      	add	r2, r3
 8005444:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005446:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800544a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800544e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005456:	b29b      	uxth	r3, r3
 8005458:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	4413      	add	r3, r2
 8005464:	881b      	ldrh	r3, [r3, #0]
 8005466:	b29b      	uxth	r3, r3
 8005468:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800546c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005470:	867b      	strh	r3, [r7, #50]	; 0x32
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	441a      	add	r2, r3
 800547c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800547e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005482:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800548a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800548e:	b29b      	uxth	r3, r3
 8005490:	8013      	strh	r3, [r2, #0]
 8005492:	e0ba      	b.n	800560a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4413      	add	r3, r2
 800549e:	881b      	ldrh	r3, [r3, #0]
 80054a0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80054a4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80054a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d01d      	beq.n	80054ec <USB_ActivateEndpoint+0x5a8>
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	4413      	add	r3, r2
 80054ba:	881b      	ldrh	r3, [r3, #0]
 80054bc:	b29b      	uxth	r3, r3
 80054be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	441a      	add	r2, r3
 80054d4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80054d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	4413      	add	r3, r2
 80054f6:	881b      	ldrh	r3, [r3, #0]
 80054f8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80054fc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005504:	2b00      	cmp	r3, #0
 8005506:	d01d      	beq.n	8005544 <USB_ActivateEndpoint+0x600>
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4413      	add	r3, r2
 8005512:	881b      	ldrh	r3, [r3, #0]
 8005514:	b29b      	uxth	r3, r3
 8005516:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800551a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800551e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	441a      	add	r2, r3
 800552c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005530:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005534:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005538:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800553c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005540:	b29b      	uxth	r3, r3
 8005542:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	78db      	ldrb	r3, [r3, #3]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d024      	beq.n	8005596 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	4413      	add	r3, r2
 8005556:	881b      	ldrh	r3, [r3, #0]
 8005558:	b29b      	uxth	r3, r3
 800555a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800555e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005562:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005566:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800556a:	f083 0320 	eor.w	r3, r3, #32
 800556e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	441a      	add	r2, r3
 800557c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005580:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005584:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005588:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800558c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005590:	b29b      	uxth	r3, r3
 8005592:	8013      	strh	r3, [r2, #0]
 8005594:	e01d      	b.n	80055d2 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	4413      	add	r3, r2
 80055a0:	881b      	ldrh	r3, [r3, #0]
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055ac:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	441a      	add	r2, r3
 80055ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80055be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	4413      	add	r3, r2
 80055dc:	881b      	ldrh	r3, [r3, #0]
 80055de:	b29b      	uxth	r3, r3
 80055e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055e8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	441a      	add	r2, r3
 80055f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80055f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005606:	b29b      	uxth	r3, r3
 8005608:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800560a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800560e:	4618      	mov	r0, r3
 8005610:	376c      	adds	r7, #108	; 0x6c
 8005612:	46bd      	mov	sp, r7
 8005614:	bc80      	pop	{r7}
 8005616:	4770      	bx	lr

08005618 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005618:	b480      	push	{r7}
 800561a:	b08d      	sub	sp, #52	; 0x34
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	7b1b      	ldrb	r3, [r3, #12]
 8005626:	2b00      	cmp	r3, #0
 8005628:	f040 808e 	bne.w	8005748 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	785b      	ldrb	r3, [r3, #1]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d044      	beq.n	80056be <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	4413      	add	r3, r2
 800563e:	881b      	ldrh	r3, [r3, #0]
 8005640:	81bb      	strh	r3, [r7, #12]
 8005642:	89bb      	ldrh	r3, [r7, #12]
 8005644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005648:	2b00      	cmp	r3, #0
 800564a:	d01b      	beq.n	8005684 <USB_DeactivateEndpoint+0x6c>
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	4413      	add	r3, r2
 8005656:	881b      	ldrh	r3, [r3, #0]
 8005658:	b29b      	uxth	r3, r3
 800565a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800565e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005662:	817b      	strh	r3, [r7, #10]
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	441a      	add	r2, r3
 800566e:	897b      	ldrh	r3, [r7, #10]
 8005670:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005674:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005678:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800567c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005680:	b29b      	uxth	r3, r3
 8005682:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	4413      	add	r3, r2
 800568e:	881b      	ldrh	r3, [r3, #0]
 8005690:	b29b      	uxth	r3, r3
 8005692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005696:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800569a:	813b      	strh	r3, [r7, #8]
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	441a      	add	r2, r3
 80056a6:	893b      	ldrh	r3, [r7, #8]
 80056a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	8013      	strh	r3, [r2, #0]
 80056bc:	e192      	b.n	80059e4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	4413      	add	r3, r2
 80056c8:	881b      	ldrh	r3, [r3, #0]
 80056ca:	827b      	strh	r3, [r7, #18]
 80056cc:	8a7b      	ldrh	r3, [r7, #18]
 80056ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d01b      	beq.n	800570e <USB_DeactivateEndpoint+0xf6>
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	4413      	add	r3, r2
 80056e0:	881b      	ldrh	r3, [r3, #0]
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ec:	823b      	strh	r3, [r7, #16]
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	441a      	add	r2, r3
 80056f8:	8a3b      	ldrh	r3, [r7, #16]
 80056fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005702:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800570a:	b29b      	uxth	r3, r3
 800570c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	4413      	add	r3, r2
 8005718:	881b      	ldrh	r3, [r3, #0]
 800571a:	b29b      	uxth	r3, r3
 800571c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005724:	81fb      	strh	r3, [r7, #14]
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	441a      	add	r2, r3
 8005730:	89fb      	ldrh	r3, [r7, #14]
 8005732:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005736:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800573a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800573e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005742:	b29b      	uxth	r3, r3
 8005744:	8013      	strh	r3, [r2, #0]
 8005746:	e14d      	b.n	80059e4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	785b      	ldrb	r3, [r3, #1]
 800574c:	2b00      	cmp	r3, #0
 800574e:	f040 80a5 	bne.w	800589c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	4413      	add	r3, r2
 800575c:	881b      	ldrh	r3, [r3, #0]
 800575e:	843b      	strh	r3, [r7, #32]
 8005760:	8c3b      	ldrh	r3, [r7, #32]
 8005762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d01b      	beq.n	80057a2 <USB_DeactivateEndpoint+0x18a>
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	4413      	add	r3, r2
 8005774:	881b      	ldrh	r3, [r3, #0]
 8005776:	b29b      	uxth	r3, r3
 8005778:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800577c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005780:	83fb      	strh	r3, [r7, #30]
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	441a      	add	r2, r3
 800578c:	8bfb      	ldrh	r3, [r7, #30]
 800578e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005792:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005796:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800579a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800579e:	b29b      	uxth	r3, r3
 80057a0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	4413      	add	r3, r2
 80057ac:	881b      	ldrh	r3, [r3, #0]
 80057ae:	83bb      	strh	r3, [r7, #28]
 80057b0:	8bbb      	ldrh	r3, [r7, #28]
 80057b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d01b      	beq.n	80057f2 <USB_DeactivateEndpoint+0x1da>
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	4413      	add	r3, r2
 80057c4:	881b      	ldrh	r3, [r3, #0]
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057d0:	837b      	strh	r3, [r7, #26]
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	441a      	add	r2, r3
 80057dc:	8b7b      	ldrh	r3, [r7, #26]
 80057de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	4413      	add	r3, r2
 80057fc:	881b      	ldrh	r3, [r3, #0]
 80057fe:	b29b      	uxth	r3, r3
 8005800:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005808:	833b      	strh	r3, [r7, #24]
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	441a      	add	r2, r3
 8005814:	8b3b      	ldrh	r3, [r7, #24]
 8005816:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800581a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800581e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005822:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005826:	b29b      	uxth	r3, r3
 8005828:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	4413      	add	r3, r2
 8005834:	881b      	ldrh	r3, [r3, #0]
 8005836:	b29b      	uxth	r3, r3
 8005838:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800583c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005840:	82fb      	strh	r3, [r7, #22]
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	441a      	add	r2, r3
 800584c:	8afb      	ldrh	r3, [r7, #22]
 800584e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005852:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800585a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800585e:	b29b      	uxth	r3, r3
 8005860:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	4413      	add	r3, r2
 800586c:	881b      	ldrh	r3, [r3, #0]
 800586e:	b29b      	uxth	r3, r3
 8005870:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005874:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005878:	82bb      	strh	r3, [r7, #20]
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	441a      	add	r2, r3
 8005884:	8abb      	ldrh	r3, [r7, #20]
 8005886:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800588a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800588e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005896:	b29b      	uxth	r3, r3
 8005898:	8013      	strh	r3, [r2, #0]
 800589a:	e0a3      	b.n	80059e4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	4413      	add	r3, r2
 80058a6:	881b      	ldrh	r3, [r3, #0]
 80058a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80058aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80058ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d01b      	beq.n	80058ec <USB_DeactivateEndpoint+0x2d4>
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	4413      	add	r3, r2
 80058be:	881b      	ldrh	r3, [r3, #0]
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ca:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	441a      	add	r2, r3
 80058d6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80058d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	4413      	add	r3, r2
 80058f6:	881b      	ldrh	r3, [r3, #0]
 80058f8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80058fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80058fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005900:	2b00      	cmp	r3, #0
 8005902:	d01b      	beq.n	800593c <USB_DeactivateEndpoint+0x324>
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	4413      	add	r3, r2
 800590e:	881b      	ldrh	r3, [r3, #0]
 8005910:	b29b      	uxth	r3, r3
 8005912:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800591a:	853b      	strh	r3, [r7, #40]	; 0x28
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	441a      	add	r2, r3
 8005926:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005928:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800592c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005930:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005934:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005938:	b29b      	uxth	r3, r3
 800593a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	4413      	add	r3, r2
 8005946:	881b      	ldrh	r3, [r3, #0]
 8005948:	b29b      	uxth	r3, r3
 800594a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800594e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005952:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	441a      	add	r2, r3
 800595e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005960:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005964:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005968:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800596c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005970:	b29b      	uxth	r3, r3
 8005972:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	4413      	add	r3, r2
 800597e:	881b      	ldrh	r3, [r3, #0]
 8005980:	b29b      	uxth	r3, r3
 8005982:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005986:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800598a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	441a      	add	r2, r3
 8005996:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005998:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800599c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	4413      	add	r3, r2
 80059b6:	881b      	ldrh	r3, [r3, #0]
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059c2:	847b      	strh	r3, [r7, #34]	; 0x22
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	441a      	add	r2, r3
 80059ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80059d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3734      	adds	r7, #52	; 0x34
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bc80      	pop	{r7}
 80059ee:	4770      	bx	lr

080059f0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b0cc      	sub	sp, #304	; 0x130
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059fe:	6018      	str	r0, [r3, #0]
 8005a00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a08:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	785b      	ldrb	r3, [r3, #1]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	f041 817d 	bne.w	8006d16 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005a1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	699a      	ldr	r2, [r3, #24]
 8005a28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d908      	bls.n	8005a4a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005a38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005a48:	e007      	b.n	8005a5a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005a4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005a5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	7b1b      	ldrb	r3, [r3, #12]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d152      	bne.n	8005b10 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005a6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6959      	ldr	r1, [r3, #20]
 8005a76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	88da      	ldrh	r2, [r3, #6]
 8005a82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005a8c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005a90:	6800      	ldr	r0, [r0, #0]
 8005a92:	f001 ff23 	bl	80078dc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005a96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a9a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005a9e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005aa2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005aa6:	6812      	ldr	r2, [r2, #0]
 8005aa8:	601a      	str	r2, [r3, #0]
 8005aaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	4619      	mov	r1, r3
 8005abc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ac0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005ac4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005ac8:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8005acc:	6812      	ldr	r2, [r2, #0]
 8005ace:	440a      	add	r2, r1
 8005ad0:	601a      	str	r2, [r3, #0]
 8005ad2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ad6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	011a      	lsls	r2, r3, #4
 8005ae0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ae4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4413      	add	r3, r2
 8005aec:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005af0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005af4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005af8:	601a      	str	r2, [r3, #0]
 8005afa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b04:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	801a      	strh	r2, [r3, #0]
 8005b0c:	f001 b8b5 	b.w	8006c7a <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005b10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	78db      	ldrb	r3, [r3, #3]
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	f040 84c6 	bne.w	80064ae <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005b22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	6a1a      	ldr	r2, [r3, #32]
 8005b2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	f240 8443 	bls.w	80063c6 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005b40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	4413      	add	r3, r2
 8005b5a:	881b      	ldrh	r3, [r3, #0]
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b66:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005b6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	441a      	add	r2, r3
 8005b84:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005b88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b90:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005b9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ba0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	6a1a      	ldr	r2, [r3, #32]
 8005ba8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bac:	1ad2      	subs	r2, r2, r3
 8005bae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005bba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bbe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	4413      	add	r3, r2
 8005bd4:	881b      	ldrh	r3, [r3, #0]
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f000 823e 	beq.w	800605e <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005be2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005be6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005bea:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005bee:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005bf2:	6812      	ldr	r2, [r2, #0]
 8005bf4:	601a      	str	r2, [r3, #0]
 8005bf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	785b      	ldrb	r3, [r3, #1]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	f040 809a 	bne.w	8005d3c <USB_EPStartXfer+0x34c>
 8005c08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c10:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c14:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005c18:	6812      	ldr	r2, [r2, #0]
 8005c1a:	601a      	str	r2, [r3, #0]
 8005c1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c36:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c3a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8005c3e:	6812      	ldr	r2, [r2, #0]
 8005c40:	440a      	add	r2, r1
 8005c42:	601a      	str	r2, [r3, #0]
 8005c44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	011a      	lsls	r2, r3, #4
 8005c52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005c62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c66:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005c6a:	601a      	str	r2, [r3, #0]
 8005c6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d122      	bne.n	8005cba <USB_EPStartXfer+0x2ca>
 8005c74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c78:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	881b      	ldrh	r3, [r3, #0]
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c8c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	801a      	strh	r2, [r3, #0]
 8005c94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c98:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	881b      	ldrh	r3, [r3, #0]
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ca6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cb0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	801a      	strh	r2, [r3, #0]
 8005cb8:	e079      	b.n	8005dae <USB_EPStartXfer+0x3be>
 8005cba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cbe:	2b3e      	cmp	r3, #62	; 0x3e
 8005cc0:	d81b      	bhi.n	8005cfa <USB_EPStartXfer+0x30a>
 8005cc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cc6:	085b      	lsrs	r3, r3, #1
 8005cc8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005ccc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cd0:	f003 0301 	and.w	r3, r3, #1
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d004      	beq.n	8005ce2 <USB_EPStartXfer+0x2f2>
 8005cd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005cdc:	3301      	adds	r3, #1
 8005cde:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005ce2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	029b      	lsls	r3, r3, #10
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cf0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	801a      	strh	r2, [r3, #0]
 8005cf8:	e059      	b.n	8005dae <USB_EPStartXfer+0x3be>
 8005cfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cfe:	095b      	lsrs	r3, r3, #5
 8005d00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005d04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d08:	f003 031f 	and.w	r3, r3, #31
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d104      	bne.n	8005d1a <USB_EPStartXfer+0x32a>
 8005d10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005d14:	3b01      	subs	r3, #1
 8005d16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005d1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	029b      	lsls	r3, r3, #10
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d32:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	801a      	strh	r2, [r3, #0]
 8005d3a:	e038      	b.n	8005dae <USB_EPStartXfer+0x3be>
 8005d3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	785b      	ldrb	r3, [r3, #1]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d130      	bne.n	8005dae <USB_EPStartXfer+0x3be>
 8005d4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d62:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005d66:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005d6a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8005d6e:	6812      	ldr	r2, [r2, #0]
 8005d70:	440a      	add	r2, r1
 8005d72:	601a      	str	r2, [r3, #0]
 8005d74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	011a      	lsls	r2, r3, #4
 8005d82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d86:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005d92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d9a:	601a      	str	r2, [r3, #0]
 8005d9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005da6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005dae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005db2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	895b      	ldrh	r3, [r3, #10]
 8005dba:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005dbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	6959      	ldr	r1, [r3, #20]
 8005dca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005dd4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005dd8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005ddc:	6800      	ldr	r0, [r0, #0]
 8005dde:	f001 fd7d 	bl	80078dc <USB_WritePMA>
            ep->xfer_buff += len;
 8005de2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005de6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	695a      	ldr	r2, [r3, #20]
 8005dee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005df2:	441a      	add	r2, r3
 8005df4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005df8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005e00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	6a1a      	ldr	r2, [r3, #32]
 8005e0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d90f      	bls.n	8005e3c <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8005e1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	6a1a      	ldr	r2, [r3, #32]
 8005e28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e2c:	1ad2      	subs	r2, r2, r3
 8005e2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	621a      	str	r2, [r3, #32]
 8005e3a:	e00e      	b.n	8005e5a <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8005e3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	6a1b      	ldr	r3, [r3, #32]
 8005e48:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005e4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2200      	movs	r2, #0
 8005e58:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005e5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	785b      	ldrb	r3, [r3, #1]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	f040 809a 	bne.w	8005fa0 <USB_EPStartXfer+0x5b0>
 8005e6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e70:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005e74:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005e78:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005e7c:	6812      	ldr	r2, [r2, #0]
 8005e7e:	601a      	str	r2, [r3, #0]
 8005e80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	4619      	mov	r1, r3
 8005e92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e96:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005e9a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005e9e:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8005ea2:	6812      	ldr	r2, [r2, #0]
 8005ea4:	440a      	add	r2, r1
 8005ea6:	601a      	str	r2, [r3, #0]
 8005ea8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	011a      	lsls	r2, r3, #4
 8005eb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eba:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005ec6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eca:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005ece:	601a      	str	r2, [r3, #0]
 8005ed0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d122      	bne.n	8005f1e <USB_EPStartXfer+0x52e>
 8005ed8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005edc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	881b      	ldrh	r3, [r3, #0]
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005eea:	b29a      	uxth	r2, r3
 8005eec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ef0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	801a      	strh	r2, [r3, #0]
 8005ef8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005efc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	881b      	ldrh	r3, [r3, #0]
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f0e:	b29a      	uxth	r2, r3
 8005f10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f14:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	801a      	strh	r2, [r3, #0]
 8005f1c:	e083      	b.n	8006026 <USB_EPStartXfer+0x636>
 8005f1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f22:	2b3e      	cmp	r3, #62	; 0x3e
 8005f24:	d81b      	bhi.n	8005f5e <USB_EPStartXfer+0x56e>
 8005f26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f2a:	085b      	lsrs	r3, r3, #1
 8005f2c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005f30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f34:	f003 0301 	and.w	r3, r3, #1
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d004      	beq.n	8005f46 <USB_EPStartXfer+0x556>
 8005f3c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005f40:	3301      	adds	r3, #1
 8005f42:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005f46:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	029b      	lsls	r3, r3, #10
 8005f4e:	b29a      	uxth	r2, r3
 8005f50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f54:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	801a      	strh	r2, [r3, #0]
 8005f5c:	e063      	b.n	8006026 <USB_EPStartXfer+0x636>
 8005f5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f62:	095b      	lsrs	r3, r3, #5
 8005f64:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005f68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f6c:	f003 031f 	and.w	r3, r3, #31
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d104      	bne.n	8005f7e <USB_EPStartXfer+0x58e>
 8005f74:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005f78:	3b01      	subs	r3, #1
 8005f7a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005f7e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	029b      	lsls	r3, r3, #10
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f96:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	801a      	strh	r2, [r3, #0]
 8005f9e:	e042      	b.n	8006026 <USB_EPStartXfer+0x636>
 8005fa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fa4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	785b      	ldrb	r3, [r3, #1]
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d13a      	bne.n	8006026 <USB_EPStartXfer+0x636>
 8005fb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fb4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005fb8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005fbc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005fc0:	6812      	ldr	r2, [r2, #0]
 8005fc2:	601a      	str	r2, [r3, #0]
 8005fc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fc8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fda:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005fde:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005fe2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8005fe6:	6812      	ldr	r2, [r2, #0]
 8005fe8:	440a      	add	r2, r1
 8005fea:	601a      	str	r2, [r3, #0]
 8005fec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ff0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	011a      	lsls	r2, r3, #4
 8005ffa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ffe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4413      	add	r3, r2
 8006006:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800600a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800600e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006012:	601a      	str	r2, [r3, #0]
 8006014:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006018:	b29a      	uxth	r2, r3
 800601a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800601e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006026:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800602a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	891b      	ldrh	r3, [r3, #8]
 8006032:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006036:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800603a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6959      	ldr	r1, [r3, #20]
 8006042:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006046:	b29b      	uxth	r3, r3
 8006048:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800604c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006050:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006054:	6800      	ldr	r0, [r0, #0]
 8006056:	f001 fc41 	bl	80078dc <USB_WritePMA>
 800605a:	f000 be0e 	b.w	8006c7a <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800605e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006062:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	785b      	ldrb	r3, [r3, #1]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d16d      	bne.n	800614a <USB_EPStartXfer+0x75a>
 800606e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006072:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	64bb      	str	r3, [r7, #72]	; 0x48
 800607a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800607e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006088:	b29b      	uxth	r3, r3
 800608a:	461a      	mov	r2, r3
 800608c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800608e:	4413      	add	r3, r2
 8006090:	64bb      	str	r3, [r7, #72]	; 0x48
 8006092:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006096:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	011a      	lsls	r2, r3, #4
 80060a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060a2:	4413      	add	r3, r2
 80060a4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060a8:	647b      	str	r3, [r7, #68]	; 0x44
 80060aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d112      	bne.n	80060d8 <USB_EPStartXfer+0x6e8>
 80060b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060b4:	881b      	ldrh	r3, [r3, #0]
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060bc:	b29a      	uxth	r2, r3
 80060be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060c0:	801a      	strh	r2, [r3, #0]
 80060c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060c4:	881b      	ldrh	r3, [r3, #0]
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060d4:	801a      	strh	r2, [r3, #0]
 80060d6:	e063      	b.n	80061a0 <USB_EPStartXfer+0x7b0>
 80060d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060dc:	2b3e      	cmp	r3, #62	; 0x3e
 80060de:	d817      	bhi.n	8006110 <USB_EPStartXfer+0x720>
 80060e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060e4:	085b      	lsrs	r3, r3, #1
 80060e6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80060ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060ee:	f003 0301 	and.w	r3, r3, #1
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d004      	beq.n	8006100 <USB_EPStartXfer+0x710>
 80060f6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80060fa:	3301      	adds	r3, #1
 80060fc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006100:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006104:	b29b      	uxth	r3, r3
 8006106:	029b      	lsls	r3, r3, #10
 8006108:	b29a      	uxth	r2, r3
 800610a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800610c:	801a      	strh	r2, [r3, #0]
 800610e:	e047      	b.n	80061a0 <USB_EPStartXfer+0x7b0>
 8006110:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006114:	095b      	lsrs	r3, r3, #5
 8006116:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800611a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800611e:	f003 031f 	and.w	r3, r3, #31
 8006122:	2b00      	cmp	r3, #0
 8006124:	d104      	bne.n	8006130 <USB_EPStartXfer+0x740>
 8006126:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800612a:	3b01      	subs	r3, #1
 800612c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006130:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006134:	b29b      	uxth	r3, r3
 8006136:	029b      	lsls	r3, r3, #10
 8006138:	b29b      	uxth	r3, r3
 800613a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800613e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006142:	b29a      	uxth	r2, r3
 8006144:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006146:	801a      	strh	r2, [r3, #0]
 8006148:	e02a      	b.n	80061a0 <USB_EPStartXfer+0x7b0>
 800614a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800614e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	785b      	ldrb	r3, [r3, #1]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d122      	bne.n	80061a0 <USB_EPStartXfer+0x7b0>
 800615a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800615e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	653b      	str	r3, [r7, #80]	; 0x50
 8006166:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800616a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006174:	b29b      	uxth	r3, r3
 8006176:	461a      	mov	r2, r3
 8006178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800617a:	4413      	add	r3, r2
 800617c:	653b      	str	r3, [r7, #80]	; 0x50
 800617e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006182:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	011a      	lsls	r2, r3, #4
 800618c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800618e:	4413      	add	r3, r2
 8006190:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006194:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006196:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800619a:	b29a      	uxth	r2, r3
 800619c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800619e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80061a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	891b      	ldrh	r3, [r3, #8]
 80061ac:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	6959      	ldr	r1, [r3, #20]
 80061bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80061c6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80061ca:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80061ce:	6800      	ldr	r0, [r0, #0]
 80061d0:	f001 fb84 	bl	80078dc <USB_WritePMA>
            ep->xfer_buff += len;
 80061d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	695a      	ldr	r2, [r3, #20]
 80061e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061e4:	441a      	add	r2, r3
 80061e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80061f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6a1a      	ldr	r2, [r3, #32]
 80061fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006202:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	429a      	cmp	r2, r3
 800620c:	d90f      	bls.n	800622e <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800620e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006212:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6a1a      	ldr	r2, [r3, #32]
 800621a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800621e:	1ad2      	subs	r2, r2, r3
 8006220:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006224:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	621a      	str	r2, [r3, #32]
 800622c:	e00e      	b.n	800624c <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800622e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006232:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800623e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006242:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2200      	movs	r2, #0
 800624a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800624c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006250:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	643b      	str	r3, [r7, #64]	; 0x40
 8006258:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800625c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	785b      	ldrb	r3, [r3, #1]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d16d      	bne.n	8006344 <USB_EPStartXfer+0x954>
 8006268:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800626c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	63bb      	str	r3, [r7, #56]	; 0x38
 8006274:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006278:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006282:	b29b      	uxth	r3, r3
 8006284:	461a      	mov	r2, r3
 8006286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006288:	4413      	add	r3, r2
 800628a:	63bb      	str	r3, [r7, #56]	; 0x38
 800628c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006290:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	011a      	lsls	r2, r3, #4
 800629a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800629c:	4413      	add	r3, r2
 800629e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062a2:	637b      	str	r3, [r7, #52]	; 0x34
 80062a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d112      	bne.n	80062d2 <USB_EPStartXfer+0x8e2>
 80062ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ae:	881b      	ldrh	r3, [r3, #0]
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062b6:	b29a      	uxth	r2, r3
 80062b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ba:	801a      	strh	r2, [r3, #0]
 80062bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062be:	881b      	ldrh	r3, [r3, #0]
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ce:	801a      	strh	r2, [r3, #0]
 80062d0:	e05d      	b.n	800638e <USB_EPStartXfer+0x99e>
 80062d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062d6:	2b3e      	cmp	r3, #62	; 0x3e
 80062d8:	d817      	bhi.n	800630a <USB_EPStartXfer+0x91a>
 80062da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062de:	085b      	lsrs	r3, r3, #1
 80062e0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80062e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062e8:	f003 0301 	and.w	r3, r3, #1
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d004      	beq.n	80062fa <USB_EPStartXfer+0x90a>
 80062f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80062f4:	3301      	adds	r3, #1
 80062f6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80062fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80062fe:	b29b      	uxth	r3, r3
 8006300:	029b      	lsls	r3, r3, #10
 8006302:	b29a      	uxth	r2, r3
 8006304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006306:	801a      	strh	r2, [r3, #0]
 8006308:	e041      	b.n	800638e <USB_EPStartXfer+0x99e>
 800630a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800630e:	095b      	lsrs	r3, r3, #5
 8006310:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006314:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006318:	f003 031f 	and.w	r3, r3, #31
 800631c:	2b00      	cmp	r3, #0
 800631e:	d104      	bne.n	800632a <USB_EPStartXfer+0x93a>
 8006320:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006324:	3b01      	subs	r3, #1
 8006326:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800632a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800632e:	b29b      	uxth	r3, r3
 8006330:	029b      	lsls	r3, r3, #10
 8006332:	b29b      	uxth	r3, r3
 8006334:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006338:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800633c:	b29a      	uxth	r2, r3
 800633e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006340:	801a      	strh	r2, [r3, #0]
 8006342:	e024      	b.n	800638e <USB_EPStartXfer+0x99e>
 8006344:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006348:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	785b      	ldrb	r3, [r3, #1]
 8006350:	2b01      	cmp	r3, #1
 8006352:	d11c      	bne.n	800638e <USB_EPStartXfer+0x99e>
 8006354:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006358:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006362:	b29b      	uxth	r3, r3
 8006364:	461a      	mov	r2, r3
 8006366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006368:	4413      	add	r3, r2
 800636a:	643b      	str	r3, [r7, #64]	; 0x40
 800636c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006370:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	011a      	lsls	r2, r3, #4
 800637a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800637c:	4413      	add	r3, r2
 800637e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006382:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006384:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006388:	b29a      	uxth	r2, r3
 800638a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800638c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800638e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006392:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	895b      	ldrh	r3, [r3, #10]
 800639a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800639e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	6959      	ldr	r1, [r3, #20]
 80063aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80063b4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80063b8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80063bc:	6800      	ldr	r0, [r0, #0]
 80063be:	f001 fa8d 	bl	80078dc <USB_WritePMA>
 80063c2:	f000 bc5a 	b.w	8006c7a <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80063c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80063d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	4413      	add	r3, r2
 80063f0:	881b      	ldrh	r3, [r3, #0]
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80063f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063fc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006400:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006404:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800640e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	441a      	add	r2, r3
 800641a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800641e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006422:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006426:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800642a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800642e:	b29b      	uxth	r3, r3
 8006430:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006432:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006436:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800643e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006442:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800644c:	b29b      	uxth	r3, r3
 800644e:	461a      	mov	r2, r3
 8006450:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006452:	4413      	add	r3, r2
 8006454:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006456:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800645a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	011a      	lsls	r2, r3, #4
 8006464:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006466:	4413      	add	r3, r2
 8006468:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800646c:	65bb      	str	r3, [r7, #88]	; 0x58
 800646e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006472:	b29a      	uxth	r2, r3
 8006474:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006476:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006478:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800647c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	891b      	ldrh	r3, [r3, #8]
 8006484:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006488:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800648c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	6959      	ldr	r1, [r3, #20]
 8006494:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006498:	b29b      	uxth	r3, r3
 800649a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800649e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80064a2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80064a6:	6800      	ldr	r0, [r0, #0]
 80064a8:	f001 fa18 	bl	80078dc <USB_WritePMA>
 80064ac:	e3e5      	b.n	8006c7a <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80064ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	4413      	add	r3, r2
 80064c8:	881b      	ldrh	r3, [r3, #0]
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064d4:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80064d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	441a      	add	r2, r3
 80064f2:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80064f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064fe:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006506:	b29b      	uxth	r3, r3
 8006508:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800650a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800650e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	6a1a      	ldr	r2, [r3, #32]
 8006516:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800651a:	1ad2      	subs	r2, r2, r3
 800651c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006520:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006528:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800652c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006536:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	4413      	add	r3, r2
 8006542:	881b      	ldrh	r3, [r3, #0]
 8006544:	b29b      	uxth	r3, r3
 8006546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800654a:	2b00      	cmp	r3, #0
 800654c:	f000 81bc 	beq.w	80068c8 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006550:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006554:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800655e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006562:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	785b      	ldrb	r3, [r3, #1]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d16d      	bne.n	800664a <USB_EPStartXfer+0xc5a>
 800656e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006572:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	67bb      	str	r3, [r7, #120]	; 0x78
 800657a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800657e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006588:	b29b      	uxth	r3, r3
 800658a:	461a      	mov	r2, r3
 800658c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800658e:	4413      	add	r3, r2
 8006590:	67bb      	str	r3, [r7, #120]	; 0x78
 8006592:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006596:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	011a      	lsls	r2, r3, #4
 80065a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065a2:	4413      	add	r3, r2
 80065a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065a8:	677b      	str	r3, [r7, #116]	; 0x74
 80065aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d112      	bne.n	80065d8 <USB_EPStartXfer+0xbe8>
 80065b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065b4:	881b      	ldrh	r3, [r3, #0]
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065bc:	b29a      	uxth	r2, r3
 80065be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065c0:	801a      	strh	r2, [r3, #0]
 80065c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065c4:	881b      	ldrh	r3, [r3, #0]
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065d4:	801a      	strh	r2, [r3, #0]
 80065d6:	e060      	b.n	800669a <USB_EPStartXfer+0xcaa>
 80065d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065dc:	2b3e      	cmp	r3, #62	; 0x3e
 80065de:	d817      	bhi.n	8006610 <USB_EPStartXfer+0xc20>
 80065e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065e4:	085b      	lsrs	r3, r3, #1
 80065e6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80065ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065ee:	f003 0301 	and.w	r3, r3, #1
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d004      	beq.n	8006600 <USB_EPStartXfer+0xc10>
 80065f6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80065fa:	3301      	adds	r3, #1
 80065fc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006600:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006604:	b29b      	uxth	r3, r3
 8006606:	029b      	lsls	r3, r3, #10
 8006608:	b29a      	uxth	r2, r3
 800660a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800660c:	801a      	strh	r2, [r3, #0]
 800660e:	e044      	b.n	800669a <USB_EPStartXfer+0xcaa>
 8006610:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006614:	095b      	lsrs	r3, r3, #5
 8006616:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800661a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800661e:	f003 031f 	and.w	r3, r3, #31
 8006622:	2b00      	cmp	r3, #0
 8006624:	d104      	bne.n	8006630 <USB_EPStartXfer+0xc40>
 8006626:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800662a:	3b01      	subs	r3, #1
 800662c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006630:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006634:	b29b      	uxth	r3, r3
 8006636:	029b      	lsls	r3, r3, #10
 8006638:	b29b      	uxth	r3, r3
 800663a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800663e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006642:	b29a      	uxth	r2, r3
 8006644:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006646:	801a      	strh	r2, [r3, #0]
 8006648:	e027      	b.n	800669a <USB_EPStartXfer+0xcaa>
 800664a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800664e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	785b      	ldrb	r3, [r3, #1]
 8006656:	2b01      	cmp	r3, #1
 8006658:	d11f      	bne.n	800669a <USB_EPStartXfer+0xcaa>
 800665a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800665e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006668:	b29b      	uxth	r3, r3
 800666a:	461a      	mov	r2, r3
 800666c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006670:	4413      	add	r3, r2
 8006672:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006676:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800667a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	011a      	lsls	r2, r3, #4
 8006684:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006688:	4413      	add	r3, r2
 800668a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800668e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006690:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006694:	b29a      	uxth	r2, r3
 8006696:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006698:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800669a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800669e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	895b      	ldrh	r3, [r3, #10]
 80066a6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	6959      	ldr	r1, [r3, #20]
 80066b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80066c0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80066c4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80066c8:	6800      	ldr	r0, [r0, #0]
 80066ca:	f001 f907 	bl	80078dc <USB_WritePMA>
          ep->xfer_buff += len;
 80066ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	695a      	ldr	r2, [r3, #20]
 80066da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066de:	441a      	add	r2, r3
 80066e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80066ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	6a1a      	ldr	r2, [r3, #32]
 80066f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	429a      	cmp	r2, r3
 8006706:	d90f      	bls.n	8006728 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8006708:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800670c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	6a1a      	ldr	r2, [r3, #32]
 8006714:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006718:	1ad2      	subs	r2, r2, r3
 800671a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800671e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	621a      	str	r2, [r3, #32]
 8006726:	e00e      	b.n	8006746 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8006728:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800672c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	6a1b      	ldr	r3, [r3, #32]
 8006734:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006738:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800673c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2200      	movs	r2, #0
 8006744:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006746:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800674a:	2b00      	cmp	r3, #0
 800674c:	f000 8295 	beq.w	8006c7a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006750:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006754:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	785b      	ldrb	r3, [r3, #1]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d16d      	bne.n	800683c <USB_EPStartXfer+0xe4c>
 8006760:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006764:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	66bb      	str	r3, [r7, #104]	; 0x68
 800676c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006770:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800677a:	b29b      	uxth	r3, r3
 800677c:	461a      	mov	r2, r3
 800677e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006780:	4413      	add	r3, r2
 8006782:	66bb      	str	r3, [r7, #104]	; 0x68
 8006784:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006788:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	011a      	lsls	r2, r3, #4
 8006792:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006794:	4413      	add	r3, r2
 8006796:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800679a:	667b      	str	r3, [r7, #100]	; 0x64
 800679c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d112      	bne.n	80067ca <USB_EPStartXfer+0xdda>
 80067a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067a6:	881b      	ldrh	r3, [r3, #0]
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067ae:	b29a      	uxth	r2, r3
 80067b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067b2:	801a      	strh	r2, [r3, #0]
 80067b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067b6:	881b      	ldrh	r3, [r3, #0]
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067c6:	801a      	strh	r2, [r3, #0]
 80067c8:	e063      	b.n	8006892 <USB_EPStartXfer+0xea2>
 80067ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067ce:	2b3e      	cmp	r3, #62	; 0x3e
 80067d0:	d817      	bhi.n	8006802 <USB_EPStartXfer+0xe12>
 80067d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067d6:	085b      	lsrs	r3, r3, #1
 80067d8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80067dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067e0:	f003 0301 	and.w	r3, r3, #1
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d004      	beq.n	80067f2 <USB_EPStartXfer+0xe02>
 80067e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067ec:	3301      	adds	r3, #1
 80067ee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80067f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	029b      	lsls	r3, r3, #10
 80067fa:	b29a      	uxth	r2, r3
 80067fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067fe:	801a      	strh	r2, [r3, #0]
 8006800:	e047      	b.n	8006892 <USB_EPStartXfer+0xea2>
 8006802:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006806:	095b      	lsrs	r3, r3, #5
 8006808:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800680c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006810:	f003 031f 	and.w	r3, r3, #31
 8006814:	2b00      	cmp	r3, #0
 8006816:	d104      	bne.n	8006822 <USB_EPStartXfer+0xe32>
 8006818:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800681c:	3b01      	subs	r3, #1
 800681e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006822:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006826:	b29b      	uxth	r3, r3
 8006828:	029b      	lsls	r3, r3, #10
 800682a:	b29b      	uxth	r3, r3
 800682c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006830:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006834:	b29a      	uxth	r2, r3
 8006836:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006838:	801a      	strh	r2, [r3, #0]
 800683a:	e02a      	b.n	8006892 <USB_EPStartXfer+0xea2>
 800683c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006840:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	785b      	ldrb	r3, [r3, #1]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d122      	bne.n	8006892 <USB_EPStartXfer+0xea2>
 800684c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006850:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	673b      	str	r3, [r7, #112]	; 0x70
 8006858:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800685c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006866:	b29b      	uxth	r3, r3
 8006868:	461a      	mov	r2, r3
 800686a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800686c:	4413      	add	r3, r2
 800686e:	673b      	str	r3, [r7, #112]	; 0x70
 8006870:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006874:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	011a      	lsls	r2, r3, #4
 800687e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006880:	4413      	add	r3, r2
 8006882:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006886:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006888:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800688c:	b29a      	uxth	r2, r3
 800688e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006890:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006892:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006896:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	891b      	ldrh	r3, [r3, #8]
 800689e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	6959      	ldr	r1, [r3, #20]
 80068ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80068b8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80068bc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80068c0:	6800      	ldr	r0, [r0, #0]
 80068c2:	f001 f80b 	bl	80078dc <USB_WritePMA>
 80068c6:	e1d8      	b.n	8006c7a <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80068c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	785b      	ldrb	r3, [r3, #1]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d178      	bne.n	80069ca <USB_EPStartXfer+0xfda>
 80068d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80068e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	461a      	mov	r2, r3
 80068f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80068fc:	4413      	add	r3, r2
 80068fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006902:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006906:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	011a      	lsls	r2, r3, #4
 8006910:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006914:	4413      	add	r3, r2
 8006916:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800691a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800691e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006922:	2b00      	cmp	r3, #0
 8006924:	d116      	bne.n	8006954 <USB_EPStartXfer+0xf64>
 8006926:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800692a:	881b      	ldrh	r3, [r3, #0]
 800692c:	b29b      	uxth	r3, r3
 800692e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006932:	b29a      	uxth	r2, r3
 8006934:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006938:	801a      	strh	r2, [r3, #0]
 800693a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800693e:	881b      	ldrh	r3, [r3, #0]
 8006940:	b29b      	uxth	r3, r3
 8006942:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006946:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800694a:	b29a      	uxth	r2, r3
 800694c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006950:	801a      	strh	r2, [r3, #0]
 8006952:	e06b      	b.n	8006a2c <USB_EPStartXfer+0x103c>
 8006954:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006958:	2b3e      	cmp	r3, #62	; 0x3e
 800695a:	d818      	bhi.n	800698e <USB_EPStartXfer+0xf9e>
 800695c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006960:	085b      	lsrs	r3, r3, #1
 8006962:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006966:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	2b00      	cmp	r3, #0
 8006970:	d004      	beq.n	800697c <USB_EPStartXfer+0xf8c>
 8006972:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006976:	3301      	adds	r3, #1
 8006978:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800697c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006980:	b29b      	uxth	r3, r3
 8006982:	029b      	lsls	r3, r3, #10
 8006984:	b29a      	uxth	r2, r3
 8006986:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800698a:	801a      	strh	r2, [r3, #0]
 800698c:	e04e      	b.n	8006a2c <USB_EPStartXfer+0x103c>
 800698e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006992:	095b      	lsrs	r3, r3, #5
 8006994:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006998:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800699c:	f003 031f 	and.w	r3, r3, #31
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d104      	bne.n	80069ae <USB_EPStartXfer+0xfbe>
 80069a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80069a8:	3b01      	subs	r3, #1
 80069aa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80069ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	029b      	lsls	r3, r3, #10
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069c6:	801a      	strh	r2, [r3, #0]
 80069c8:	e030      	b.n	8006a2c <USB_EPStartXfer+0x103c>
 80069ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	785b      	ldrb	r3, [r3, #1]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d128      	bne.n	8006a2c <USB_EPStartXfer+0x103c>
 80069da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80069e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	461a      	mov	r2, r3
 80069fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80069fe:	4413      	add	r3, r2
 8006a00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006a04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	011a      	lsls	r2, r3, #4
 8006a12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006a16:	4413      	add	r3, r2
 8006a18:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a1c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006a20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a24:	b29a      	uxth	r2, r3
 8006a26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a2a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006a2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	891b      	ldrh	r3, [r3, #8]
 8006a38:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	6959      	ldr	r1, [r3, #20]
 8006a48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006a52:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006a56:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006a5a:	6800      	ldr	r0, [r0, #0]
 8006a5c:	f000 ff3e 	bl	80078dc <USB_WritePMA>
          ep->xfer_buff += len;
 8006a60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	695a      	ldr	r2, [r3, #20]
 8006a6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a70:	441a      	add	r2, r3
 8006a72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006a7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	6a1a      	ldr	r2, [r3, #32]
 8006a8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d90f      	bls.n	8006aba <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8006a9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	6a1a      	ldr	r2, [r3, #32]
 8006aa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006aaa:	1ad2      	subs	r2, r2, r3
 8006aac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ab0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	621a      	str	r2, [r3, #32]
 8006ab8:	e00e      	b.n	8006ad8 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8006aba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006abe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
 8006ac6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006aca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ace:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006ad8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	f000 80cc 	beq.w	8006c7a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ae2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ae6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006af0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006af4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	785b      	ldrb	r3, [r3, #1]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d178      	bne.n	8006bf2 <USB_EPStartXfer+0x1202>
 8006b00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	461a      	mov	r2, r3
 8006b20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b24:	4413      	add	r3, r2
 8006b26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	011a      	lsls	r2, r3, #4
 8006b38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b3c:	4413      	add	r3, r2
 8006b3e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d116      	bne.n	8006b7c <USB_EPStartXfer+0x118c>
 8006b4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b52:	881b      	ldrh	r3, [r3, #0]
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b5a:	b29a      	uxth	r2, r3
 8006b5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b60:	801a      	strh	r2, [r3, #0]
 8006b62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b66:	881b      	ldrh	r3, [r3, #0]
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b72:	b29a      	uxth	r2, r3
 8006b74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b78:	801a      	strh	r2, [r3, #0]
 8006b7a:	e064      	b.n	8006c46 <USB_EPStartXfer+0x1256>
 8006b7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b80:	2b3e      	cmp	r3, #62	; 0x3e
 8006b82:	d818      	bhi.n	8006bb6 <USB_EPStartXfer+0x11c6>
 8006b84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b88:	085b      	lsrs	r3, r3, #1
 8006b8a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006b8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b92:	f003 0301 	and.w	r3, r3, #1
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d004      	beq.n	8006ba4 <USB_EPStartXfer+0x11b4>
 8006b9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006ba4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	029b      	lsls	r3, r3, #10
 8006bac:	b29a      	uxth	r2, r3
 8006bae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006bb2:	801a      	strh	r2, [r3, #0]
 8006bb4:	e047      	b.n	8006c46 <USB_EPStartXfer+0x1256>
 8006bb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bba:	095b      	lsrs	r3, r3, #5
 8006bbc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006bc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bc4:	f003 031f 	and.w	r3, r3, #31
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d104      	bne.n	8006bd6 <USB_EPStartXfer+0x11e6>
 8006bcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bd0:	3b01      	subs	r3, #1
 8006bd2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006bd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	029b      	lsls	r3, r3, #10
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006be4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006be8:	b29a      	uxth	r2, r3
 8006bea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006bee:	801a      	strh	r2, [r3, #0]
 8006bf0:	e029      	b.n	8006c46 <USB_EPStartXfer+0x1256>
 8006bf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bf6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	785b      	ldrb	r3, [r3, #1]
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d121      	bne.n	8006c46 <USB_EPStartXfer+0x1256>
 8006c02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	461a      	mov	r2, r3
 8006c14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c18:	4413      	add	r3, r2
 8006c1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006c1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	011a      	lsls	r2, r3, #4
 8006c2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c30:	4413      	add	r3, r2
 8006c32:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006c3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c3e:	b29a      	uxth	r2, r3
 8006c40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c44:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006c46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	895b      	ldrh	r3, [r3, #10]
 8006c52:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	6959      	ldr	r1, [r3, #20]
 8006c62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006c6c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006c70:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006c74:	6800      	ldr	r0, [r0, #0]
 8006c76:	f000 fe31 	bl	80078dc <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006c7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	4413      	add	r3, r2
 8006c94:	881b      	ldrh	r3, [r3, #0]
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006c9c:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006ca0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ca4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ca8:	8013      	strh	r3, [r2, #0]
 8006caa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cae:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006cb2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006cb6:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006cba:	8812      	ldrh	r2, [r2, #0]
 8006cbc:	f082 0210 	eor.w	r2, r2, #16
 8006cc0:	801a      	strh	r2, [r3, #0]
 8006cc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cc6:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006cca:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006cce:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006cd2:	8812      	ldrh	r2, [r2, #0]
 8006cd4:	f082 0220 	eor.w	r2, r2, #32
 8006cd8:	801a      	strh	r2, [r3, #0]
 8006cda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cde:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ce8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	441a      	add	r2, r3
 8006cf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cf8:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006cfc:	881b      	ldrh	r3, [r3, #0]
 8006cfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	8013      	strh	r3, [r2, #0]
 8006d12:	f000 bc9f 	b.w	8007654 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006d16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	7b1b      	ldrb	r3, [r3, #12]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	f040 80ae 	bne.w	8006e84 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006d28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	699a      	ldr	r2, [r3, #24]
 8006d34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	691b      	ldr	r3, [r3, #16]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d917      	bls.n	8006d74 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8006d44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8006d54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	699a      	ldr	r2, [r3, #24]
 8006d60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d64:	1ad2      	subs	r2, r2, r3
 8006d66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	619a      	str	r2, [r3, #24]
 8006d72:	e00e      	b.n	8006d92 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8006d74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	699b      	ldr	r3, [r3, #24]
 8006d80:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8006d84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006d92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006da0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006da4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	461a      	mov	r2, r3
 8006db2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006db6:	4413      	add	r3, r2
 8006db8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006dbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	011a      	lsls	r2, r3, #4
 8006dca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006dce:	4413      	add	r3, r2
 8006dd0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006dd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006dd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d116      	bne.n	8006e0e <USB_EPStartXfer+0x141e>
 8006de0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006de4:	881b      	ldrh	r3, [r3, #0]
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006dec:	b29a      	uxth	r2, r3
 8006dee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006df2:	801a      	strh	r2, [r3, #0]
 8006df4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006df8:	881b      	ldrh	r3, [r3, #0]
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e04:	b29a      	uxth	r2, r3
 8006e06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e0a:	801a      	strh	r2, [r3, #0]
 8006e0c:	e3e8      	b.n	80075e0 <USB_EPStartXfer+0x1bf0>
 8006e0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e12:	2b3e      	cmp	r3, #62	; 0x3e
 8006e14:	d818      	bhi.n	8006e48 <USB_EPStartXfer+0x1458>
 8006e16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e1a:	085b      	lsrs	r3, r3, #1
 8006e1c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006e20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e24:	f003 0301 	and.w	r3, r3, #1
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d004      	beq.n	8006e36 <USB_EPStartXfer+0x1446>
 8006e2c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e30:	3301      	adds	r3, #1
 8006e32:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006e36:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	029b      	lsls	r3, r3, #10
 8006e3e:	b29a      	uxth	r2, r3
 8006e40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e44:	801a      	strh	r2, [r3, #0]
 8006e46:	e3cb      	b.n	80075e0 <USB_EPStartXfer+0x1bf0>
 8006e48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e4c:	095b      	lsrs	r3, r3, #5
 8006e4e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006e52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e56:	f003 031f 	and.w	r3, r3, #31
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d104      	bne.n	8006e68 <USB_EPStartXfer+0x1478>
 8006e5e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e62:	3b01      	subs	r3, #1
 8006e64:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006e68:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	029b      	lsls	r3, r3, #10
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e7a:	b29a      	uxth	r2, r3
 8006e7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e80:	801a      	strh	r2, [r3, #0]
 8006e82:	e3ad      	b.n	80075e0 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006e84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	78db      	ldrb	r3, [r3, #3]
 8006e90:	2b02      	cmp	r3, #2
 8006e92:	f040 8200 	bne.w	8007296 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006e96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	785b      	ldrb	r3, [r3, #1]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	f040 8091 	bne.w	8006fca <USB_EPStartXfer+0x15da>
 8006ea8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006eb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006ecc:	4413      	add	r3, r2
 8006ece:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006ed2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ed6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	011a      	lsls	r2, r3, #4
 8006ee0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006ee4:	4413      	add	r3, r2
 8006ee6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006eea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006eee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ef2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d116      	bne.n	8006f2c <USB_EPStartXfer+0x153c>
 8006efe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f02:	881b      	ldrh	r3, [r3, #0]
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f0a:	b29a      	uxth	r2, r3
 8006f0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f10:	801a      	strh	r2, [r3, #0]
 8006f12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f16:	881b      	ldrh	r3, [r3, #0]
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f28:	801a      	strh	r2, [r3, #0]
 8006f2a:	e083      	b.n	8007034 <USB_EPStartXfer+0x1644>
 8006f2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	691b      	ldr	r3, [r3, #16]
 8006f38:	2b3e      	cmp	r3, #62	; 0x3e
 8006f3a:	d820      	bhi.n	8006f7e <USB_EPStartXfer+0x158e>
 8006f3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	691b      	ldr	r3, [r3, #16]
 8006f48:	085b      	lsrs	r3, r3, #1
 8006f4a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006f4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	f003 0301 	and.w	r3, r3, #1
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d004      	beq.n	8006f6c <USB_EPStartXfer+0x157c>
 8006f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f66:	3301      	adds	r3, #1
 8006f68:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	029b      	lsls	r3, r3, #10
 8006f74:	b29a      	uxth	r2, r3
 8006f76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f7a:	801a      	strh	r2, [r3, #0]
 8006f7c:	e05a      	b.n	8007034 <USB_EPStartXfer+0x1644>
 8006f7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	095b      	lsrs	r3, r3, #5
 8006f8c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006f90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	691b      	ldr	r3, [r3, #16]
 8006f9c:	f003 031f 	and.w	r3, r3, #31
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d104      	bne.n	8006fae <USB_EPStartXfer+0x15be>
 8006fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fa8:	3b01      	subs	r3, #1
 8006faa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	029b      	lsls	r3, r3, #10
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fc0:	b29a      	uxth	r2, r3
 8006fc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006fc6:	801a      	strh	r2, [r3, #0]
 8006fc8:	e034      	b.n	8007034 <USB_EPStartXfer+0x1644>
 8006fca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	785b      	ldrb	r3, [r3, #1]
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d12c      	bne.n	8007034 <USB_EPStartXfer+0x1644>
 8006fda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fde:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006fe8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ffe:	4413      	add	r3, r2
 8007000:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007004:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007008:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	011a      	lsls	r2, r3, #4
 8007012:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007016:	4413      	add	r3, r2
 8007018:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800701c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007020:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007024:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	b29a      	uxth	r2, r3
 800702e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007032:	801a      	strh	r2, [r3, #0]
 8007034:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007038:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007042:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007046:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	785b      	ldrb	r3, [r3, #1]
 800704e:	2b00      	cmp	r3, #0
 8007050:	f040 8091 	bne.w	8007176 <USB_EPStartXfer+0x1786>
 8007054:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007058:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007062:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007066:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007070:	b29b      	uxth	r3, r3
 8007072:	461a      	mov	r2, r3
 8007074:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007078:	4413      	add	r3, r2
 800707a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800707e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007082:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	011a      	lsls	r2, r3, #4
 800708c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007090:	4413      	add	r3, r2
 8007092:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007096:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800709a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800709e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	691b      	ldr	r3, [r3, #16]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d116      	bne.n	80070d8 <USB_EPStartXfer+0x16e8>
 80070aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80070ae:	881b      	ldrh	r3, [r3, #0]
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80070bc:	801a      	strh	r2, [r3, #0]
 80070be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80070c2:	881b      	ldrh	r3, [r3, #0]
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80070d4:	801a      	strh	r2, [r3, #0]
 80070d6:	e07c      	b.n	80071d2 <USB_EPStartXfer+0x17e2>
 80070d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	2b3e      	cmp	r3, #62	; 0x3e
 80070e6:	d820      	bhi.n	800712a <USB_EPStartXfer+0x173a>
 80070e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	085b      	lsrs	r3, r3, #1
 80070f6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80070fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	f003 0301 	and.w	r3, r3, #1
 800710a:	2b00      	cmp	r3, #0
 800710c:	d004      	beq.n	8007118 <USB_EPStartXfer+0x1728>
 800710e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007112:	3301      	adds	r3, #1
 8007114:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007118:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800711c:	b29b      	uxth	r3, r3
 800711e:	029b      	lsls	r3, r3, #10
 8007120:	b29a      	uxth	r2, r3
 8007122:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007126:	801a      	strh	r2, [r3, #0]
 8007128:	e053      	b.n	80071d2 <USB_EPStartXfer+0x17e2>
 800712a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800712e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	095b      	lsrs	r3, r3, #5
 8007138:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800713c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007140:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	f003 031f 	and.w	r3, r3, #31
 800714c:	2b00      	cmp	r3, #0
 800714e:	d104      	bne.n	800715a <USB_EPStartXfer+0x176a>
 8007150:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007154:	3b01      	subs	r3, #1
 8007156:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800715a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800715e:	b29b      	uxth	r3, r3
 8007160:	029b      	lsls	r3, r3, #10
 8007162:	b29b      	uxth	r3, r3
 8007164:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007168:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800716c:	b29a      	uxth	r2, r3
 800716e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007172:	801a      	strh	r2, [r3, #0]
 8007174:	e02d      	b.n	80071d2 <USB_EPStartXfer+0x17e2>
 8007176:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800717a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	785b      	ldrb	r3, [r3, #1]
 8007182:	2b01      	cmp	r3, #1
 8007184:	d125      	bne.n	80071d2 <USB_EPStartXfer+0x17e2>
 8007186:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800718a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007194:	b29b      	uxth	r3, r3
 8007196:	461a      	mov	r2, r3
 8007198:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800719c:	4413      	add	r3, r2
 800719e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80071a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	011a      	lsls	r2, r3, #4
 80071b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80071b4:	4413      	add	r3, r2
 80071b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80071ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80071be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	b29a      	uxth	r2, r3
 80071cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80071d0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80071d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	69db      	ldr	r3, [r3, #28]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	f000 81fe 	beq.w	80075e0 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80071e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	4413      	add	r3, r2
 80071fe:	881b      	ldrh	r3, [r3, #0]
 8007200:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007204:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007208:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800720c:	2b00      	cmp	r3, #0
 800720e:	d005      	beq.n	800721c <USB_EPStartXfer+0x182c>
 8007210:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007218:	2b00      	cmp	r3, #0
 800721a:	d10d      	bne.n	8007238 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800721c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007220:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007224:	2b00      	cmp	r3, #0
 8007226:	f040 81db 	bne.w	80075e0 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800722a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800722e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007232:	2b00      	cmp	r3, #0
 8007234:	f040 81d4 	bne.w	80075e0 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007238:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800723c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007246:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	009b      	lsls	r3, r3, #2
 8007250:	4413      	add	r3, r2
 8007252:	881b      	ldrh	r3, [r3, #0]
 8007254:	b29b      	uxth	r3, r3
 8007256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800725a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800725e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8007262:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007266:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007270:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	441a      	add	r2, r3
 800727c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8007280:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007284:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007288:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800728c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007290:	b29b      	uxth	r3, r3
 8007292:	8013      	strh	r3, [r2, #0]
 8007294:	e1a4      	b.n	80075e0 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007296:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800729a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	78db      	ldrb	r3, [r3, #3]
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	f040 819a 	bne.w	80075dc <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80072a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	699a      	ldr	r2, [r3, #24]
 80072b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d917      	bls.n	80072f4 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80072c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80072d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	699a      	ldr	r2, [r3, #24]
 80072e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072e4:	1ad2      	subs	r2, r2, r3
 80072e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	619a      	str	r2, [r3, #24]
 80072f2:	e00e      	b.n	8007312 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80072f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	699b      	ldr	r3, [r3, #24]
 8007300:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8007304:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007308:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	2200      	movs	r2, #0
 8007310:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007312:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007316:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	785b      	ldrb	r3, [r3, #1]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d178      	bne.n	8007414 <USB_EPStartXfer+0x1a24>
 8007322:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007326:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007330:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007334:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800733e:	b29b      	uxth	r3, r3
 8007340:	461a      	mov	r2, r3
 8007342:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007346:	4413      	add	r3, r2
 8007348:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800734c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007350:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	011a      	lsls	r2, r3, #4
 800735a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800735e:	4413      	add	r3, r2
 8007360:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007364:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007368:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800736c:	2b00      	cmp	r3, #0
 800736e:	d116      	bne.n	800739e <USB_EPStartXfer+0x19ae>
 8007370:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007374:	881b      	ldrh	r3, [r3, #0]
 8007376:	b29b      	uxth	r3, r3
 8007378:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800737c:	b29a      	uxth	r2, r3
 800737e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007382:	801a      	strh	r2, [r3, #0]
 8007384:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007388:	881b      	ldrh	r3, [r3, #0]
 800738a:	b29b      	uxth	r3, r3
 800738c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007390:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007394:	b29a      	uxth	r2, r3
 8007396:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800739a:	801a      	strh	r2, [r3, #0]
 800739c:	e06b      	b.n	8007476 <USB_EPStartXfer+0x1a86>
 800739e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073a2:	2b3e      	cmp	r3, #62	; 0x3e
 80073a4:	d818      	bhi.n	80073d8 <USB_EPStartXfer+0x19e8>
 80073a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073aa:	085b      	lsrs	r3, r3, #1
 80073ac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80073b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073b4:	f003 0301 	and.w	r3, r3, #1
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d004      	beq.n	80073c6 <USB_EPStartXfer+0x19d6>
 80073bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073c0:	3301      	adds	r3, #1
 80073c2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80073c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	029b      	lsls	r3, r3, #10
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80073d4:	801a      	strh	r2, [r3, #0]
 80073d6:	e04e      	b.n	8007476 <USB_EPStartXfer+0x1a86>
 80073d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073dc:	095b      	lsrs	r3, r3, #5
 80073de:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80073e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073e6:	f003 031f 	and.w	r3, r3, #31
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d104      	bne.n	80073f8 <USB_EPStartXfer+0x1a08>
 80073ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073f2:	3b01      	subs	r3, #1
 80073f4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80073f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	029b      	lsls	r3, r3, #10
 8007400:	b29b      	uxth	r3, r3
 8007402:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007406:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800740a:	b29a      	uxth	r2, r3
 800740c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007410:	801a      	strh	r2, [r3, #0]
 8007412:	e030      	b.n	8007476 <USB_EPStartXfer+0x1a86>
 8007414:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007418:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	785b      	ldrb	r3, [r3, #1]
 8007420:	2b01      	cmp	r3, #1
 8007422:	d128      	bne.n	8007476 <USB_EPStartXfer+0x1a86>
 8007424:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007428:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007432:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007436:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007440:	b29b      	uxth	r3, r3
 8007442:	461a      	mov	r2, r3
 8007444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007448:	4413      	add	r3, r2
 800744a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800744e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007452:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	011a      	lsls	r2, r3, #4
 800745c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007460:	4413      	add	r3, r2
 8007462:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007466:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800746a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800746e:	b29a      	uxth	r2, r3
 8007470:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007474:	801a      	strh	r2, [r3, #0]
 8007476:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800747a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007484:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007488:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	785b      	ldrb	r3, [r3, #1]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d178      	bne.n	8007586 <USB_EPStartXfer+0x1b96>
 8007494:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007498:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80074a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	461a      	mov	r2, r3
 80074b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074b8:	4413      	add	r3, r2
 80074ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80074be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	011a      	lsls	r2, r3, #4
 80074cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074d0:	4413      	add	r3, r2
 80074d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80074d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80074da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d116      	bne.n	8007510 <USB_EPStartXfer+0x1b20>
 80074e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074e6:	881b      	ldrh	r3, [r3, #0]
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80074ee:	b29a      	uxth	r2, r3
 80074f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074f4:	801a      	strh	r2, [r3, #0]
 80074f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074fa:	881b      	ldrh	r3, [r3, #0]
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007502:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007506:	b29a      	uxth	r2, r3
 8007508:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800750c:	801a      	strh	r2, [r3, #0]
 800750e:	e067      	b.n	80075e0 <USB_EPStartXfer+0x1bf0>
 8007510:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007514:	2b3e      	cmp	r3, #62	; 0x3e
 8007516:	d818      	bhi.n	800754a <USB_EPStartXfer+0x1b5a>
 8007518:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800751c:	085b      	lsrs	r3, r3, #1
 800751e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007522:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007526:	f003 0301 	and.w	r3, r3, #1
 800752a:	2b00      	cmp	r3, #0
 800752c:	d004      	beq.n	8007538 <USB_EPStartXfer+0x1b48>
 800752e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007532:	3301      	adds	r3, #1
 8007534:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007538:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800753c:	b29b      	uxth	r3, r3
 800753e:	029b      	lsls	r3, r3, #10
 8007540:	b29a      	uxth	r2, r3
 8007542:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007546:	801a      	strh	r2, [r3, #0]
 8007548:	e04a      	b.n	80075e0 <USB_EPStartXfer+0x1bf0>
 800754a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800754e:	095b      	lsrs	r3, r3, #5
 8007550:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007554:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007558:	f003 031f 	and.w	r3, r3, #31
 800755c:	2b00      	cmp	r3, #0
 800755e:	d104      	bne.n	800756a <USB_EPStartXfer+0x1b7a>
 8007560:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007564:	3b01      	subs	r3, #1
 8007566:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800756a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800756e:	b29b      	uxth	r3, r3
 8007570:	029b      	lsls	r3, r3, #10
 8007572:	b29b      	uxth	r3, r3
 8007574:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007578:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800757c:	b29a      	uxth	r2, r3
 800757e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007582:	801a      	strh	r2, [r3, #0]
 8007584:	e02c      	b.n	80075e0 <USB_EPStartXfer+0x1bf0>
 8007586:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800758a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	785b      	ldrb	r3, [r3, #1]
 8007592:	2b01      	cmp	r3, #1
 8007594:	d124      	bne.n	80075e0 <USB_EPStartXfer+0x1bf0>
 8007596:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800759a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	461a      	mov	r2, r3
 80075a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075ac:	4413      	add	r3, r2
 80075ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80075b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	011a      	lsls	r2, r3, #4
 80075c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075c4:	4413      	add	r3, r2
 80075c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80075ca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80075ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075d2:	b29a      	uxth	r2, r3
 80075d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075d8:	801a      	strh	r2, [r3, #0]
 80075da:	e001      	b.n	80075e0 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	e03a      	b.n	8007656 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80075e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	4413      	add	r3, r2
 80075fa:	881b      	ldrh	r3, [r3, #0]
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007606:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800760a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800760e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007612:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007616:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800761a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800761e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007622:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007626:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007630:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	441a      	add	r2, r3
 800763c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007640:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007644:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007648:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800764c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007650:	b29b      	uxth	r3, r3
 8007652:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007660:	b480      	push	{r7}
 8007662:	b085      	sub	sp, #20
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	785b      	ldrb	r3, [r3, #1]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d020      	beq.n	80076b4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	4413      	add	r3, r2
 800767c:	881b      	ldrh	r3, [r3, #0]
 800767e:	b29b      	uxth	r3, r3
 8007680:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007684:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007688:	81bb      	strh	r3, [r7, #12]
 800768a:	89bb      	ldrh	r3, [r7, #12]
 800768c:	f083 0310 	eor.w	r3, r3, #16
 8007690:	81bb      	strh	r3, [r7, #12]
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	441a      	add	r2, r3
 800769c:	89bb      	ldrh	r3, [r7, #12]
 800769e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	8013      	strh	r3, [r2, #0]
 80076b2:	e01f      	b.n	80076f4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	4413      	add	r3, r2
 80076be:	881b      	ldrh	r3, [r3, #0]
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ca:	81fb      	strh	r3, [r7, #14]
 80076cc:	89fb      	ldrh	r3, [r7, #14]
 80076ce:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80076d2:	81fb      	strh	r3, [r7, #14]
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	441a      	add	r2, r3
 80076de:	89fb      	ldrh	r3, [r7, #14]
 80076e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3714      	adds	r7, #20
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bc80      	pop	{r7}
 80076fe:	4770      	bx	lr

08007700 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007700:	b480      	push	{r7}
 8007702:	b087      	sub	sp, #28
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	7b1b      	ldrb	r3, [r3, #12]
 800770e:	2b00      	cmp	r3, #0
 8007710:	f040 809d 	bne.w	800784e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	785b      	ldrb	r3, [r3, #1]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d04c      	beq.n	80077b6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	4413      	add	r3, r2
 8007726:	881b      	ldrh	r3, [r3, #0]
 8007728:	823b      	strh	r3, [r7, #16]
 800772a:	8a3b      	ldrh	r3, [r7, #16]
 800772c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007730:	2b00      	cmp	r3, #0
 8007732:	d01b      	beq.n	800776c <USB_EPClearStall+0x6c>
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	4413      	add	r3, r2
 800773e:	881b      	ldrh	r3, [r3, #0]
 8007740:	b29b      	uxth	r3, r3
 8007742:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800774a:	81fb      	strh	r3, [r7, #14]
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	441a      	add	r2, r3
 8007756:	89fb      	ldrh	r3, [r7, #14]
 8007758:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800775c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007760:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007764:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007768:	b29b      	uxth	r3, r3
 800776a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	78db      	ldrb	r3, [r3, #3]
 8007770:	2b01      	cmp	r3, #1
 8007772:	d06c      	beq.n	800784e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	4413      	add	r3, r2
 800777e:	881b      	ldrh	r3, [r3, #0]
 8007780:	b29b      	uxth	r3, r3
 8007782:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007786:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800778a:	81bb      	strh	r3, [r7, #12]
 800778c:	89bb      	ldrh	r3, [r7, #12]
 800778e:	f083 0320 	eor.w	r3, r3, #32
 8007792:	81bb      	strh	r3, [r7, #12]
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	441a      	add	r2, r3
 800779e:	89bb      	ldrh	r3, [r7, #12]
 80077a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	8013      	strh	r3, [r2, #0]
 80077b4:	e04b      	b.n	800784e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	4413      	add	r3, r2
 80077c0:	881b      	ldrh	r3, [r3, #0]
 80077c2:	82fb      	strh	r3, [r7, #22]
 80077c4:	8afb      	ldrh	r3, [r7, #22]
 80077c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d01b      	beq.n	8007806 <USB_EPClearStall+0x106>
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	4413      	add	r3, r2
 80077d8:	881b      	ldrh	r3, [r3, #0]
 80077da:	b29b      	uxth	r3, r3
 80077dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077e4:	82bb      	strh	r3, [r7, #20]
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	441a      	add	r2, r3
 80077f0:	8abb      	ldrh	r3, [r7, #20]
 80077f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80077fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007802:	b29b      	uxth	r3, r3
 8007804:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	4413      	add	r3, r2
 8007810:	881b      	ldrh	r3, [r3, #0]
 8007812:	b29b      	uxth	r3, r3
 8007814:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800781c:	827b      	strh	r3, [r7, #18]
 800781e:	8a7b      	ldrh	r3, [r7, #18]
 8007820:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007824:	827b      	strh	r3, [r7, #18]
 8007826:	8a7b      	ldrh	r3, [r7, #18]
 8007828:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800782c:	827b      	strh	r3, [r7, #18]
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	441a      	add	r2, r3
 8007838:	8a7b      	ldrh	r3, [r7, #18]
 800783a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800783e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007842:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800784a:	b29b      	uxth	r3, r3
 800784c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800784e:	2300      	movs	r3, #0
}
 8007850:	4618      	mov	r0, r3
 8007852:	371c      	adds	r7, #28
 8007854:	46bd      	mov	sp, r7
 8007856:	bc80      	pop	{r7}
 8007858:	4770      	bx	lr

0800785a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800785a:	b480      	push	{r7}
 800785c:	b083      	sub	sp, #12
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
 8007862:	460b      	mov	r3, r1
 8007864:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007866:	78fb      	ldrb	r3, [r7, #3]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d103      	bne.n	8007874 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2280      	movs	r2, #128	; 0x80
 8007870:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007874:	2300      	movs	r3, #0
}
 8007876:	4618      	mov	r0, r3
 8007878:	370c      	adds	r7, #12
 800787a:	46bd      	mov	sp, r7
 800787c:	bc80      	pop	{r7}
 800787e:	4770      	bx	lr

08007880 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007880:	b480      	push	{r7}
 8007882:	b083      	sub	sp, #12
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007888:	2300      	movs	r3, #0
}
 800788a:	4618      	mov	r0, r3
 800788c:	370c      	adds	r7, #12
 800788e:	46bd      	mov	sp, r7
 8007890:	bc80      	pop	{r7}
 8007892:	4770      	bx	lr

08007894 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	370c      	adds	r7, #12
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bc80      	pop	{r7}
 80078a6:	4770      	bx	lr

080078a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b085      	sub	sp, #20
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80078ba:	68fb      	ldr	r3, [r7, #12]
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3714      	adds	r7, #20
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bc80      	pop	{r7}
 80078c4:	4770      	bx	lr

080078c6 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80078c6:	b480      	push	{r7}
 80078c8:	b083      	sub	sp, #12
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
 80078ce:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80078d0:	2300      	movs	r3, #0
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	370c      	adds	r7, #12
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bc80      	pop	{r7}
 80078da:	4770      	bx	lr

080078dc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80078dc:	b480      	push	{r7}
 80078de:	b08d      	sub	sp, #52	; 0x34
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	4611      	mov	r1, r2
 80078e8:	461a      	mov	r2, r3
 80078ea:	460b      	mov	r3, r1
 80078ec:	80fb      	strh	r3, [r7, #6]
 80078ee:	4613      	mov	r3, r2
 80078f0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80078f2:	88bb      	ldrh	r3, [r7, #4]
 80078f4:	3301      	adds	r3, #1
 80078f6:	085b      	lsrs	r3, r3, #1
 80078f8:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007902:	88fb      	ldrh	r3, [r7, #6]
 8007904:	005a      	lsls	r2, r3, #1
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	4413      	add	r3, r2
 800790a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800790e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007910:	6a3b      	ldr	r3, [r7, #32]
 8007912:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007914:	e01e      	b.n	8007954 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8007916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800791c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791e:	3301      	adds	r3, #1
 8007920:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	b29b      	uxth	r3, r3
 8007928:	021b      	lsls	r3, r3, #8
 800792a:	b29b      	uxth	r3, r3
 800792c:	461a      	mov	r2, r3
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	4313      	orrs	r3, r2
 8007932:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	b29a      	uxth	r2, r3
 8007938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800793c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793e:	3302      	adds	r3, #2
 8007940:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007944:	3302      	adds	r3, #2
 8007946:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8007948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794a:	3301      	adds	r3, #1
 800794c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800794e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007950:	3b01      	subs	r3, #1
 8007952:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007956:	2b00      	cmp	r3, #0
 8007958:	d1dd      	bne.n	8007916 <USB_WritePMA+0x3a>
  }
}
 800795a:	bf00      	nop
 800795c:	bf00      	nop
 800795e:	3734      	adds	r7, #52	; 0x34
 8007960:	46bd      	mov	sp, r7
 8007962:	bc80      	pop	{r7}
 8007964:	4770      	bx	lr

08007966 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007966:	b480      	push	{r7}
 8007968:	b08b      	sub	sp, #44	; 0x2c
 800796a:	af00      	add	r7, sp, #0
 800796c:	60f8      	str	r0, [r7, #12]
 800796e:	60b9      	str	r1, [r7, #8]
 8007970:	4611      	mov	r1, r2
 8007972:	461a      	mov	r2, r3
 8007974:	460b      	mov	r3, r1
 8007976:	80fb      	strh	r3, [r7, #6]
 8007978:	4613      	mov	r3, r2
 800797a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800797c:	88bb      	ldrh	r3, [r7, #4]
 800797e:	085b      	lsrs	r3, r3, #1
 8007980:	b29b      	uxth	r3, r3
 8007982:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800798c:	88fb      	ldrh	r3, [r7, #6]
 800798e:	005a      	lsls	r2, r3, #1
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	4413      	add	r3, r2
 8007994:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007998:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	627b      	str	r3, [r7, #36]	; 0x24
 800799e:	e01b      	b.n	80079d8 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80079a0:	6a3b      	ldr	r3, [r7, #32]
 80079a2:	881b      	ldrh	r3, [r3, #0]
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80079a8:	6a3b      	ldr	r3, [r7, #32]
 80079aa:	3302      	adds	r3, #2
 80079ac:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	b2da      	uxtb	r2, r3
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	3301      	adds	r3, #1
 80079ba:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	0a1b      	lsrs	r3, r3, #8
 80079c0:	b2da      	uxtb	r2, r3
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	3301      	adds	r3, #1
 80079ca:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80079cc:	6a3b      	ldr	r3, [r7, #32]
 80079ce:	3302      	adds	r3, #2
 80079d0:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80079d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d4:	3b01      	subs	r3, #1
 80079d6:	627b      	str	r3, [r7, #36]	; 0x24
 80079d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1e0      	bne.n	80079a0 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80079de:	88bb      	ldrh	r3, [r7, #4]
 80079e0:	f003 0301 	and.w	r3, r3, #1
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d007      	beq.n	80079fa <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80079ea:	6a3b      	ldr	r3, [r7, #32]
 80079ec:	881b      	ldrh	r3, [r3, #0]
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	b2da      	uxtb	r2, r3
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	701a      	strb	r2, [r3, #0]
  }
}
 80079fa:	bf00      	nop
 80079fc:	372c      	adds	r7, #44	; 0x2c
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bc80      	pop	{r7}
 8007a02:	4770      	bx	lr

08007a04 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b084      	sub	sp, #16
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	460b      	mov	r3, r1
 8007a0e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007a10:	2300      	movs	r3, #0
 8007a12:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	7c1b      	ldrb	r3, [r3, #16]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d115      	bne.n	8007a48 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007a1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a20:	2202      	movs	r2, #2
 8007a22:	2181      	movs	r1, #129	; 0x81
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f001 fed6 	bl	80097d6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007a30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a34:	2202      	movs	r2, #2
 8007a36:	2101      	movs	r1, #1
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f001 fecc 	bl	80097d6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2201      	movs	r2, #1
 8007a42:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007a46:	e012      	b.n	8007a6e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007a48:	2340      	movs	r3, #64	; 0x40
 8007a4a:	2202      	movs	r2, #2
 8007a4c:	2181      	movs	r1, #129	; 0x81
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f001 fec1 	bl	80097d6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007a5a:	2340      	movs	r3, #64	; 0x40
 8007a5c:	2202      	movs	r2, #2
 8007a5e:	2101      	movs	r1, #1
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f001 feb8 	bl	80097d6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007a6e:	2308      	movs	r3, #8
 8007a70:	2203      	movs	r2, #3
 8007a72:	2182      	movs	r1, #130	; 0x82
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f001 feae 	bl	80097d6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007a80:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007a84:	f001 ffce 	bl	8009a24 <USBD_static_malloc>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d102      	bne.n	8007aa0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	73fb      	strb	r3, [r7, #15]
 8007a9e:	e026      	b.n	8007aee <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aa6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	2200      	movs	r2, #0
 8007abe:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	7c1b      	ldrb	r3, [r3, #16]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d109      	bne.n	8007ade <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ad0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ad4:	2101      	movs	r1, #1
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f001 ff6e 	bl	80099b8 <USBD_LL_PrepareReceive>
 8007adc:	e007      	b.n	8007aee <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ae4:	2340      	movs	r3, #64	; 0x40
 8007ae6:	2101      	movs	r1, #1
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f001 ff65 	bl	80099b8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3710      	adds	r7, #16
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	460b      	mov	r3, r1
 8007b02:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007b04:	2300      	movs	r3, #0
 8007b06:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007b08:	2181      	movs	r1, #129	; 0x81
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f001 fe89 	bl	8009822 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007b16:	2101      	movs	r1, #1
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f001 fe82 	bl	8009822 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007b26:	2182      	movs	r1, #130	; 0x82
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f001 fe7a 	bl	8009822 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00e      	beq.n	8007b5c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f001 ff74 	bl	8009a3c <USBD_static_free>
    pdev->pClassData = NULL;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3710      	adds	r7, #16
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b086      	sub	sp, #24
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
 8007b6e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b76:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007b80:	2300      	movs	r3, #0
 8007b82:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d039      	beq.n	8007c04 <USBD_CDC_Setup+0x9e>
 8007b90:	2b20      	cmp	r3, #32
 8007b92:	d17f      	bne.n	8007c94 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	88db      	ldrh	r3, [r3, #6]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d029      	beq.n	8007bf0 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	b25b      	sxtb	r3, r3
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	da11      	bge.n	8007bca <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	683a      	ldr	r2, [r7, #0]
 8007bb0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007bb2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007bb4:	683a      	ldr	r2, [r7, #0]
 8007bb6:	88d2      	ldrh	r2, [r2, #6]
 8007bb8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007bba:	6939      	ldr	r1, [r7, #16]
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	88db      	ldrh	r3, [r3, #6]
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f001 fa09 	bl	8008fda <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007bc8:	e06b      	b.n	8007ca2 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	785a      	ldrb	r2, [r3, #1]
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	88db      	ldrh	r3, [r3, #6]
 8007bd8:	b2da      	uxtb	r2, r3
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007be0:	6939      	ldr	r1, [r7, #16]
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	88db      	ldrh	r3, [r3, #6]
 8007be6:	461a      	mov	r2, r3
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f001 fa24 	bl	8009036 <USBD_CtlPrepareRx>
      break;
 8007bee:	e058      	b.n	8007ca2 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	683a      	ldr	r2, [r7, #0]
 8007bfa:	7850      	ldrb	r0, [r2, #1]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	6839      	ldr	r1, [r7, #0]
 8007c00:	4798      	blx	r3
      break;
 8007c02:	e04e      	b.n	8007ca2 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	785b      	ldrb	r3, [r3, #1]
 8007c08:	2b0b      	cmp	r3, #11
 8007c0a:	d02e      	beq.n	8007c6a <USBD_CDC_Setup+0x104>
 8007c0c:	2b0b      	cmp	r3, #11
 8007c0e:	dc38      	bgt.n	8007c82 <USBD_CDC_Setup+0x11c>
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d002      	beq.n	8007c1a <USBD_CDC_Setup+0xb4>
 8007c14:	2b0a      	cmp	r3, #10
 8007c16:	d014      	beq.n	8007c42 <USBD_CDC_Setup+0xdc>
 8007c18:	e033      	b.n	8007c82 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c20:	2b03      	cmp	r3, #3
 8007c22:	d107      	bne.n	8007c34 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007c24:	f107 030c 	add.w	r3, r7, #12
 8007c28:	2202      	movs	r2, #2
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f001 f9d4 	bl	8008fda <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c32:	e02e      	b.n	8007c92 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007c34:	6839      	ldr	r1, [r7, #0]
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f001 f965 	bl	8008f06 <USBD_CtlError>
            ret = USBD_FAIL;
 8007c3c:	2302      	movs	r3, #2
 8007c3e:	75fb      	strb	r3, [r7, #23]
          break;
 8007c40:	e027      	b.n	8007c92 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c48:	2b03      	cmp	r3, #3
 8007c4a:	d107      	bne.n	8007c5c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007c4c:	f107 030f 	add.w	r3, r7, #15
 8007c50:	2201      	movs	r2, #1
 8007c52:	4619      	mov	r1, r3
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f001 f9c0 	bl	8008fda <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c5a:	e01a      	b.n	8007c92 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007c5c:	6839      	ldr	r1, [r7, #0]
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f001 f951 	bl	8008f06 <USBD_CtlError>
            ret = USBD_FAIL;
 8007c64:	2302      	movs	r3, #2
 8007c66:	75fb      	strb	r3, [r7, #23]
          break;
 8007c68:	e013      	b.n	8007c92 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c70:	2b03      	cmp	r3, #3
 8007c72:	d00d      	beq.n	8007c90 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007c74:	6839      	ldr	r1, [r7, #0]
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f001 f945 	bl	8008f06 <USBD_CtlError>
            ret = USBD_FAIL;
 8007c7c:	2302      	movs	r3, #2
 8007c7e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007c80:	e006      	b.n	8007c90 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007c82:	6839      	ldr	r1, [r7, #0]
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f001 f93e 	bl	8008f06 <USBD_CtlError>
          ret = USBD_FAIL;
 8007c8a:	2302      	movs	r3, #2
 8007c8c:	75fb      	strb	r3, [r7, #23]
          break;
 8007c8e:	e000      	b.n	8007c92 <USBD_CDC_Setup+0x12c>
          break;
 8007c90:	bf00      	nop
      }
      break;
 8007c92:	e006      	b.n	8007ca2 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007c94:	6839      	ldr	r1, [r7, #0]
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f001 f935 	bl	8008f06 <USBD_CtlError>
      ret = USBD_FAIL;
 8007c9c:	2302      	movs	r3, #2
 8007c9e:	75fb      	strb	r3, [r7, #23]
      break;
 8007ca0:	bf00      	nop
  }

  return ret;
 8007ca2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3718      	adds	r7, #24
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	460b      	mov	r3, r1
 8007cb6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cbe:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cc6:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d03a      	beq.n	8007d48 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007cd2:	78fa      	ldrb	r2, [r7, #3]
 8007cd4:	6879      	ldr	r1, [r7, #4]
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	4413      	add	r3, r2
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	440b      	add	r3, r1
 8007ce0:	331c      	adds	r3, #28
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d029      	beq.n	8007d3c <USBD_CDC_DataIn+0x90>
 8007ce8:	78fa      	ldrb	r2, [r7, #3]
 8007cea:	6879      	ldr	r1, [r7, #4]
 8007cec:	4613      	mov	r3, r2
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	4413      	add	r3, r2
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	440b      	add	r3, r1
 8007cf6:	331c      	adds	r3, #28
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	78f9      	ldrb	r1, [r7, #3]
 8007cfc:	68b8      	ldr	r0, [r7, #8]
 8007cfe:	460b      	mov	r3, r1
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	440b      	add	r3, r1
 8007d04:	00db      	lsls	r3, r3, #3
 8007d06:	4403      	add	r3, r0
 8007d08:	3338      	adds	r3, #56	; 0x38
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007d10:	fb01 f303 	mul.w	r3, r1, r3
 8007d14:	1ad3      	subs	r3, r2, r3
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d110      	bne.n	8007d3c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007d1a:	78fa      	ldrb	r2, [r7, #3]
 8007d1c:	6879      	ldr	r1, [r7, #4]
 8007d1e:	4613      	mov	r3, r2
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	4413      	add	r3, r2
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	440b      	add	r3, r1
 8007d28:	331c      	adds	r3, #28
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007d2e:	78f9      	ldrb	r1, [r7, #3]
 8007d30:	2300      	movs	r3, #0
 8007d32:	2200      	movs	r2, #0
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f001 fe1c 	bl	8009972 <USBD_LL_Transmit>
 8007d3a:	e003      	b.n	8007d44 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007d44:	2300      	movs	r3, #0
 8007d46:	e000      	b.n	8007d4a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007d48:	2302      	movs	r3, #2
  }
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3710      	adds	r7, #16
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b084      	sub	sp, #16
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d64:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007d66:	78fb      	ldrb	r3, [r7, #3]
 8007d68:	4619      	mov	r1, r3
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f001 fe47 	bl	80099fe <USBD_LL_GetRxDataSize>
 8007d70:	4602      	mov	r2, r0
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d00d      	beq.n	8007d9e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d88:	68db      	ldr	r3, [r3, #12]
 8007d8a:	68fa      	ldr	r2, [r7, #12]
 8007d8c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007d90:	68fa      	ldr	r2, [r7, #12]
 8007d92:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007d96:	4611      	mov	r1, r2
 8007d98:	4798      	blx	r3

    return USBD_OK;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	e000      	b.n	8007da0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007d9e:	2302      	movs	r3, #2
  }
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007db6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d015      	beq.n	8007dee <USBD_CDC_EP0_RxReady+0x46>
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007dc8:	2bff      	cmp	r3, #255	; 0xff
 8007dca:	d010      	beq.n	8007dee <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007dda:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007ddc:	68fa      	ldr	r2, [r7, #12]
 8007dde:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007de2:	b292      	uxth	r2, r2
 8007de4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	22ff      	movs	r2, #255	; 0xff
 8007dea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007dee:	2300      	movs	r3, #0
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3710      	adds	r7, #16
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2243      	movs	r2, #67	; 0x43
 8007e04:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007e06:	4b03      	ldr	r3, [pc, #12]	; (8007e14 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bc80      	pop	{r7}
 8007e10:	4770      	bx	lr
 8007e12:	bf00      	nop
 8007e14:	20000094 	.word	0x20000094

08007e18 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2243      	movs	r2, #67	; 0x43
 8007e24:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007e26:	4b03      	ldr	r3, [pc, #12]	; (8007e34 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	370c      	adds	r7, #12
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bc80      	pop	{r7}
 8007e30:	4770      	bx	lr
 8007e32:	bf00      	nop
 8007e34:	20000050 	.word	0x20000050

08007e38 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2243      	movs	r2, #67	; 0x43
 8007e44:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007e46:	4b03      	ldr	r3, [pc, #12]	; (8007e54 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	370c      	adds	r7, #12
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bc80      	pop	{r7}
 8007e50:	4770      	bx	lr
 8007e52:	bf00      	nop
 8007e54:	200000d8 	.word	0x200000d8

08007e58 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	220a      	movs	r2, #10
 8007e64:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007e66:	4b03      	ldr	r3, [pc, #12]	; (8007e74 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	370c      	adds	r7, #12
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bc80      	pop	{r7}
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	2000000c 	.word	0x2000000c

08007e78 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007e82:	2302      	movs	r3, #2
 8007e84:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d005      	beq.n	8007e98 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	683a      	ldr	r2, [r7, #0]
 8007e90:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007e94:	2300      	movs	r3, #0
 8007e96:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3714      	adds	r7, #20
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bc80      	pop	{r7}
 8007ea2:	4770      	bx	lr

08007ea4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b087      	sub	sp, #28
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	60f8      	str	r0, [r7, #12]
 8007eac:	60b9      	str	r1, [r7, #8]
 8007eae:	4613      	mov	r3, r2
 8007eb0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eb8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	68ba      	ldr	r2, [r7, #8]
 8007ebe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007ec2:	88fa      	ldrh	r2, [r7, #6]
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	371c      	adds	r7, #28
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bc80      	pop	{r7}
 8007ed4:	4770      	bx	lr

08007ed6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007ed6:	b480      	push	{r7}
 8007ed8:	b085      	sub	sp, #20
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
 8007ede:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ee6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	683a      	ldr	r2, [r7, #0]
 8007eec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3714      	adds	r7, #20
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bc80      	pop	{r7}
 8007efa:	4770      	bx	lr

08007efc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f0a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d01c      	beq.n	8007f50 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d115      	bne.n	8007f4c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	2181      	movs	r1, #129	; 0x81
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f001 fd15 	bl	8009972 <USBD_LL_Transmit>

      return USBD_OK;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	e002      	b.n	8007f52 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	e000      	b.n	8007f52 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007f50:	2302      	movs	r3, #2
  }
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3710      	adds	r7, #16
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}

08007f5a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b084      	sub	sp, #16
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f68:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d017      	beq.n	8007fa4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	7c1b      	ldrb	r3, [r3, #16]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d109      	bne.n	8007f90 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f86:	2101      	movs	r1, #1
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f001 fd15 	bl	80099b8 <USBD_LL_PrepareReceive>
 8007f8e:	e007      	b.n	8007fa0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f96:	2340      	movs	r3, #64	; 0x40
 8007f98:	2101      	movs	r1, #1
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f001 fd0c 	bl	80099b8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	e000      	b.n	8007fa6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007fa4:	2302      	movs	r3, #2
  }
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3710      	adds	r7, #16
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}

08007fae <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007fae:	b580      	push	{r7, lr}
 8007fb0:	b084      	sub	sp, #16
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	60f8      	str	r0, [r7, #12]
 8007fb6:	60b9      	str	r1, [r7, #8]
 8007fb8:	4613      	mov	r3, r2
 8007fba:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d101      	bne.n	8007fc6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007fc2:	2302      	movs	r3, #2
 8007fc4:	e01a      	b.n	8007ffc <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d003      	beq.n	8007fd8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d003      	beq.n	8007fe6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	68ba      	ldr	r2, [r7, #8]
 8007fe2:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2201      	movs	r2, #1
 8007fea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	79fa      	ldrb	r2, [r7, #7]
 8007ff2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007ff4:	68f8      	ldr	r0, [r7, #12]
 8007ff6:	f001 fb79 	bl	80096ec <USBD_LL_Init>

  return USBD_OK;
 8007ffa:	2300      	movs	r3, #0
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3710      	adds	r7, #16
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008004:	b480      	push	{r7}
 8008006:	b085      	sub	sp, #20
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800800e:	2300      	movs	r3, #0
 8008010:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d006      	beq.n	8008026 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	683a      	ldr	r2, [r7, #0]
 800801c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008020:	2300      	movs	r3, #0
 8008022:	73fb      	strb	r3, [r7, #15]
 8008024:	e001      	b.n	800802a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008026:	2302      	movs	r3, #2
 8008028:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800802a:	7bfb      	ldrb	r3, [r7, #15]
}
 800802c:	4618      	mov	r0, r3
 800802e:	3714      	adds	r7, #20
 8008030:	46bd      	mov	sp, r7
 8008032:	bc80      	pop	{r7}
 8008034:	4770      	bx	lr

08008036 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b082      	sub	sp, #8
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f001 fbae 	bl	80097a0 <USBD_LL_Start>

  return USBD_OK;
 8008044:	2300      	movs	r3, #0
}
 8008046:	4618      	mov	r0, r3
 8008048:	3708      	adds	r7, #8
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}

0800804e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800804e:	b480      	push	{r7}
 8008050:	b083      	sub	sp, #12
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008056:	2300      	movs	r3, #0
}
 8008058:	4618      	mov	r0, r3
 800805a:	370c      	adds	r7, #12
 800805c:	46bd      	mov	sp, r7
 800805e:	bc80      	pop	{r7}
 8008060:	4770      	bx	lr

08008062 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b084      	sub	sp, #16
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
 800806a:	460b      	mov	r3, r1
 800806c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800806e:	2302      	movs	r3, #2
 8008070:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008078:	2b00      	cmp	r3, #0
 800807a:	d00c      	beq.n	8008096 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	78fa      	ldrb	r2, [r7, #3]
 8008086:	4611      	mov	r1, r2
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	4798      	blx	r3
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d101      	bne.n	8008096 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008092:	2300      	movs	r3, #0
 8008094:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008096:	7bfb      	ldrb	r3, [r7, #15]
}
 8008098:	4618      	mov	r0, r3
 800809a:	3710      	adds	r7, #16
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b082      	sub	sp, #8
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	460b      	mov	r3, r1
 80080aa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	78fa      	ldrb	r2, [r7, #3]
 80080b6:	4611      	mov	r1, r2
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	4798      	blx	r3

  return USBD_OK;
 80080bc:	2300      	movs	r3, #0
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3708      	adds	r7, #8
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}

080080c6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80080c6:	b580      	push	{r7, lr}
 80080c8:	b082      	sub	sp, #8
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
 80080ce:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80080d6:	6839      	ldr	r1, [r7, #0]
 80080d8:	4618      	mov	r0, r3
 80080da:	f000 fed8 	bl	8008e8e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2201      	movs	r2, #1
 80080e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80080ec:	461a      	mov	r2, r3
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80080fa:	f003 031f 	and.w	r3, r3, #31
 80080fe:	2b02      	cmp	r3, #2
 8008100:	d016      	beq.n	8008130 <USBD_LL_SetupStage+0x6a>
 8008102:	2b02      	cmp	r3, #2
 8008104:	d81c      	bhi.n	8008140 <USBD_LL_SetupStage+0x7a>
 8008106:	2b00      	cmp	r3, #0
 8008108:	d002      	beq.n	8008110 <USBD_LL_SetupStage+0x4a>
 800810a:	2b01      	cmp	r3, #1
 800810c:	d008      	beq.n	8008120 <USBD_LL_SetupStage+0x5a>
 800810e:	e017      	b.n	8008140 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008116:	4619      	mov	r1, r3
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 f9cb 	bl	80084b4 <USBD_StdDevReq>
      break;
 800811e:	e01a      	b.n	8008156 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008126:	4619      	mov	r1, r3
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 fa2d 	bl	8008588 <USBD_StdItfReq>
      break;
 800812e:	e012      	b.n	8008156 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008136:	4619      	mov	r1, r3
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 fa6d 	bl	8008618 <USBD_StdEPReq>
      break;
 800813e:	e00a      	b.n	8008156 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008146:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800814a:	b2db      	uxtb	r3, r3
 800814c:	4619      	mov	r1, r3
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f001 fb86 	bl	8009860 <USBD_LL_StallEP>
      break;
 8008154:	bf00      	nop
  }

  return USBD_OK;
 8008156:	2300      	movs	r3, #0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3708      	adds	r7, #8
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b086      	sub	sp, #24
 8008164:	af00      	add	r7, sp, #0
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	460b      	mov	r3, r1
 800816a:	607a      	str	r2, [r7, #4]
 800816c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800816e:	7afb      	ldrb	r3, [r7, #11]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d14b      	bne.n	800820c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800817a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008182:	2b03      	cmp	r3, #3
 8008184:	d134      	bne.n	80081f0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	68da      	ldr	r2, [r3, #12]
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	691b      	ldr	r3, [r3, #16]
 800818e:	429a      	cmp	r2, r3
 8008190:	d919      	bls.n	80081c6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	68da      	ldr	r2, [r3, #12]
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	1ad2      	subs	r2, r2, r3
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	68da      	ldr	r2, [r3, #12]
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d203      	bcs.n	80081b4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	e002      	b.n	80081ba <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	461a      	mov	r2, r3
 80081bc:	6879      	ldr	r1, [r7, #4]
 80081be:	68f8      	ldr	r0, [r7, #12]
 80081c0:	f000 ff57 	bl	8009072 <USBD_CtlContinueRx>
 80081c4:	e038      	b.n	8008238 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081cc:	691b      	ldr	r3, [r3, #16]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d00a      	beq.n	80081e8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80081d8:	2b03      	cmp	r3, #3
 80081da:	d105      	bne.n	80081e8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081e2:	691b      	ldr	r3, [r3, #16]
 80081e4:	68f8      	ldr	r0, [r7, #12]
 80081e6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80081e8:	68f8      	ldr	r0, [r7, #12]
 80081ea:	f000 ff54 	bl	8009096 <USBD_CtlSendStatus>
 80081ee:	e023      	b.n	8008238 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80081f6:	2b05      	cmp	r3, #5
 80081f8:	d11e      	bne.n	8008238 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2200      	movs	r2, #0
 80081fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008202:	2100      	movs	r1, #0
 8008204:	68f8      	ldr	r0, [r7, #12]
 8008206:	f001 fb2b 	bl	8009860 <USBD_LL_StallEP>
 800820a:	e015      	b.n	8008238 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008212:	699b      	ldr	r3, [r3, #24]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d00d      	beq.n	8008234 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800821e:	2b03      	cmp	r3, #3
 8008220:	d108      	bne.n	8008234 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008228:	699b      	ldr	r3, [r3, #24]
 800822a:	7afa      	ldrb	r2, [r7, #11]
 800822c:	4611      	mov	r1, r2
 800822e:	68f8      	ldr	r0, [r7, #12]
 8008230:	4798      	blx	r3
 8008232:	e001      	b.n	8008238 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008234:	2302      	movs	r3, #2
 8008236:	e000      	b.n	800823a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008238:	2300      	movs	r3, #0
}
 800823a:	4618      	mov	r0, r3
 800823c:	3718      	adds	r7, #24
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}

08008242 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008242:	b580      	push	{r7, lr}
 8008244:	b086      	sub	sp, #24
 8008246:	af00      	add	r7, sp, #0
 8008248:	60f8      	str	r0, [r7, #12]
 800824a:	460b      	mov	r3, r1
 800824c:	607a      	str	r2, [r7, #4]
 800824e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008250:	7afb      	ldrb	r3, [r7, #11]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d17f      	bne.n	8008356 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	3314      	adds	r3, #20
 800825a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008262:	2b02      	cmp	r3, #2
 8008264:	d15c      	bne.n	8008320 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	68da      	ldr	r2, [r3, #12]
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	691b      	ldr	r3, [r3, #16]
 800826e:	429a      	cmp	r2, r3
 8008270:	d915      	bls.n	800829e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	68da      	ldr	r2, [r3, #12]
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	691b      	ldr	r3, [r3, #16]
 800827a:	1ad2      	subs	r2, r2, r3
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	68db      	ldr	r3, [r3, #12]
 8008284:	b29b      	uxth	r3, r3
 8008286:	461a      	mov	r2, r3
 8008288:	6879      	ldr	r1, [r7, #4]
 800828a:	68f8      	ldr	r0, [r7, #12]
 800828c:	f000 fec1 	bl	8009012 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008290:	2300      	movs	r3, #0
 8008292:	2200      	movs	r2, #0
 8008294:	2100      	movs	r1, #0
 8008296:	68f8      	ldr	r0, [r7, #12]
 8008298:	f001 fb8e 	bl	80099b8 <USBD_LL_PrepareReceive>
 800829c:	e04e      	b.n	800833c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	697a      	ldr	r2, [r7, #20]
 80082a4:	6912      	ldr	r2, [r2, #16]
 80082a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80082aa:	fb01 f202 	mul.w	r2, r1, r2
 80082ae:	1a9b      	subs	r3, r3, r2
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d11c      	bne.n	80082ee <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	689a      	ldr	r2, [r3, #8]
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80082bc:	429a      	cmp	r2, r3
 80082be:	d316      	bcc.n	80082ee <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	689a      	ldr	r2, [r3, #8]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d20f      	bcs.n	80082ee <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80082ce:	2200      	movs	r2, #0
 80082d0:	2100      	movs	r1, #0
 80082d2:	68f8      	ldr	r0, [r7, #12]
 80082d4:	f000 fe9d 	bl	8009012 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2200      	movs	r2, #0
 80082dc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80082e0:	2300      	movs	r3, #0
 80082e2:	2200      	movs	r2, #0
 80082e4:	2100      	movs	r1, #0
 80082e6:	68f8      	ldr	r0, [r7, #12]
 80082e8:	f001 fb66 	bl	80099b8 <USBD_LL_PrepareReceive>
 80082ec:	e026      	b.n	800833c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d00a      	beq.n	8008310 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008300:	2b03      	cmp	r3, #3
 8008302:	d105      	bne.n	8008310 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	68f8      	ldr	r0, [r7, #12]
 800830e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008310:	2180      	movs	r1, #128	; 0x80
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	f001 faa4 	bl	8009860 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008318:	68f8      	ldr	r0, [r7, #12]
 800831a:	f000 fecf 	bl	80090bc <USBD_CtlReceiveStatus>
 800831e:	e00d      	b.n	800833c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008326:	2b04      	cmp	r3, #4
 8008328:	d004      	beq.n	8008334 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008330:	2b00      	cmp	r3, #0
 8008332:	d103      	bne.n	800833c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008334:	2180      	movs	r1, #128	; 0x80
 8008336:	68f8      	ldr	r0, [r7, #12]
 8008338:	f001 fa92 	bl	8009860 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008342:	2b01      	cmp	r3, #1
 8008344:	d11d      	bne.n	8008382 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008346:	68f8      	ldr	r0, [r7, #12]
 8008348:	f7ff fe81 	bl	800804e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2200      	movs	r2, #0
 8008350:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008354:	e015      	b.n	8008382 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800835c:	695b      	ldr	r3, [r3, #20]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d00d      	beq.n	800837e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008368:	2b03      	cmp	r3, #3
 800836a:	d108      	bne.n	800837e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008372:	695b      	ldr	r3, [r3, #20]
 8008374:	7afa      	ldrb	r2, [r7, #11]
 8008376:	4611      	mov	r1, r2
 8008378:	68f8      	ldr	r0, [r7, #12]
 800837a:	4798      	blx	r3
 800837c:	e001      	b.n	8008382 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800837e:	2302      	movs	r3, #2
 8008380:	e000      	b.n	8008384 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008382:	2300      	movs	r3, #0
}
 8008384:	4618      	mov	r0, r3
 8008386:	3718      	adds	r7, #24
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b082      	sub	sp, #8
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008394:	2340      	movs	r3, #64	; 0x40
 8008396:	2200      	movs	r2, #0
 8008398:	2100      	movs	r1, #0
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f001 fa1b 	bl	80097d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2240      	movs	r2, #64	; 0x40
 80083ac:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80083b0:	2340      	movs	r3, #64	; 0x40
 80083b2:	2200      	movs	r2, #0
 80083b4:	2180      	movs	r1, #128	; 0x80
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f001 fa0d 	bl	80097d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2201      	movs	r2, #1
 80083c0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2240      	movs	r2, #64	; 0x40
 80083c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2200      	movs	r2, #0
 80083d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d009      	beq.n	8008404 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	6852      	ldr	r2, [r2, #4]
 80083fc:	b2d2      	uxtb	r2, r2
 80083fe:	4611      	mov	r1, r2
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	4798      	blx	r3
  }

  return USBD_OK;
 8008404:	2300      	movs	r3, #0
}
 8008406:	4618      	mov	r0, r3
 8008408:	3708      	adds	r7, #8
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800840e:	b480      	push	{r7}
 8008410:	b083      	sub	sp, #12
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
 8008416:	460b      	mov	r3, r1
 8008418:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	78fa      	ldrb	r2, [r7, #3]
 800841e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008420:	2300      	movs	r3, #0
}
 8008422:	4618      	mov	r0, r3
 8008424:	370c      	adds	r7, #12
 8008426:	46bd      	mov	sp, r7
 8008428:	bc80      	pop	{r7}
 800842a:	4770      	bx	lr

0800842c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800842c:	b480      	push	{r7}
 800842e:	b083      	sub	sp, #12
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2204      	movs	r2, #4
 8008444:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008448:	2300      	movs	r3, #0
}
 800844a:	4618      	mov	r0, r3
 800844c:	370c      	adds	r7, #12
 800844e:	46bd      	mov	sp, r7
 8008450:	bc80      	pop	{r7}
 8008452:	4770      	bx	lr

08008454 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008462:	2b04      	cmp	r3, #4
 8008464:	d105      	bne.n	8008472 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008472:	2300      	movs	r3, #0
}
 8008474:	4618      	mov	r0, r3
 8008476:	370c      	adds	r7, #12
 8008478:	46bd      	mov	sp, r7
 800847a:	bc80      	pop	{r7}
 800847c:	4770      	bx	lr

0800847e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800847e:	b580      	push	{r7, lr}
 8008480:	b082      	sub	sp, #8
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800848c:	2b03      	cmp	r3, #3
 800848e:	d10b      	bne.n	80084a8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008496:	69db      	ldr	r3, [r3, #28]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d005      	beq.n	80084a8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084a2:	69db      	ldr	r3, [r3, #28]
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3708      	adds	r7, #8
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
	...

080084b4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084be:	2300      	movs	r3, #0
 80084c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084ca:	2b40      	cmp	r3, #64	; 0x40
 80084cc:	d005      	beq.n	80084da <USBD_StdDevReq+0x26>
 80084ce:	2b40      	cmp	r3, #64	; 0x40
 80084d0:	d84f      	bhi.n	8008572 <USBD_StdDevReq+0xbe>
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d009      	beq.n	80084ea <USBD_StdDevReq+0x36>
 80084d6:	2b20      	cmp	r3, #32
 80084d8:	d14b      	bne.n	8008572 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	6839      	ldr	r1, [r7, #0]
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	4798      	blx	r3
      break;
 80084e8:	e048      	b.n	800857c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	785b      	ldrb	r3, [r3, #1]
 80084ee:	2b09      	cmp	r3, #9
 80084f0:	d839      	bhi.n	8008566 <USBD_StdDevReq+0xb2>
 80084f2:	a201      	add	r2, pc, #4	; (adr r2, 80084f8 <USBD_StdDevReq+0x44>)
 80084f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f8:	08008549 	.word	0x08008549
 80084fc:	0800855d 	.word	0x0800855d
 8008500:	08008567 	.word	0x08008567
 8008504:	08008553 	.word	0x08008553
 8008508:	08008567 	.word	0x08008567
 800850c:	0800852b 	.word	0x0800852b
 8008510:	08008521 	.word	0x08008521
 8008514:	08008567 	.word	0x08008567
 8008518:	0800853f 	.word	0x0800853f
 800851c:	08008535 	.word	0x08008535
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008520:	6839      	ldr	r1, [r7, #0]
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f000 f9dc 	bl	80088e0 <USBD_GetDescriptor>
          break;
 8008528:	e022      	b.n	8008570 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800852a:	6839      	ldr	r1, [r7, #0]
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 fb3f 	bl	8008bb0 <USBD_SetAddress>
          break;
 8008532:	e01d      	b.n	8008570 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008534:	6839      	ldr	r1, [r7, #0]
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 fb7e 	bl	8008c38 <USBD_SetConfig>
          break;
 800853c:	e018      	b.n	8008570 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800853e:	6839      	ldr	r1, [r7, #0]
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 fc07 	bl	8008d54 <USBD_GetConfig>
          break;
 8008546:	e013      	b.n	8008570 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008548:	6839      	ldr	r1, [r7, #0]
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 fc37 	bl	8008dbe <USBD_GetStatus>
          break;
 8008550:	e00e      	b.n	8008570 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008552:	6839      	ldr	r1, [r7, #0]
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 fc65 	bl	8008e24 <USBD_SetFeature>
          break;
 800855a:	e009      	b.n	8008570 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800855c:	6839      	ldr	r1, [r7, #0]
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 fc74 	bl	8008e4c <USBD_ClrFeature>
          break;
 8008564:	e004      	b.n	8008570 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008566:	6839      	ldr	r1, [r7, #0]
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 fccc 	bl	8008f06 <USBD_CtlError>
          break;
 800856e:	bf00      	nop
      }
      break;
 8008570:	e004      	b.n	800857c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008572:	6839      	ldr	r1, [r7, #0]
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 fcc6 	bl	8008f06 <USBD_CtlError>
      break;
 800857a:	bf00      	nop
  }

  return ret;
 800857c:	7bfb      	ldrb	r3, [r7, #15]
}
 800857e:	4618      	mov	r0, r3
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop

08008588 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008592:	2300      	movs	r3, #0
 8008594:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800859e:	2b40      	cmp	r3, #64	; 0x40
 80085a0:	d005      	beq.n	80085ae <USBD_StdItfReq+0x26>
 80085a2:	2b40      	cmp	r3, #64	; 0x40
 80085a4:	d82e      	bhi.n	8008604 <USBD_StdItfReq+0x7c>
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d001      	beq.n	80085ae <USBD_StdItfReq+0x26>
 80085aa:	2b20      	cmp	r3, #32
 80085ac:	d12a      	bne.n	8008604 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085b4:	3b01      	subs	r3, #1
 80085b6:	2b02      	cmp	r3, #2
 80085b8:	d81d      	bhi.n	80085f6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	889b      	ldrh	r3, [r3, #4]
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d813      	bhi.n	80085ec <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	6839      	ldr	r1, [r7, #0]
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	4798      	blx	r3
 80085d2:	4603      	mov	r3, r0
 80085d4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	88db      	ldrh	r3, [r3, #6]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d110      	bne.n	8008600 <USBD_StdItfReq+0x78>
 80085de:	7bfb      	ldrb	r3, [r7, #15]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d10d      	bne.n	8008600 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 fd56 	bl	8009096 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80085ea:	e009      	b.n	8008600 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80085ec:	6839      	ldr	r1, [r7, #0]
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 fc89 	bl	8008f06 <USBD_CtlError>
          break;
 80085f4:	e004      	b.n	8008600 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80085f6:	6839      	ldr	r1, [r7, #0]
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 fc84 	bl	8008f06 <USBD_CtlError>
          break;
 80085fe:	e000      	b.n	8008602 <USBD_StdItfReq+0x7a>
          break;
 8008600:	bf00      	nop
      }
      break;
 8008602:	e004      	b.n	800860e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008604:	6839      	ldr	r1, [r7, #0]
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 fc7d 	bl	8008f06 <USBD_CtlError>
      break;
 800860c:	bf00      	nop
  }

  return USBD_OK;
 800860e:	2300      	movs	r3, #0
}
 8008610:	4618      	mov	r0, r3
 8008612:	3710      	adds	r7, #16
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008622:	2300      	movs	r3, #0
 8008624:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	889b      	ldrh	r3, [r3, #4]
 800862a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008634:	2b40      	cmp	r3, #64	; 0x40
 8008636:	d007      	beq.n	8008648 <USBD_StdEPReq+0x30>
 8008638:	2b40      	cmp	r3, #64	; 0x40
 800863a:	f200 8146 	bhi.w	80088ca <USBD_StdEPReq+0x2b2>
 800863e:	2b00      	cmp	r3, #0
 8008640:	d00a      	beq.n	8008658 <USBD_StdEPReq+0x40>
 8008642:	2b20      	cmp	r3, #32
 8008644:	f040 8141 	bne.w	80088ca <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	6839      	ldr	r1, [r7, #0]
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	4798      	blx	r3
      break;
 8008656:	e13d      	b.n	80088d4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008660:	2b20      	cmp	r3, #32
 8008662:	d10a      	bne.n	800867a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	6839      	ldr	r1, [r7, #0]
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	4798      	blx	r3
 8008672:	4603      	mov	r3, r0
 8008674:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008676:	7bfb      	ldrb	r3, [r7, #15]
 8008678:	e12d      	b.n	80088d6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	785b      	ldrb	r3, [r3, #1]
 800867e:	2b03      	cmp	r3, #3
 8008680:	d007      	beq.n	8008692 <USBD_StdEPReq+0x7a>
 8008682:	2b03      	cmp	r3, #3
 8008684:	f300 811b 	bgt.w	80088be <USBD_StdEPReq+0x2a6>
 8008688:	2b00      	cmp	r3, #0
 800868a:	d072      	beq.n	8008772 <USBD_StdEPReq+0x15a>
 800868c:	2b01      	cmp	r3, #1
 800868e:	d03a      	beq.n	8008706 <USBD_StdEPReq+0xee>
 8008690:	e115      	b.n	80088be <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008698:	2b02      	cmp	r3, #2
 800869a:	d002      	beq.n	80086a2 <USBD_StdEPReq+0x8a>
 800869c:	2b03      	cmp	r3, #3
 800869e:	d015      	beq.n	80086cc <USBD_StdEPReq+0xb4>
 80086a0:	e02b      	b.n	80086fa <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086a2:	7bbb      	ldrb	r3, [r7, #14]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d00c      	beq.n	80086c2 <USBD_StdEPReq+0xaa>
 80086a8:	7bbb      	ldrb	r3, [r7, #14]
 80086aa:	2b80      	cmp	r3, #128	; 0x80
 80086ac:	d009      	beq.n	80086c2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80086ae:	7bbb      	ldrb	r3, [r7, #14]
 80086b0:	4619      	mov	r1, r3
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f001 f8d4 	bl	8009860 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80086b8:	2180      	movs	r1, #128	; 0x80
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f001 f8d0 	bl	8009860 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80086c0:	e020      	b.n	8008704 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80086c2:	6839      	ldr	r1, [r7, #0]
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f000 fc1e 	bl	8008f06 <USBD_CtlError>
              break;
 80086ca:	e01b      	b.n	8008704 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	885b      	ldrh	r3, [r3, #2]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d10e      	bne.n	80086f2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80086d4:	7bbb      	ldrb	r3, [r7, #14]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00b      	beq.n	80086f2 <USBD_StdEPReq+0xda>
 80086da:	7bbb      	ldrb	r3, [r7, #14]
 80086dc:	2b80      	cmp	r3, #128	; 0x80
 80086de:	d008      	beq.n	80086f2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	88db      	ldrh	r3, [r3, #6]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d104      	bne.n	80086f2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80086e8:	7bbb      	ldrb	r3, [r7, #14]
 80086ea:	4619      	mov	r1, r3
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f001 f8b7 	bl	8009860 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 fccf 	bl	8009096 <USBD_CtlSendStatus>

              break;
 80086f8:	e004      	b.n	8008704 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80086fa:	6839      	ldr	r1, [r7, #0]
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f000 fc02 	bl	8008f06 <USBD_CtlError>
              break;
 8008702:	bf00      	nop
          }
          break;
 8008704:	e0e0      	b.n	80088c8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800870c:	2b02      	cmp	r3, #2
 800870e:	d002      	beq.n	8008716 <USBD_StdEPReq+0xfe>
 8008710:	2b03      	cmp	r3, #3
 8008712:	d015      	beq.n	8008740 <USBD_StdEPReq+0x128>
 8008714:	e026      	b.n	8008764 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008716:	7bbb      	ldrb	r3, [r7, #14]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d00c      	beq.n	8008736 <USBD_StdEPReq+0x11e>
 800871c:	7bbb      	ldrb	r3, [r7, #14]
 800871e:	2b80      	cmp	r3, #128	; 0x80
 8008720:	d009      	beq.n	8008736 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008722:	7bbb      	ldrb	r3, [r7, #14]
 8008724:	4619      	mov	r1, r3
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f001 f89a 	bl	8009860 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800872c:	2180      	movs	r1, #128	; 0x80
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f001 f896 	bl	8009860 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008734:	e01c      	b.n	8008770 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008736:	6839      	ldr	r1, [r7, #0]
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f000 fbe4 	bl	8008f06 <USBD_CtlError>
              break;
 800873e:	e017      	b.n	8008770 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	885b      	ldrh	r3, [r3, #2]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d112      	bne.n	800876e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008748:	7bbb      	ldrb	r3, [r7, #14]
 800874a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800874e:	2b00      	cmp	r3, #0
 8008750:	d004      	beq.n	800875c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008752:	7bbb      	ldrb	r3, [r7, #14]
 8008754:	4619      	mov	r1, r3
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f001 f8a1 	bl	800989e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 fc9a 	bl	8009096 <USBD_CtlSendStatus>
              }
              break;
 8008762:	e004      	b.n	800876e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008764:	6839      	ldr	r1, [r7, #0]
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 fbcd 	bl	8008f06 <USBD_CtlError>
              break;
 800876c:	e000      	b.n	8008770 <USBD_StdEPReq+0x158>
              break;
 800876e:	bf00      	nop
          }
          break;
 8008770:	e0aa      	b.n	80088c8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008778:	2b02      	cmp	r3, #2
 800877a:	d002      	beq.n	8008782 <USBD_StdEPReq+0x16a>
 800877c:	2b03      	cmp	r3, #3
 800877e:	d032      	beq.n	80087e6 <USBD_StdEPReq+0x1ce>
 8008780:	e097      	b.n	80088b2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008782:	7bbb      	ldrb	r3, [r7, #14]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d007      	beq.n	8008798 <USBD_StdEPReq+0x180>
 8008788:	7bbb      	ldrb	r3, [r7, #14]
 800878a:	2b80      	cmp	r3, #128	; 0x80
 800878c:	d004      	beq.n	8008798 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800878e:	6839      	ldr	r1, [r7, #0]
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 fbb8 	bl	8008f06 <USBD_CtlError>
                break;
 8008796:	e091      	b.n	80088bc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008798:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800879c:	2b00      	cmp	r3, #0
 800879e:	da0b      	bge.n	80087b8 <USBD_StdEPReq+0x1a0>
 80087a0:	7bbb      	ldrb	r3, [r7, #14]
 80087a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087a6:	4613      	mov	r3, r2
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	4413      	add	r3, r2
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	3310      	adds	r3, #16
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	4413      	add	r3, r2
 80087b4:	3304      	adds	r3, #4
 80087b6:	e00b      	b.n	80087d0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80087b8:	7bbb      	ldrb	r3, [r7, #14]
 80087ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087be:	4613      	mov	r3, r2
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	4413      	add	r3, r2
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80087ca:	687a      	ldr	r2, [r7, #4]
 80087cc:	4413      	add	r3, r2
 80087ce:	3304      	adds	r3, #4
 80087d0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	2200      	movs	r2, #0
 80087d6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	2202      	movs	r2, #2
 80087dc:	4619      	mov	r1, r3
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 fbfb 	bl	8008fda <USBD_CtlSendData>
              break;
 80087e4:	e06a      	b.n	80088bc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80087e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	da11      	bge.n	8008812 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80087ee:	7bbb      	ldrb	r3, [r7, #14]
 80087f0:	f003 020f 	and.w	r2, r3, #15
 80087f4:	6879      	ldr	r1, [r7, #4]
 80087f6:	4613      	mov	r3, r2
 80087f8:	009b      	lsls	r3, r3, #2
 80087fa:	4413      	add	r3, r2
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	440b      	add	r3, r1
 8008800:	3318      	adds	r3, #24
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d117      	bne.n	8008838 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008808:	6839      	ldr	r1, [r7, #0]
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 fb7b 	bl	8008f06 <USBD_CtlError>
                  break;
 8008810:	e054      	b.n	80088bc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008812:	7bbb      	ldrb	r3, [r7, #14]
 8008814:	f003 020f 	and.w	r2, r3, #15
 8008818:	6879      	ldr	r1, [r7, #4]
 800881a:	4613      	mov	r3, r2
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	4413      	add	r3, r2
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	440b      	add	r3, r1
 8008824:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d104      	bne.n	8008838 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800882e:	6839      	ldr	r1, [r7, #0]
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 fb68 	bl	8008f06 <USBD_CtlError>
                  break;
 8008836:	e041      	b.n	80088bc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008838:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800883c:	2b00      	cmp	r3, #0
 800883e:	da0b      	bge.n	8008858 <USBD_StdEPReq+0x240>
 8008840:	7bbb      	ldrb	r3, [r7, #14]
 8008842:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008846:	4613      	mov	r3, r2
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	4413      	add	r3, r2
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	3310      	adds	r3, #16
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	4413      	add	r3, r2
 8008854:	3304      	adds	r3, #4
 8008856:	e00b      	b.n	8008870 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008858:	7bbb      	ldrb	r3, [r7, #14]
 800885a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800885e:	4613      	mov	r3, r2
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	4413      	add	r3, r2
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	4413      	add	r3, r2
 800886e:	3304      	adds	r3, #4
 8008870:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008872:	7bbb      	ldrb	r3, [r7, #14]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d002      	beq.n	800887e <USBD_StdEPReq+0x266>
 8008878:	7bbb      	ldrb	r3, [r7, #14]
 800887a:	2b80      	cmp	r3, #128	; 0x80
 800887c:	d103      	bne.n	8008886 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	2200      	movs	r2, #0
 8008882:	601a      	str	r2, [r3, #0]
 8008884:	e00e      	b.n	80088a4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008886:	7bbb      	ldrb	r3, [r7, #14]
 8008888:	4619      	mov	r1, r3
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f001 f826 	bl	80098dc <USBD_LL_IsStallEP>
 8008890:	4603      	mov	r3, r0
 8008892:	2b00      	cmp	r3, #0
 8008894:	d003      	beq.n	800889e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	2201      	movs	r2, #1
 800889a:	601a      	str	r2, [r3, #0]
 800889c:	e002      	b.n	80088a4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	2200      	movs	r2, #0
 80088a2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	2202      	movs	r2, #2
 80088a8:	4619      	mov	r1, r3
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 fb95 	bl	8008fda <USBD_CtlSendData>
              break;
 80088b0:	e004      	b.n	80088bc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80088b2:	6839      	ldr	r1, [r7, #0]
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f000 fb26 	bl	8008f06 <USBD_CtlError>
              break;
 80088ba:	bf00      	nop
          }
          break;
 80088bc:	e004      	b.n	80088c8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80088be:	6839      	ldr	r1, [r7, #0]
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 fb20 	bl	8008f06 <USBD_CtlError>
          break;
 80088c6:	bf00      	nop
      }
      break;
 80088c8:	e004      	b.n	80088d4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80088ca:	6839      	ldr	r1, [r7, #0]
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 fb1a 	bl	8008f06 <USBD_CtlError>
      break;
 80088d2:	bf00      	nop
  }

  return ret;
 80088d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3710      	adds	r7, #16
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
	...

080088e0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80088ea:	2300      	movs	r3, #0
 80088ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80088ee:	2300      	movs	r3, #0
 80088f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80088f2:	2300      	movs	r3, #0
 80088f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	885b      	ldrh	r3, [r3, #2]
 80088fa:	0a1b      	lsrs	r3, r3, #8
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	3b01      	subs	r3, #1
 8008900:	2b06      	cmp	r3, #6
 8008902:	f200 8128 	bhi.w	8008b56 <USBD_GetDescriptor+0x276>
 8008906:	a201      	add	r2, pc, #4	; (adr r2, 800890c <USBD_GetDescriptor+0x2c>)
 8008908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800890c:	08008929 	.word	0x08008929
 8008910:	08008941 	.word	0x08008941
 8008914:	08008981 	.word	0x08008981
 8008918:	08008b57 	.word	0x08008b57
 800891c:	08008b57 	.word	0x08008b57
 8008920:	08008af7 	.word	0x08008af7
 8008924:	08008b23 	.word	0x08008b23
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	7c12      	ldrb	r2, [r2, #16]
 8008934:	f107 0108 	add.w	r1, r7, #8
 8008938:	4610      	mov	r0, r2
 800893a:	4798      	blx	r3
 800893c:	60f8      	str	r0, [r7, #12]
      break;
 800893e:	e112      	b.n	8008b66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	7c1b      	ldrb	r3, [r3, #16]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d10d      	bne.n	8008964 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800894e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008950:	f107 0208 	add.w	r2, r7, #8
 8008954:	4610      	mov	r0, r2
 8008956:	4798      	blx	r3
 8008958:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	3301      	adds	r3, #1
 800895e:	2202      	movs	r2, #2
 8008960:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008962:	e100      	b.n	8008b66 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800896a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800896c:	f107 0208 	add.w	r2, r7, #8
 8008970:	4610      	mov	r0, r2
 8008972:	4798      	blx	r3
 8008974:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	3301      	adds	r3, #1
 800897a:	2202      	movs	r2, #2
 800897c:	701a      	strb	r2, [r3, #0]
      break;
 800897e:	e0f2      	b.n	8008b66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	885b      	ldrh	r3, [r3, #2]
 8008984:	b2db      	uxtb	r3, r3
 8008986:	2b05      	cmp	r3, #5
 8008988:	f200 80ac 	bhi.w	8008ae4 <USBD_GetDescriptor+0x204>
 800898c:	a201      	add	r2, pc, #4	; (adr r2, 8008994 <USBD_GetDescriptor+0xb4>)
 800898e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008992:	bf00      	nop
 8008994:	080089ad 	.word	0x080089ad
 8008998:	080089e1 	.word	0x080089e1
 800899c:	08008a15 	.word	0x08008a15
 80089a0:	08008a49 	.word	0x08008a49
 80089a4:	08008a7d 	.word	0x08008a7d
 80089a8:	08008ab1 	.word	0x08008ab1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d00b      	beq.n	80089d0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	7c12      	ldrb	r2, [r2, #16]
 80089c4:	f107 0108 	add.w	r1, r7, #8
 80089c8:	4610      	mov	r0, r2
 80089ca:	4798      	blx	r3
 80089cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089ce:	e091      	b.n	8008af4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089d0:	6839      	ldr	r1, [r7, #0]
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 fa97 	bl	8008f06 <USBD_CtlError>
            err++;
 80089d8:	7afb      	ldrb	r3, [r7, #11]
 80089da:	3301      	adds	r3, #1
 80089dc:	72fb      	strb	r3, [r7, #11]
          break;
 80089de:	e089      	b.n	8008af4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d00b      	beq.n	8008a04 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	7c12      	ldrb	r2, [r2, #16]
 80089f8:	f107 0108 	add.w	r1, r7, #8
 80089fc:	4610      	mov	r0, r2
 80089fe:	4798      	blx	r3
 8008a00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a02:	e077      	b.n	8008af4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a04:	6839      	ldr	r1, [r7, #0]
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 fa7d 	bl	8008f06 <USBD_CtlError>
            err++;
 8008a0c:	7afb      	ldrb	r3, [r7, #11]
 8008a0e:	3301      	adds	r3, #1
 8008a10:	72fb      	strb	r3, [r7, #11]
          break;
 8008a12:	e06f      	b.n	8008af4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d00b      	beq.n	8008a38 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	7c12      	ldrb	r2, [r2, #16]
 8008a2c:	f107 0108 	add.w	r1, r7, #8
 8008a30:	4610      	mov	r0, r2
 8008a32:	4798      	blx	r3
 8008a34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a36:	e05d      	b.n	8008af4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a38:	6839      	ldr	r1, [r7, #0]
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 fa63 	bl	8008f06 <USBD_CtlError>
            err++;
 8008a40:	7afb      	ldrb	r3, [r7, #11]
 8008a42:	3301      	adds	r3, #1
 8008a44:	72fb      	strb	r3, [r7, #11]
          break;
 8008a46:	e055      	b.n	8008af4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a4e:	691b      	ldr	r3, [r3, #16]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d00b      	beq.n	8008a6c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a5a:	691b      	ldr	r3, [r3, #16]
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	7c12      	ldrb	r2, [r2, #16]
 8008a60:	f107 0108 	add.w	r1, r7, #8
 8008a64:	4610      	mov	r0, r2
 8008a66:	4798      	blx	r3
 8008a68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a6a:	e043      	b.n	8008af4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a6c:	6839      	ldr	r1, [r7, #0]
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 fa49 	bl	8008f06 <USBD_CtlError>
            err++;
 8008a74:	7afb      	ldrb	r3, [r7, #11]
 8008a76:	3301      	adds	r3, #1
 8008a78:	72fb      	strb	r3, [r7, #11]
          break;
 8008a7a:	e03b      	b.n	8008af4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a82:	695b      	ldr	r3, [r3, #20]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d00b      	beq.n	8008aa0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a8e:	695b      	ldr	r3, [r3, #20]
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	7c12      	ldrb	r2, [r2, #16]
 8008a94:	f107 0108 	add.w	r1, r7, #8
 8008a98:	4610      	mov	r0, r2
 8008a9a:	4798      	blx	r3
 8008a9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a9e:	e029      	b.n	8008af4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008aa0:	6839      	ldr	r1, [r7, #0]
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 fa2f 	bl	8008f06 <USBD_CtlError>
            err++;
 8008aa8:	7afb      	ldrb	r3, [r7, #11]
 8008aaa:	3301      	adds	r3, #1
 8008aac:	72fb      	strb	r3, [r7, #11]
          break;
 8008aae:	e021      	b.n	8008af4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ab6:	699b      	ldr	r3, [r3, #24]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d00b      	beq.n	8008ad4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ac2:	699b      	ldr	r3, [r3, #24]
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	7c12      	ldrb	r2, [r2, #16]
 8008ac8:	f107 0108 	add.w	r1, r7, #8
 8008acc:	4610      	mov	r0, r2
 8008ace:	4798      	blx	r3
 8008ad0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ad2:	e00f      	b.n	8008af4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ad4:	6839      	ldr	r1, [r7, #0]
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 fa15 	bl	8008f06 <USBD_CtlError>
            err++;
 8008adc:	7afb      	ldrb	r3, [r7, #11]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ae2:	e007      	b.n	8008af4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008ae4:	6839      	ldr	r1, [r7, #0]
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 fa0d 	bl	8008f06 <USBD_CtlError>
          err++;
 8008aec:	7afb      	ldrb	r3, [r7, #11]
 8008aee:	3301      	adds	r3, #1
 8008af0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008af2:	e038      	b.n	8008b66 <USBD_GetDescriptor+0x286>
 8008af4:	e037      	b.n	8008b66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	7c1b      	ldrb	r3, [r3, #16]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d109      	bne.n	8008b12 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b06:	f107 0208 	add.w	r2, r7, #8
 8008b0a:	4610      	mov	r0, r2
 8008b0c:	4798      	blx	r3
 8008b0e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b10:	e029      	b.n	8008b66 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008b12:	6839      	ldr	r1, [r7, #0]
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 f9f6 	bl	8008f06 <USBD_CtlError>
        err++;
 8008b1a:	7afb      	ldrb	r3, [r7, #11]
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	72fb      	strb	r3, [r7, #11]
      break;
 8008b20:	e021      	b.n	8008b66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	7c1b      	ldrb	r3, [r3, #16]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d10d      	bne.n	8008b46 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b32:	f107 0208 	add.w	r2, r7, #8
 8008b36:	4610      	mov	r0, r2
 8008b38:	4798      	blx	r3
 8008b3a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	3301      	adds	r3, #1
 8008b40:	2207      	movs	r2, #7
 8008b42:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b44:	e00f      	b.n	8008b66 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008b46:	6839      	ldr	r1, [r7, #0]
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 f9dc 	bl	8008f06 <USBD_CtlError>
        err++;
 8008b4e:	7afb      	ldrb	r3, [r7, #11]
 8008b50:	3301      	adds	r3, #1
 8008b52:	72fb      	strb	r3, [r7, #11]
      break;
 8008b54:	e007      	b.n	8008b66 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008b56:	6839      	ldr	r1, [r7, #0]
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 f9d4 	bl	8008f06 <USBD_CtlError>
      err++;
 8008b5e:	7afb      	ldrb	r3, [r7, #11]
 8008b60:	3301      	adds	r3, #1
 8008b62:	72fb      	strb	r3, [r7, #11]
      break;
 8008b64:	bf00      	nop
  }

  if (err != 0U)
 8008b66:	7afb      	ldrb	r3, [r7, #11]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d11c      	bne.n	8008ba6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008b6c:	893b      	ldrh	r3, [r7, #8]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d011      	beq.n	8008b96 <USBD_GetDescriptor+0x2b6>
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	88db      	ldrh	r3, [r3, #6]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00d      	beq.n	8008b96 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	88da      	ldrh	r2, [r3, #6]
 8008b7e:	893b      	ldrh	r3, [r7, #8]
 8008b80:	4293      	cmp	r3, r2
 8008b82:	bf28      	it	cs
 8008b84:	4613      	movcs	r3, r2
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b8a:	893b      	ldrh	r3, [r7, #8]
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	68f9      	ldr	r1, [r7, #12]
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 fa22 	bl	8008fda <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	88db      	ldrh	r3, [r3, #6]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d104      	bne.n	8008ba8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 fa79 	bl	8009096 <USBD_CtlSendStatus>
 8008ba4:	e000      	b.n	8008ba8 <USBD_GetDescriptor+0x2c8>
    return;
 8008ba6:	bf00      	nop
    }
  }
}
 8008ba8:	3710      	adds	r7, #16
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	bf00      	nop

08008bb0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	889b      	ldrh	r3, [r3, #4]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d130      	bne.n	8008c24 <USBD_SetAddress+0x74>
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	88db      	ldrh	r3, [r3, #6]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d12c      	bne.n	8008c24 <USBD_SetAddress+0x74>
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	885b      	ldrh	r3, [r3, #2]
 8008bce:	2b7f      	cmp	r3, #127	; 0x7f
 8008bd0:	d828      	bhi.n	8008c24 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	885b      	ldrh	r3, [r3, #2]
 8008bd6:	b2db      	uxtb	r3, r3
 8008bd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bdc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008be4:	2b03      	cmp	r3, #3
 8008be6:	d104      	bne.n	8008bf2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008be8:	6839      	ldr	r1, [r7, #0]
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 f98b 	bl	8008f06 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bf0:	e01d      	b.n	8008c2e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	7bfa      	ldrb	r2, [r7, #15]
 8008bf6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008bfa:	7bfb      	ldrb	r3, [r7, #15]
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 fe98 	bl	8009934 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 fa46 	bl	8009096 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008c0a:	7bfb      	ldrb	r3, [r7, #15]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d004      	beq.n	8008c1a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2202      	movs	r2, #2
 8008c14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c18:	e009      	b.n	8008c2e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c22:	e004      	b.n	8008c2e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008c24:	6839      	ldr	r1, [r7, #0]
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 f96d 	bl	8008f06 <USBD_CtlError>
  }
}
 8008c2c:	bf00      	nop
 8008c2e:	bf00      	nop
 8008c30:	3710      	adds	r7, #16
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
	...

08008c38 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	885b      	ldrh	r3, [r3, #2]
 8008c46:	b2da      	uxtb	r2, r3
 8008c48:	4b41      	ldr	r3, [pc, #260]	; (8008d50 <USBD_SetConfig+0x118>)
 8008c4a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008c4c:	4b40      	ldr	r3, [pc, #256]	; (8008d50 <USBD_SetConfig+0x118>)
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d904      	bls.n	8008c5e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008c54:	6839      	ldr	r1, [r7, #0]
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f000 f955 	bl	8008f06 <USBD_CtlError>
 8008c5c:	e075      	b.n	8008d4a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c64:	2b02      	cmp	r3, #2
 8008c66:	d002      	beq.n	8008c6e <USBD_SetConfig+0x36>
 8008c68:	2b03      	cmp	r3, #3
 8008c6a:	d023      	beq.n	8008cb4 <USBD_SetConfig+0x7c>
 8008c6c:	e062      	b.n	8008d34 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008c6e:	4b38      	ldr	r3, [pc, #224]	; (8008d50 <USBD_SetConfig+0x118>)
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d01a      	beq.n	8008cac <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008c76:	4b36      	ldr	r3, [pc, #216]	; (8008d50 <USBD_SetConfig+0x118>)
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2203      	movs	r2, #3
 8008c84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008c88:	4b31      	ldr	r3, [pc, #196]	; (8008d50 <USBD_SetConfig+0x118>)
 8008c8a:	781b      	ldrb	r3, [r3, #0]
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f7ff f9e7 	bl	8008062 <USBD_SetClassConfig>
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b02      	cmp	r3, #2
 8008c98:	d104      	bne.n	8008ca4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008c9a:	6839      	ldr	r1, [r7, #0]
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 f932 	bl	8008f06 <USBD_CtlError>
            return;
 8008ca2:	e052      	b.n	8008d4a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 f9f6 	bl	8009096 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008caa:	e04e      	b.n	8008d4a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 f9f2 	bl	8009096 <USBD_CtlSendStatus>
        break;
 8008cb2:	e04a      	b.n	8008d4a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008cb4:	4b26      	ldr	r3, [pc, #152]	; (8008d50 <USBD_SetConfig+0x118>)
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d112      	bne.n	8008ce2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2202      	movs	r2, #2
 8008cc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008cc4:	4b22      	ldr	r3, [pc, #136]	; (8008d50 <USBD_SetConfig+0x118>)
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	461a      	mov	r2, r3
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008cce:	4b20      	ldr	r3, [pc, #128]	; (8008d50 <USBD_SetConfig+0x118>)
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	4619      	mov	r1, r3
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f7ff f9e3 	bl	80080a0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 f9db 	bl	8009096 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008ce0:	e033      	b.n	8008d4a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008ce2:	4b1b      	ldr	r3, [pc, #108]	; (8008d50 <USBD_SetConfig+0x118>)
 8008ce4:	781b      	ldrb	r3, [r3, #0]
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d01d      	beq.n	8008d2c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	b2db      	uxtb	r3, r3
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f7ff f9d1 	bl	80080a0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008cfe:	4b14      	ldr	r3, [pc, #80]	; (8008d50 <USBD_SetConfig+0x118>)
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	461a      	mov	r2, r3
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008d08:	4b11      	ldr	r3, [pc, #68]	; (8008d50 <USBD_SetConfig+0x118>)
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f7ff f9a7 	bl	8008062 <USBD_SetClassConfig>
 8008d14:	4603      	mov	r3, r0
 8008d16:	2b02      	cmp	r3, #2
 8008d18:	d104      	bne.n	8008d24 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008d1a:	6839      	ldr	r1, [r7, #0]
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f000 f8f2 	bl	8008f06 <USBD_CtlError>
            return;
 8008d22:	e012      	b.n	8008d4a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f000 f9b6 	bl	8009096 <USBD_CtlSendStatus>
        break;
 8008d2a:	e00e      	b.n	8008d4a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 f9b2 	bl	8009096 <USBD_CtlSendStatus>
        break;
 8008d32:	e00a      	b.n	8008d4a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008d34:	6839      	ldr	r1, [r7, #0]
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 f8e5 	bl	8008f06 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008d3c:	4b04      	ldr	r3, [pc, #16]	; (8008d50 <USBD_SetConfig+0x118>)
 8008d3e:	781b      	ldrb	r3, [r3, #0]
 8008d40:	4619      	mov	r1, r3
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f7ff f9ac 	bl	80080a0 <USBD_ClrClassConfig>
        break;
 8008d48:	bf00      	nop
    }
  }
}
 8008d4a:	3708      	adds	r7, #8
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	2000033c 	.word	0x2000033c

08008d54 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	88db      	ldrh	r3, [r3, #6]
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	d004      	beq.n	8008d70 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d66:	6839      	ldr	r1, [r7, #0]
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f000 f8cc 	bl	8008f06 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008d6e:	e022      	b.n	8008db6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d76:	2b02      	cmp	r3, #2
 8008d78:	dc02      	bgt.n	8008d80 <USBD_GetConfig+0x2c>
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	dc03      	bgt.n	8008d86 <USBD_GetConfig+0x32>
 8008d7e:	e015      	b.n	8008dac <USBD_GetConfig+0x58>
 8008d80:	2b03      	cmp	r3, #3
 8008d82:	d00b      	beq.n	8008d9c <USBD_GetConfig+0x48>
 8008d84:	e012      	b.n	8008dac <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	3308      	adds	r3, #8
 8008d90:	2201      	movs	r2, #1
 8008d92:	4619      	mov	r1, r3
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 f920 	bl	8008fda <USBD_CtlSendData>
        break;
 8008d9a:	e00c      	b.n	8008db6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	3304      	adds	r3, #4
 8008da0:	2201      	movs	r2, #1
 8008da2:	4619      	mov	r1, r3
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 f918 	bl	8008fda <USBD_CtlSendData>
        break;
 8008daa:	e004      	b.n	8008db6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008dac:	6839      	ldr	r1, [r7, #0]
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 f8a9 	bl	8008f06 <USBD_CtlError>
        break;
 8008db4:	bf00      	nop
}
 8008db6:	bf00      	nop
 8008db8:	3708      	adds	r7, #8
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}

08008dbe <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b082      	sub	sp, #8
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
 8008dc6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dce:	3b01      	subs	r3, #1
 8008dd0:	2b02      	cmp	r3, #2
 8008dd2:	d81e      	bhi.n	8008e12 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	88db      	ldrh	r3, [r3, #6]
 8008dd8:	2b02      	cmp	r3, #2
 8008dda:	d004      	beq.n	8008de6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008ddc:	6839      	ldr	r1, [r7, #0]
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f000 f891 	bl	8008f06 <USBD_CtlError>
        break;
 8008de4:	e01a      	b.n	8008e1c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2201      	movs	r2, #1
 8008dea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d005      	beq.n	8008e02 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	68db      	ldr	r3, [r3, #12]
 8008dfa:	f043 0202 	orr.w	r2, r3, #2
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	330c      	adds	r3, #12
 8008e06:	2202      	movs	r2, #2
 8008e08:	4619      	mov	r1, r3
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 f8e5 	bl	8008fda <USBD_CtlSendData>
      break;
 8008e10:	e004      	b.n	8008e1c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008e12:	6839      	ldr	r1, [r7, #0]
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 f876 	bl	8008f06 <USBD_CtlError>
      break;
 8008e1a:	bf00      	nop
  }
}
 8008e1c:	bf00      	nop
 8008e1e:	3708      	adds	r7, #8
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b082      	sub	sp, #8
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	885b      	ldrh	r3, [r3, #2]
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d106      	bne.n	8008e44 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2201      	movs	r2, #1
 8008e3a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 f929 	bl	8009096 <USBD_CtlSendStatus>
  }
}
 8008e44:	bf00      	nop
 8008e46:	3708      	adds	r7, #8
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b082      	sub	sp, #8
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e5c:	3b01      	subs	r3, #1
 8008e5e:	2b02      	cmp	r3, #2
 8008e60:	d80b      	bhi.n	8008e7a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	885b      	ldrh	r3, [r3, #2]
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	d10c      	bne.n	8008e84 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 f90f 	bl	8009096 <USBD_CtlSendStatus>
      }
      break;
 8008e78:	e004      	b.n	8008e84 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008e7a:	6839      	ldr	r1, [r7, #0]
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 f842 	bl	8008f06 <USBD_CtlError>
      break;
 8008e82:	e000      	b.n	8008e86 <USBD_ClrFeature+0x3a>
      break;
 8008e84:	bf00      	nop
  }
}
 8008e86:	bf00      	nop
 8008e88:	3708      	adds	r7, #8
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}

08008e8e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e8e:	b480      	push	{r7}
 8008e90:	b083      	sub	sp, #12
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]
 8008e96:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	781a      	ldrb	r2, [r3, #0]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	785a      	ldrb	r2, [r3, #1]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	3302      	adds	r3, #2
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	b29a      	uxth	r2, r3
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	3303      	adds	r3, #3
 8008eb4:	781b      	ldrb	r3, [r3, #0]
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	021b      	lsls	r3, r3, #8
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	4413      	add	r3, r2
 8008ebe:	b29a      	uxth	r2, r3
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	3304      	adds	r3, #4
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	b29a      	uxth	r2, r3
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	3305      	adds	r3, #5
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	021b      	lsls	r3, r3, #8
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	4413      	add	r3, r2
 8008eda:	b29a      	uxth	r2, r3
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	3306      	adds	r3, #6
 8008ee4:	781b      	ldrb	r3, [r3, #0]
 8008ee6:	b29a      	uxth	r2, r3
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	3307      	adds	r3, #7
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	021b      	lsls	r3, r3, #8
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	4413      	add	r3, r2
 8008ef6:	b29a      	uxth	r2, r3
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	80da      	strh	r2, [r3, #6]

}
 8008efc:	bf00      	nop
 8008efe:	370c      	adds	r7, #12
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bc80      	pop	{r7}
 8008f04:	4770      	bx	lr

08008f06 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008f06:	b580      	push	{r7, lr}
 8008f08:	b082      	sub	sp, #8
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
 8008f0e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008f10:	2180      	movs	r1, #128	; 0x80
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f000 fca4 	bl	8009860 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008f18:	2100      	movs	r1, #0
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 fca0 	bl	8009860 <USBD_LL_StallEP>
}
 8008f20:	bf00      	nop
 8008f22:	3708      	adds	r7, #8
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b086      	sub	sp, #24
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	60f8      	str	r0, [r7, #12]
 8008f30:	60b9      	str	r1, [r7, #8]
 8008f32:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008f34:	2300      	movs	r3, #0
 8008f36:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d032      	beq.n	8008fa4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008f3e:	68f8      	ldr	r0, [r7, #12]
 8008f40:	f000 f834 	bl	8008fac <USBD_GetLen>
 8008f44:	4603      	mov	r3, r0
 8008f46:	3301      	adds	r3, #1
 8008f48:	b29b      	uxth	r3, r3
 8008f4a:	005b      	lsls	r3, r3, #1
 8008f4c:	b29a      	uxth	r2, r3
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008f52:	7dfb      	ldrb	r3, [r7, #23]
 8008f54:	1c5a      	adds	r2, r3, #1
 8008f56:	75fa      	strb	r2, [r7, #23]
 8008f58:	461a      	mov	r2, r3
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	4413      	add	r3, r2
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	7812      	ldrb	r2, [r2, #0]
 8008f62:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008f64:	7dfb      	ldrb	r3, [r7, #23]
 8008f66:	1c5a      	adds	r2, r3, #1
 8008f68:	75fa      	strb	r2, [r7, #23]
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	4413      	add	r3, r2
 8008f70:	2203      	movs	r2, #3
 8008f72:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008f74:	e012      	b.n	8008f9c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	1c5a      	adds	r2, r3, #1
 8008f7a:	60fa      	str	r2, [r7, #12]
 8008f7c:	7dfa      	ldrb	r2, [r7, #23]
 8008f7e:	1c51      	adds	r1, r2, #1
 8008f80:	75f9      	strb	r1, [r7, #23]
 8008f82:	4611      	mov	r1, r2
 8008f84:	68ba      	ldr	r2, [r7, #8]
 8008f86:	440a      	add	r2, r1
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008f8c:	7dfb      	ldrb	r3, [r7, #23]
 8008f8e:	1c5a      	adds	r2, r3, #1
 8008f90:	75fa      	strb	r2, [r7, #23]
 8008f92:	461a      	mov	r2, r3
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	4413      	add	r3, r2
 8008f98:	2200      	movs	r2, #0
 8008f9a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d1e8      	bne.n	8008f76 <USBD_GetString+0x4e>
    }
  }
}
 8008fa4:	bf00      	nop
 8008fa6:	3718      	adds	r7, #24
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b085      	sub	sp, #20
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008fb8:	e005      	b.n	8008fc6 <USBD_GetLen+0x1a>
  {
    len++;
 8008fba:	7bfb      	ldrb	r3, [r7, #15]
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	781b      	ldrb	r3, [r3, #0]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d1f5      	bne.n	8008fba <USBD_GetLen+0xe>
  }

  return len;
 8008fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3714      	adds	r7, #20
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bc80      	pop	{r7}
 8008fd8:	4770      	bx	lr

08008fda <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008fda:	b580      	push	{r7, lr}
 8008fdc:	b084      	sub	sp, #16
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	60f8      	str	r0, [r7, #12]
 8008fe2:	60b9      	str	r1, [r7, #8]
 8008fe4:	4613      	mov	r3, r2
 8008fe6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2202      	movs	r2, #2
 8008fec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008ff0:	88fa      	ldrh	r2, [r7, #6]
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008ff6:	88fa      	ldrh	r2, [r7, #6]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ffc:	88fb      	ldrh	r3, [r7, #6]
 8008ffe:	68ba      	ldr	r2, [r7, #8]
 8009000:	2100      	movs	r1, #0
 8009002:	68f8      	ldr	r0, [r7, #12]
 8009004:	f000 fcb5 	bl	8009972 <USBD_LL_Transmit>

  return USBD_OK;
 8009008:	2300      	movs	r3, #0
}
 800900a:	4618      	mov	r0, r3
 800900c:	3710      	adds	r7, #16
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}

08009012 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009012:	b580      	push	{r7, lr}
 8009014:	b084      	sub	sp, #16
 8009016:	af00      	add	r7, sp, #0
 8009018:	60f8      	str	r0, [r7, #12]
 800901a:	60b9      	str	r1, [r7, #8]
 800901c:	4613      	mov	r3, r2
 800901e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009020:	88fb      	ldrh	r3, [r7, #6]
 8009022:	68ba      	ldr	r2, [r7, #8]
 8009024:	2100      	movs	r1, #0
 8009026:	68f8      	ldr	r0, [r7, #12]
 8009028:	f000 fca3 	bl	8009972 <USBD_LL_Transmit>

  return USBD_OK;
 800902c:	2300      	movs	r3, #0
}
 800902e:	4618      	mov	r0, r3
 8009030:	3710      	adds	r7, #16
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}

08009036 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009036:	b580      	push	{r7, lr}
 8009038:	b084      	sub	sp, #16
 800903a:	af00      	add	r7, sp, #0
 800903c:	60f8      	str	r0, [r7, #12]
 800903e:	60b9      	str	r1, [r7, #8]
 8009040:	4613      	mov	r3, r2
 8009042:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2203      	movs	r2, #3
 8009048:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800904c:	88fa      	ldrh	r2, [r7, #6]
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009054:	88fa      	ldrh	r2, [r7, #6]
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800905c:	88fb      	ldrh	r3, [r7, #6]
 800905e:	68ba      	ldr	r2, [r7, #8]
 8009060:	2100      	movs	r1, #0
 8009062:	68f8      	ldr	r0, [r7, #12]
 8009064:	f000 fca8 	bl	80099b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009068:	2300      	movs	r3, #0
}
 800906a:	4618      	mov	r0, r3
 800906c:	3710      	adds	r7, #16
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}

08009072 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009072:	b580      	push	{r7, lr}
 8009074:	b084      	sub	sp, #16
 8009076:	af00      	add	r7, sp, #0
 8009078:	60f8      	str	r0, [r7, #12]
 800907a:	60b9      	str	r1, [r7, #8]
 800907c:	4613      	mov	r3, r2
 800907e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009080:	88fb      	ldrh	r3, [r7, #6]
 8009082:	68ba      	ldr	r2, [r7, #8]
 8009084:	2100      	movs	r1, #0
 8009086:	68f8      	ldr	r0, [r7, #12]
 8009088:	f000 fc96 	bl	80099b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800908c:	2300      	movs	r3, #0
}
 800908e:	4618      	mov	r0, r3
 8009090:	3710      	adds	r7, #16
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}

08009096 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009096:	b580      	push	{r7, lr}
 8009098:	b082      	sub	sp, #8
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2204      	movs	r2, #4
 80090a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80090a6:	2300      	movs	r3, #0
 80090a8:	2200      	movs	r2, #0
 80090aa:	2100      	movs	r1, #0
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f000 fc60 	bl	8009972 <USBD_LL_Transmit>

  return USBD_OK;
 80090b2:	2300      	movs	r3, #0
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3708      	adds	r7, #8
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b082      	sub	sp, #8
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2205      	movs	r2, #5
 80090c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090cc:	2300      	movs	r3, #0
 80090ce:	2200      	movs	r2, #0
 80090d0:	2100      	movs	r1, #0
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 fc70 	bl	80099b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090d8:	2300      	movs	r3, #0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3708      	adds	r7, #8
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
	...

080090e4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80090e8:	2200      	movs	r2, #0
 80090ea:	4912      	ldr	r1, [pc, #72]	; (8009134 <MX_USB_DEVICE_Init+0x50>)
 80090ec:	4812      	ldr	r0, [pc, #72]	; (8009138 <MX_USB_DEVICE_Init+0x54>)
 80090ee:	f7fe ff5e 	bl	8007fae <USBD_Init>
 80090f2:	4603      	mov	r3, r0
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d001      	beq.n	80090fc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80090f8:	f7f7 fe36 	bl	8000d68 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80090fc:	490f      	ldr	r1, [pc, #60]	; (800913c <MX_USB_DEVICE_Init+0x58>)
 80090fe:	480e      	ldr	r0, [pc, #56]	; (8009138 <MX_USB_DEVICE_Init+0x54>)
 8009100:	f7fe ff80 	bl	8008004 <USBD_RegisterClass>
 8009104:	4603      	mov	r3, r0
 8009106:	2b00      	cmp	r3, #0
 8009108:	d001      	beq.n	800910e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800910a:	f7f7 fe2d 	bl	8000d68 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800910e:	490c      	ldr	r1, [pc, #48]	; (8009140 <MX_USB_DEVICE_Init+0x5c>)
 8009110:	4809      	ldr	r0, [pc, #36]	; (8009138 <MX_USB_DEVICE_Init+0x54>)
 8009112:	f7fe feb1 	bl	8007e78 <USBD_CDC_RegisterInterface>
 8009116:	4603      	mov	r3, r0
 8009118:	2b00      	cmp	r3, #0
 800911a:	d001      	beq.n	8009120 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800911c:	f7f7 fe24 	bl	8000d68 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009120:	4805      	ldr	r0, [pc, #20]	; (8009138 <MX_USB_DEVICE_Init+0x54>)
 8009122:	f7fe ff88 	bl	8008036 <USBD_Start>
 8009126:	4603      	mov	r3, r0
 8009128:	2b00      	cmp	r3, #0
 800912a:	d001      	beq.n	8009130 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800912c:	f7f7 fe1c 	bl	8000d68 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009130:	bf00      	nop
 8009132:	bd80      	pop	{r7, pc}
 8009134:	2000012c 	.word	0x2000012c
 8009138:	20000340 	.word	0x20000340
 800913c:	20000018 	.word	0x20000018
 8009140:	2000011c 	.word	0x2000011c

08009144 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009148:	2200      	movs	r2, #0
 800914a:	4905      	ldr	r1, [pc, #20]	; (8009160 <CDC_Init_FS+0x1c>)
 800914c:	4805      	ldr	r0, [pc, #20]	; (8009164 <CDC_Init_FS+0x20>)
 800914e:	f7fe fea9 	bl	8007ea4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009152:	4905      	ldr	r1, [pc, #20]	; (8009168 <CDC_Init_FS+0x24>)
 8009154:	4803      	ldr	r0, [pc, #12]	; (8009164 <CDC_Init_FS+0x20>)
 8009156:	f7fe febe 	bl	8007ed6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800915a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800915c:	4618      	mov	r0, r3
 800915e:	bd80      	pop	{r7, pc}
 8009160:	200009f4 	.word	0x200009f4
 8009164:	20000340 	.word	0x20000340
 8009168:	2000060c 	.word	0x2000060c

0800916c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800916c:	b480      	push	{r7}
 800916e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009170:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009172:	4618      	mov	r0, r3
 8009174:	46bd      	mov	sp, r7
 8009176:	bc80      	pop	{r7}
 8009178:	4770      	bx	lr
	...

0800917c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800917c:	b480      	push	{r7}
 800917e:	b083      	sub	sp, #12
 8009180:	af00      	add	r7, sp, #0
 8009182:	4603      	mov	r3, r0
 8009184:	6039      	str	r1, [r7, #0]
 8009186:	71fb      	strb	r3, [r7, #7]
 8009188:	4613      	mov	r3, r2
 800918a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800918c:	79fb      	ldrb	r3, [r7, #7]
 800918e:	2b23      	cmp	r3, #35	; 0x23
 8009190:	f200 808c 	bhi.w	80092ac <CDC_Control_FS+0x130>
 8009194:	a201      	add	r2, pc, #4	; (adr r2, 800919c <CDC_Control_FS+0x20>)
 8009196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800919a:	bf00      	nop
 800919c:	080092ad 	.word	0x080092ad
 80091a0:	080092ad 	.word	0x080092ad
 80091a4:	080092ad 	.word	0x080092ad
 80091a8:	080092ad 	.word	0x080092ad
 80091ac:	080092ad 	.word	0x080092ad
 80091b0:	080092ad 	.word	0x080092ad
 80091b4:	080092ad 	.word	0x080092ad
 80091b8:	080092ad 	.word	0x080092ad
 80091bc:	080092ad 	.word	0x080092ad
 80091c0:	080092ad 	.word	0x080092ad
 80091c4:	080092ad 	.word	0x080092ad
 80091c8:	080092ad 	.word	0x080092ad
 80091cc:	080092ad 	.word	0x080092ad
 80091d0:	080092ad 	.word	0x080092ad
 80091d4:	080092ad 	.word	0x080092ad
 80091d8:	080092ad 	.word	0x080092ad
 80091dc:	080092ad 	.word	0x080092ad
 80091e0:	080092ad 	.word	0x080092ad
 80091e4:	080092ad 	.word	0x080092ad
 80091e8:	080092ad 	.word	0x080092ad
 80091ec:	080092ad 	.word	0x080092ad
 80091f0:	080092ad 	.word	0x080092ad
 80091f4:	080092ad 	.word	0x080092ad
 80091f8:	080092ad 	.word	0x080092ad
 80091fc:	080092ad 	.word	0x080092ad
 8009200:	080092ad 	.word	0x080092ad
 8009204:	080092ad 	.word	0x080092ad
 8009208:	080092ad 	.word	0x080092ad
 800920c:	080092ad 	.word	0x080092ad
 8009210:	080092ad 	.word	0x080092ad
 8009214:	080092ad 	.word	0x080092ad
 8009218:	080092ad 	.word	0x080092ad
 800921c:	0800922d 	.word	0x0800922d
 8009220:	08009267 	.word	0x08009267
 8009224:	080092ad 	.word	0x080092ad
 8009228:	080092ad 	.word	0x080092ad
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	buffer[0] = pbuf[0];
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	781a      	ldrb	r2, [r3, #0]
 8009230:	4b22      	ldr	r3, [pc, #136]	; (80092bc <CDC_Control_FS+0x140>)
 8009232:	701a      	strb	r2, [r3, #0]
    	buffer[1] = pbuf[1];
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	785a      	ldrb	r2, [r3, #1]
 8009238:	4b20      	ldr	r3, [pc, #128]	; (80092bc <CDC_Control_FS+0x140>)
 800923a:	705a      	strb	r2, [r3, #1]
    	buffer[2] = pbuf[2];
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	789a      	ldrb	r2, [r3, #2]
 8009240:	4b1e      	ldr	r3, [pc, #120]	; (80092bc <CDC_Control_FS+0x140>)
 8009242:	709a      	strb	r2, [r3, #2]
    	buffer[3] = pbuf[3];
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	78da      	ldrb	r2, [r3, #3]
 8009248:	4b1c      	ldr	r3, [pc, #112]	; (80092bc <CDC_Control_FS+0x140>)
 800924a:	70da      	strb	r2, [r3, #3]
    	buffer[4] = pbuf[4];
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	791a      	ldrb	r2, [r3, #4]
 8009250:	4b1a      	ldr	r3, [pc, #104]	; (80092bc <CDC_Control_FS+0x140>)
 8009252:	711a      	strb	r2, [r3, #4]
    	buffer[5] = pbuf[5];
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	795a      	ldrb	r2, [r3, #5]
 8009258:	4b18      	ldr	r3, [pc, #96]	; (80092bc <CDC_Control_FS+0x140>)
 800925a:	715a      	strb	r2, [r3, #5]
    	buffer[6] = pbuf[6];
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	799a      	ldrb	r2, [r3, #6]
 8009260:	4b16      	ldr	r3, [pc, #88]	; (80092bc <CDC_Control_FS+0x140>)
 8009262:	719a      	strb	r2, [r3, #6]
    break;
 8009264:	e023      	b.n	80092ae <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = buffer[0];
 8009266:	4b15      	ldr	r3, [pc, #84]	; (80092bc <CDC_Control_FS+0x140>)
 8009268:	781a      	ldrb	r2, [r3, #0]
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = buffer[1];
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	3301      	adds	r3, #1
 8009272:	4a12      	ldr	r2, [pc, #72]	; (80092bc <CDC_Control_FS+0x140>)
 8009274:	7852      	ldrb	r2, [r2, #1]
 8009276:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = buffer[2];
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	3302      	adds	r3, #2
 800927c:	4a0f      	ldr	r2, [pc, #60]	; (80092bc <CDC_Control_FS+0x140>)
 800927e:	7892      	ldrb	r2, [r2, #2]
 8009280:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = buffer[3];
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	3303      	adds	r3, #3
 8009286:	4a0d      	ldr	r2, [pc, #52]	; (80092bc <CDC_Control_FS+0x140>)
 8009288:	78d2      	ldrb	r2, [r2, #3]
 800928a:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = buffer[4];
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	3304      	adds	r3, #4
 8009290:	4a0a      	ldr	r2, [pc, #40]	; (80092bc <CDC_Control_FS+0x140>)
 8009292:	7912      	ldrb	r2, [r2, #4]
 8009294:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = buffer[5];
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	3305      	adds	r3, #5
 800929a:	4a08      	ldr	r2, [pc, #32]	; (80092bc <CDC_Control_FS+0x140>)
 800929c:	7952      	ldrb	r2, [r2, #5]
 800929e:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = buffer[6];
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	3306      	adds	r3, #6
 80092a4:	4a05      	ldr	r2, [pc, #20]	; (80092bc <CDC_Control_FS+0x140>)
 80092a6:	7992      	ldrb	r2, [r2, #6]
 80092a8:	701a      	strb	r2, [r3, #0]
    break;
 80092aa:	e000      	b.n	80092ae <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80092ac:	bf00      	nop
  }

  return (USBD_OK);
 80092ae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	370c      	adds	r7, #12
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bc80      	pop	{r7}
 80092b8:	4770      	bx	lr
 80092ba:	bf00      	nop
 80092bc:	20000604 	.word	0x20000604

080092c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80092ca:	6879      	ldr	r1, [r7, #4]
 80092cc:	4805      	ldr	r0, [pc, #20]	; (80092e4 <CDC_Receive_FS+0x24>)
 80092ce:	f7fe fe02 	bl	8007ed6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80092d2:	4804      	ldr	r0, [pc, #16]	; (80092e4 <CDC_Receive_FS+0x24>)
 80092d4:	f7fe fe41 	bl	8007f5a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80092d8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3708      	adds	r7, #8
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	bf00      	nop
 80092e4:	20000340 	.word	0x20000340

080092e8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b084      	sub	sp, #16
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	460b      	mov	r3, r1
 80092f2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80092f4:	2300      	movs	r3, #0
 80092f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80092f8:	4b0f      	ldr	r3, [pc, #60]	; (8009338 <CDC_Transmit_FS+0x50>)
 80092fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092fe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009306:	2b00      	cmp	r3, #0
 8009308:	d001      	beq.n	800930e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800930a:	2301      	movs	r3, #1
 800930c:	e00f      	b.n	800932e <CDC_Transmit_FS+0x46>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800930e:	887b      	ldrh	r3, [r7, #2]
 8009310:	461a      	mov	r2, r3
 8009312:	6879      	ldr	r1, [r7, #4]
 8009314:	4808      	ldr	r0, [pc, #32]	; (8009338 <CDC_Transmit_FS+0x50>)
 8009316:	f7fe fdc5 	bl	8007ea4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800931a:	4807      	ldr	r0, [pc, #28]	; (8009338 <CDC_Transmit_FS+0x50>)
 800931c:	f7fe fdee 	bl	8007efc <USBD_CDC_TransmitPacket>
 8009320:	4603      	mov	r3, r0
 8009322:	73fb      	strb	r3, [r7, #15]
  hcdc->TxState = 0;
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	2200      	movs	r2, #0
 8009328:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  /* USER CODE END 7 */
  return result;
 800932c:	7bfb      	ldrb	r3, [r7, #15]
}
 800932e:	4618      	mov	r0, r3
 8009330:	3710      	adds	r7, #16
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	20000340 	.word	0x20000340

0800933c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800933c:	b480      	push	{r7}
 800933e:	b083      	sub	sp, #12
 8009340:	af00      	add	r7, sp, #0
 8009342:	4603      	mov	r3, r0
 8009344:	6039      	str	r1, [r7, #0]
 8009346:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	2212      	movs	r2, #18
 800934c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800934e:	4b03      	ldr	r3, [pc, #12]	; (800935c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009350:	4618      	mov	r0, r3
 8009352:	370c      	adds	r7, #12
 8009354:	46bd      	mov	sp, r7
 8009356:	bc80      	pop	{r7}
 8009358:	4770      	bx	lr
 800935a:	bf00      	nop
 800935c:	20000148 	.word	0x20000148

08009360 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009360:	b480      	push	{r7}
 8009362:	b083      	sub	sp, #12
 8009364:	af00      	add	r7, sp, #0
 8009366:	4603      	mov	r3, r0
 8009368:	6039      	str	r1, [r7, #0]
 800936a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	2204      	movs	r2, #4
 8009370:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009372:	4b03      	ldr	r3, [pc, #12]	; (8009380 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009374:	4618      	mov	r0, r3
 8009376:	370c      	adds	r7, #12
 8009378:	46bd      	mov	sp, r7
 800937a:	bc80      	pop	{r7}
 800937c:	4770      	bx	lr
 800937e:	bf00      	nop
 8009380:	2000015c 	.word	0x2000015c

08009384 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b082      	sub	sp, #8
 8009388:	af00      	add	r7, sp, #0
 800938a:	4603      	mov	r3, r0
 800938c:	6039      	str	r1, [r7, #0]
 800938e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009390:	79fb      	ldrb	r3, [r7, #7]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d105      	bne.n	80093a2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009396:	683a      	ldr	r2, [r7, #0]
 8009398:	4907      	ldr	r1, [pc, #28]	; (80093b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800939a:	4808      	ldr	r0, [pc, #32]	; (80093bc <USBD_FS_ProductStrDescriptor+0x38>)
 800939c:	f7ff fdc4 	bl	8008f28 <USBD_GetString>
 80093a0:	e004      	b.n	80093ac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80093a2:	683a      	ldr	r2, [r7, #0]
 80093a4:	4904      	ldr	r1, [pc, #16]	; (80093b8 <USBD_FS_ProductStrDescriptor+0x34>)
 80093a6:	4805      	ldr	r0, [pc, #20]	; (80093bc <USBD_FS_ProductStrDescriptor+0x38>)
 80093a8:	f7ff fdbe 	bl	8008f28 <USBD_GetString>
  }
  return USBD_StrDesc;
 80093ac:	4b02      	ldr	r3, [pc, #8]	; (80093b8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3708      	adds	r7, #8
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	20000ddc 	.word	0x20000ddc
 80093bc:	0800a4bc 	.word	0x0800a4bc

080093c0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b082      	sub	sp, #8
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	4603      	mov	r3, r0
 80093c8:	6039      	str	r1, [r7, #0]
 80093ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80093cc:	683a      	ldr	r2, [r7, #0]
 80093ce:	4904      	ldr	r1, [pc, #16]	; (80093e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80093d0:	4804      	ldr	r0, [pc, #16]	; (80093e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80093d2:	f7ff fda9 	bl	8008f28 <USBD_GetString>
  return USBD_StrDesc;
 80093d6:	4b02      	ldr	r3, [pc, #8]	; (80093e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3708      	adds	r7, #8
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}
 80093e0:	20000ddc 	.word	0x20000ddc
 80093e4:	0800a4d0 	.word	0x0800a4d0

080093e8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b082      	sub	sp, #8
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	4603      	mov	r3, r0
 80093f0:	6039      	str	r1, [r7, #0]
 80093f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	221a      	movs	r2, #26
 80093f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80093fa:	f000 f843 	bl	8009484 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80093fe:	4b02      	ldr	r3, [pc, #8]	; (8009408 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009400:	4618      	mov	r0, r3
 8009402:	3708      	adds	r7, #8
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}
 8009408:	20000160 	.word	0x20000160

0800940c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b082      	sub	sp, #8
 8009410:	af00      	add	r7, sp, #0
 8009412:	4603      	mov	r3, r0
 8009414:	6039      	str	r1, [r7, #0]
 8009416:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009418:	79fb      	ldrb	r3, [r7, #7]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d105      	bne.n	800942a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800941e:	683a      	ldr	r2, [r7, #0]
 8009420:	4907      	ldr	r1, [pc, #28]	; (8009440 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009422:	4808      	ldr	r0, [pc, #32]	; (8009444 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009424:	f7ff fd80 	bl	8008f28 <USBD_GetString>
 8009428:	e004      	b.n	8009434 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800942a:	683a      	ldr	r2, [r7, #0]
 800942c:	4904      	ldr	r1, [pc, #16]	; (8009440 <USBD_FS_ConfigStrDescriptor+0x34>)
 800942e:	4805      	ldr	r0, [pc, #20]	; (8009444 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009430:	f7ff fd7a 	bl	8008f28 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009434:	4b02      	ldr	r3, [pc, #8]	; (8009440 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009436:	4618      	mov	r0, r3
 8009438:	3708      	adds	r7, #8
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop
 8009440:	20000ddc 	.word	0x20000ddc
 8009444:	0800a4e4 	.word	0x0800a4e4

08009448 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b082      	sub	sp, #8
 800944c:	af00      	add	r7, sp, #0
 800944e:	4603      	mov	r3, r0
 8009450:	6039      	str	r1, [r7, #0]
 8009452:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009454:	79fb      	ldrb	r3, [r7, #7]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d105      	bne.n	8009466 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800945a:	683a      	ldr	r2, [r7, #0]
 800945c:	4907      	ldr	r1, [pc, #28]	; (800947c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800945e:	4808      	ldr	r0, [pc, #32]	; (8009480 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009460:	f7ff fd62 	bl	8008f28 <USBD_GetString>
 8009464:	e004      	b.n	8009470 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009466:	683a      	ldr	r2, [r7, #0]
 8009468:	4904      	ldr	r1, [pc, #16]	; (800947c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800946a:	4805      	ldr	r0, [pc, #20]	; (8009480 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800946c:	f7ff fd5c 	bl	8008f28 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009470:	4b02      	ldr	r3, [pc, #8]	; (800947c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009472:	4618      	mov	r0, r3
 8009474:	3708      	adds	r7, #8
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	20000ddc 	.word	0x20000ddc
 8009480:	0800a4f0 	.word	0x0800a4f0

08009484 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b084      	sub	sp, #16
 8009488:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800948a:	4b0f      	ldr	r3, [pc, #60]	; (80094c8 <Get_SerialNum+0x44>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009490:	4b0e      	ldr	r3, [pc, #56]	; (80094cc <Get_SerialNum+0x48>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009496:	4b0e      	ldr	r3, [pc, #56]	; (80094d0 <Get_SerialNum+0x4c>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800949c:	68fa      	ldr	r2, [r7, #12]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	4413      	add	r3, r2
 80094a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d009      	beq.n	80094be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80094aa:	2208      	movs	r2, #8
 80094ac:	4909      	ldr	r1, [pc, #36]	; (80094d4 <Get_SerialNum+0x50>)
 80094ae:	68f8      	ldr	r0, [r7, #12]
 80094b0:	f000 f814 	bl	80094dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80094b4:	2204      	movs	r2, #4
 80094b6:	4908      	ldr	r1, [pc, #32]	; (80094d8 <Get_SerialNum+0x54>)
 80094b8:	68b8      	ldr	r0, [r7, #8]
 80094ba:	f000 f80f 	bl	80094dc <IntToUnicode>
  }
}
 80094be:	bf00      	nop
 80094c0:	3710      	adds	r7, #16
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
 80094c6:	bf00      	nop
 80094c8:	1ffff7e8 	.word	0x1ffff7e8
 80094cc:	1ffff7ec 	.word	0x1ffff7ec
 80094d0:	1ffff7f0 	.word	0x1ffff7f0
 80094d4:	20000162 	.word	0x20000162
 80094d8:	20000172 	.word	0x20000172

080094dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80094dc:	b480      	push	{r7}
 80094de:	b087      	sub	sp, #28
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	60f8      	str	r0, [r7, #12]
 80094e4:	60b9      	str	r1, [r7, #8]
 80094e6:	4613      	mov	r3, r2
 80094e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80094ea:	2300      	movs	r3, #0
 80094ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80094ee:	2300      	movs	r3, #0
 80094f0:	75fb      	strb	r3, [r7, #23]
 80094f2:	e027      	b.n	8009544 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	0f1b      	lsrs	r3, r3, #28
 80094f8:	2b09      	cmp	r3, #9
 80094fa:	d80b      	bhi.n	8009514 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	0f1b      	lsrs	r3, r3, #28
 8009500:	b2da      	uxtb	r2, r3
 8009502:	7dfb      	ldrb	r3, [r7, #23]
 8009504:	005b      	lsls	r3, r3, #1
 8009506:	4619      	mov	r1, r3
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	440b      	add	r3, r1
 800950c:	3230      	adds	r2, #48	; 0x30
 800950e:	b2d2      	uxtb	r2, r2
 8009510:	701a      	strb	r2, [r3, #0]
 8009512:	e00a      	b.n	800952a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	0f1b      	lsrs	r3, r3, #28
 8009518:	b2da      	uxtb	r2, r3
 800951a:	7dfb      	ldrb	r3, [r7, #23]
 800951c:	005b      	lsls	r3, r3, #1
 800951e:	4619      	mov	r1, r3
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	440b      	add	r3, r1
 8009524:	3237      	adds	r2, #55	; 0x37
 8009526:	b2d2      	uxtb	r2, r2
 8009528:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	011b      	lsls	r3, r3, #4
 800952e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009530:	7dfb      	ldrb	r3, [r7, #23]
 8009532:	005b      	lsls	r3, r3, #1
 8009534:	3301      	adds	r3, #1
 8009536:	68ba      	ldr	r2, [r7, #8]
 8009538:	4413      	add	r3, r2
 800953a:	2200      	movs	r2, #0
 800953c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800953e:	7dfb      	ldrb	r3, [r7, #23]
 8009540:	3301      	adds	r3, #1
 8009542:	75fb      	strb	r3, [r7, #23]
 8009544:	7dfa      	ldrb	r2, [r7, #23]
 8009546:	79fb      	ldrb	r3, [r7, #7]
 8009548:	429a      	cmp	r2, r3
 800954a:	d3d3      	bcc.n	80094f4 <IntToUnicode+0x18>
  }
}
 800954c:	bf00      	nop
 800954e:	bf00      	nop
 8009550:	371c      	adds	r7, #28
 8009552:	46bd      	mov	sp, r7
 8009554:	bc80      	pop	{r7}
 8009556:	4770      	bx	lr

08009558 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a11      	ldr	r2, [pc, #68]	; (80095ac <HAL_PCD_MspInit+0x54>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d11b      	bne.n	80095a2 <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800956a:	4b11      	ldr	r3, [pc, #68]	; (80095b0 <HAL_PCD_MspInit+0x58>)
 800956c:	69db      	ldr	r3, [r3, #28]
 800956e:	4a10      	ldr	r2, [pc, #64]	; (80095b0 <HAL_PCD_MspInit+0x58>)
 8009570:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009574:	61d3      	str	r3, [r2, #28]
 8009576:	4b0e      	ldr	r3, [pc, #56]	; (80095b0 <HAL_PCD_MspInit+0x58>)
 8009578:	69db      	ldr	r3, [r3, #28]
 800957a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800957e:	60fb      	str	r3, [r7, #12]
 8009580:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8009582:	2200      	movs	r2, #0
 8009584:	2100      	movs	r1, #0
 8009586:	2013      	movs	r0, #19
 8009588:	f7f8 fbd3 	bl	8001d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800958c:	2013      	movs	r0, #19
 800958e:	f7f8 fbec 	bl	8001d6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009592:	2200      	movs	r2, #0
 8009594:	2100      	movs	r1, #0
 8009596:	2014      	movs	r0, #20
 8009598:	f7f8 fbcb 	bl	8001d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800959c:	2014      	movs	r0, #20
 800959e:	f7f8 fbe4 	bl	8001d6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80095a2:	bf00      	nop
 80095a4:	3710      	adds	r7, #16
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
 80095aa:	bf00      	nop
 80095ac:	40005c00 	.word	0x40005c00
 80095b0:	40021000 	.word	0x40021000

080095b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80095c8:	4619      	mov	r1, r3
 80095ca:	4610      	mov	r0, r2
 80095cc:	f7fe fd7b 	bl	80080c6 <USBD_LL_SetupStage>
}
 80095d0:	bf00      	nop
 80095d2:	3708      	adds	r7, #8
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	460b      	mov	r3, r1
 80095e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80095ea:	78fa      	ldrb	r2, [r7, #3]
 80095ec:	6879      	ldr	r1, [r7, #4]
 80095ee:	4613      	mov	r3, r2
 80095f0:	009b      	lsls	r3, r3, #2
 80095f2:	4413      	add	r3, r2
 80095f4:	00db      	lsls	r3, r3, #3
 80095f6:	440b      	add	r3, r1
 80095f8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	78fb      	ldrb	r3, [r7, #3]
 8009600:	4619      	mov	r1, r3
 8009602:	f7fe fdad 	bl	8008160 <USBD_LL_DataOutStage>
}
 8009606:	bf00      	nop
 8009608:	3708      	adds	r7, #8
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}

0800960e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800960e:	b580      	push	{r7, lr}
 8009610:	b082      	sub	sp, #8
 8009612:	af00      	add	r7, sp, #0
 8009614:	6078      	str	r0, [r7, #4]
 8009616:	460b      	mov	r3, r1
 8009618:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009620:	78fa      	ldrb	r2, [r7, #3]
 8009622:	6879      	ldr	r1, [r7, #4]
 8009624:	4613      	mov	r3, r2
 8009626:	009b      	lsls	r3, r3, #2
 8009628:	4413      	add	r3, r2
 800962a:	00db      	lsls	r3, r3, #3
 800962c:	440b      	add	r3, r1
 800962e:	333c      	adds	r3, #60	; 0x3c
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	78fb      	ldrb	r3, [r7, #3]
 8009634:	4619      	mov	r1, r3
 8009636:	f7fe fe04 	bl	8008242 <USBD_LL_DataInStage>
}
 800963a:	bf00      	nop
 800963c:	3708      	adds	r7, #8
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}

08009642 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009642:	b580      	push	{r7, lr}
 8009644:	b082      	sub	sp, #8
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009650:	4618      	mov	r0, r3
 8009652:	f7fe ff14 	bl	800847e <USBD_LL_SOF>
}
 8009656:	bf00      	nop
 8009658:	3708      	adds	r7, #8
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}

0800965e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800965e:	b580      	push	{r7, lr}
 8009660:	b084      	sub	sp, #16
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009666:	2301      	movs	r3, #1
 8009668:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	689b      	ldr	r3, [r3, #8]
 800966e:	2b02      	cmp	r3, #2
 8009670:	d001      	beq.n	8009676 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009672:	f7f7 fb79 	bl	8000d68 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800967c:	7bfa      	ldrb	r2, [r7, #15]
 800967e:	4611      	mov	r1, r2
 8009680:	4618      	mov	r0, r3
 8009682:	f7fe fec4 	bl	800840e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800968c:	4618      	mov	r0, r3
 800968e:	f7fe fe7d 	bl	800838c <USBD_LL_Reset>
}
 8009692:	bf00      	nop
 8009694:	3710      	adds	r7, #16
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
	...

0800969c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b082      	sub	sp, #8
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80096aa:	4618      	mov	r0, r3
 80096ac:	f7fe febe 	bl	800842c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	699b      	ldr	r3, [r3, #24]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d005      	beq.n	80096c4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80096b8:	4b04      	ldr	r3, [pc, #16]	; (80096cc <HAL_PCD_SuspendCallback+0x30>)
 80096ba:	691b      	ldr	r3, [r3, #16]
 80096bc:	4a03      	ldr	r2, [pc, #12]	; (80096cc <HAL_PCD_SuspendCallback+0x30>)
 80096be:	f043 0306 	orr.w	r3, r3, #6
 80096c2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80096c4:	bf00      	nop
 80096c6:	3708      	adds	r7, #8
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}
 80096cc:	e000ed00 	.word	0xe000ed00

080096d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b082      	sub	sp, #8
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80096de:	4618      	mov	r0, r3
 80096e0:	f7fe feb8 	bl	8008454 <USBD_LL_Resume>
}
 80096e4:	bf00      	nop
 80096e6:	3708      	adds	r7, #8
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}

080096ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b082      	sub	sp, #8
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80096f4:	4a28      	ldr	r2, [pc, #160]	; (8009798 <USBD_LL_Init+0xac>)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	4a26      	ldr	r2, [pc, #152]	; (8009798 <USBD_LL_Init+0xac>)
 8009700:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009704:	4b24      	ldr	r3, [pc, #144]	; (8009798 <USBD_LL_Init+0xac>)
 8009706:	4a25      	ldr	r2, [pc, #148]	; (800979c <USBD_LL_Init+0xb0>)
 8009708:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800970a:	4b23      	ldr	r3, [pc, #140]	; (8009798 <USBD_LL_Init+0xac>)
 800970c:	2208      	movs	r2, #8
 800970e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009710:	4b21      	ldr	r3, [pc, #132]	; (8009798 <USBD_LL_Init+0xac>)
 8009712:	2202      	movs	r2, #2
 8009714:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009716:	4b20      	ldr	r3, [pc, #128]	; (8009798 <USBD_LL_Init+0xac>)
 8009718:	2200      	movs	r2, #0
 800971a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800971c:	4b1e      	ldr	r3, [pc, #120]	; (8009798 <USBD_LL_Init+0xac>)
 800971e:	2200      	movs	r2, #0
 8009720:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009722:	4b1d      	ldr	r3, [pc, #116]	; (8009798 <USBD_LL_Init+0xac>)
 8009724:	2200      	movs	r2, #0
 8009726:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009728:	481b      	ldr	r0, [pc, #108]	; (8009798 <USBD_LL_Init+0xac>)
 800972a:	f7f8 feab 	bl	8002484 <HAL_PCD_Init>
 800972e:	4603      	mov	r3, r0
 8009730:	2b00      	cmp	r3, #0
 8009732:	d001      	beq.n	8009738 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009734:	f7f7 fb18 	bl	8000d68 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800973e:	2318      	movs	r3, #24
 8009740:	2200      	movs	r2, #0
 8009742:	2100      	movs	r1, #0
 8009744:	f7fa fb1f 	bl	8003d86 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800974e:	2358      	movs	r3, #88	; 0x58
 8009750:	2200      	movs	r2, #0
 8009752:	2180      	movs	r1, #128	; 0x80
 8009754:	f7fa fb17 	bl	8003d86 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800975e:	23c0      	movs	r3, #192	; 0xc0
 8009760:	2200      	movs	r2, #0
 8009762:	2181      	movs	r1, #129	; 0x81
 8009764:	f7fa fb0f 	bl	8003d86 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800976e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009772:	2200      	movs	r2, #0
 8009774:	2101      	movs	r1, #1
 8009776:	f7fa fb06 	bl	8003d86 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009780:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009784:	2200      	movs	r2, #0
 8009786:	2182      	movs	r1, #130	; 0x82
 8009788:	f7fa fafd 	bl	8003d86 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800978c:	2300      	movs	r3, #0
}
 800978e:	4618      	mov	r0, r3
 8009790:	3708      	adds	r7, #8
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop
 8009798:	20000fdc 	.word	0x20000fdc
 800979c:	40005c00 	.word	0x40005c00

080097a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b084      	sub	sp, #16
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097a8:	2300      	movs	r3, #0
 80097aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097ac:	2300      	movs	r3, #0
 80097ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7f8 ff6f 	bl	800269a <HAL_PCD_Start>
 80097bc:	4603      	mov	r3, r0
 80097be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097c0:	7bfb      	ldrb	r3, [r7, #15]
 80097c2:	4618      	mov	r0, r3
 80097c4:	f000 f94e 	bl	8009a64 <USBD_Get_USB_Status>
 80097c8:	4603      	mov	r3, r0
 80097ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3710      	adds	r7, #16
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}

080097d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80097d6:	b580      	push	{r7, lr}
 80097d8:	b084      	sub	sp, #16
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
 80097de:	4608      	mov	r0, r1
 80097e0:	4611      	mov	r1, r2
 80097e2:	461a      	mov	r2, r3
 80097e4:	4603      	mov	r3, r0
 80097e6:	70fb      	strb	r3, [r7, #3]
 80097e8:	460b      	mov	r3, r1
 80097ea:	70bb      	strb	r3, [r7, #2]
 80097ec:	4613      	mov	r3, r2
 80097ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097f0:	2300      	movs	r3, #0
 80097f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097f4:	2300      	movs	r3, #0
 80097f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80097fe:	78bb      	ldrb	r3, [r7, #2]
 8009800:	883a      	ldrh	r2, [r7, #0]
 8009802:	78f9      	ldrb	r1, [r7, #3]
 8009804:	f7f9 f8e7 	bl	80029d6 <HAL_PCD_EP_Open>
 8009808:	4603      	mov	r3, r0
 800980a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800980c:	7bfb      	ldrb	r3, [r7, #15]
 800980e:	4618      	mov	r0, r3
 8009810:	f000 f928 	bl	8009a64 <USBD_Get_USB_Status>
 8009814:	4603      	mov	r3, r0
 8009816:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009818:	7bbb      	ldrb	r3, [r7, #14]
}
 800981a:	4618      	mov	r0, r3
 800981c:	3710      	adds	r7, #16
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}

08009822 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009822:	b580      	push	{r7, lr}
 8009824:	b084      	sub	sp, #16
 8009826:	af00      	add	r7, sp, #0
 8009828:	6078      	str	r0, [r7, #4]
 800982a:	460b      	mov	r3, r1
 800982c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800982e:	2300      	movs	r3, #0
 8009830:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009832:	2300      	movs	r3, #0
 8009834:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800983c:	78fa      	ldrb	r2, [r7, #3]
 800983e:	4611      	mov	r1, r2
 8009840:	4618      	mov	r0, r3
 8009842:	f7f9 f92e 	bl	8002aa2 <HAL_PCD_EP_Close>
 8009846:	4603      	mov	r3, r0
 8009848:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800984a:	7bfb      	ldrb	r3, [r7, #15]
 800984c:	4618      	mov	r0, r3
 800984e:	f000 f909 	bl	8009a64 <USBD_Get_USB_Status>
 8009852:	4603      	mov	r3, r0
 8009854:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009856:	7bbb      	ldrb	r3, [r7, #14]
}
 8009858:	4618      	mov	r0, r3
 800985a:	3710      	adds	r7, #16
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b084      	sub	sp, #16
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	460b      	mov	r3, r1
 800986a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800986c:	2300      	movs	r3, #0
 800986e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009870:	2300      	movs	r3, #0
 8009872:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800987a:	78fa      	ldrb	r2, [r7, #3]
 800987c:	4611      	mov	r1, r2
 800987e:	4618      	mov	r0, r3
 8009880:	f7f9 f9ee 	bl	8002c60 <HAL_PCD_EP_SetStall>
 8009884:	4603      	mov	r3, r0
 8009886:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009888:	7bfb      	ldrb	r3, [r7, #15]
 800988a:	4618      	mov	r0, r3
 800988c:	f000 f8ea 	bl	8009a64 <USBD_Get_USB_Status>
 8009890:	4603      	mov	r3, r0
 8009892:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009894:	7bbb      	ldrb	r3, [r7, #14]
}
 8009896:	4618      	mov	r0, r3
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800989e:	b580      	push	{r7, lr}
 80098a0:	b084      	sub	sp, #16
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
 80098a6:	460b      	mov	r3, r1
 80098a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098aa:	2300      	movs	r3, #0
 80098ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098ae:	2300      	movs	r3, #0
 80098b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80098b8:	78fa      	ldrb	r2, [r7, #3]
 80098ba:	4611      	mov	r1, r2
 80098bc:	4618      	mov	r0, r3
 80098be:	f7f9 fa2f 	bl	8002d20 <HAL_PCD_EP_ClrStall>
 80098c2:	4603      	mov	r3, r0
 80098c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098c6:	7bfb      	ldrb	r3, [r7, #15]
 80098c8:	4618      	mov	r0, r3
 80098ca:	f000 f8cb 	bl	8009a64 <USBD_Get_USB_Status>
 80098ce:	4603      	mov	r3, r0
 80098d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3710      	adds	r7, #16
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}

080098dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098dc:	b480      	push	{r7}
 80098de:	b085      	sub	sp, #20
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	460b      	mov	r3, r1
 80098e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80098ee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80098f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	da0c      	bge.n	8009912 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80098f8:	78fb      	ldrb	r3, [r7, #3]
 80098fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098fe:	68f9      	ldr	r1, [r7, #12]
 8009900:	1c5a      	adds	r2, r3, #1
 8009902:	4613      	mov	r3, r2
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	4413      	add	r3, r2
 8009908:	00db      	lsls	r3, r3, #3
 800990a:	440b      	add	r3, r1
 800990c:	3302      	adds	r3, #2
 800990e:	781b      	ldrb	r3, [r3, #0]
 8009910:	e00b      	b.n	800992a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009912:	78fb      	ldrb	r3, [r7, #3]
 8009914:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009918:	68f9      	ldr	r1, [r7, #12]
 800991a:	4613      	mov	r3, r2
 800991c:	009b      	lsls	r3, r3, #2
 800991e:	4413      	add	r3, r2
 8009920:	00db      	lsls	r3, r3, #3
 8009922:	440b      	add	r3, r1
 8009924:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009928:	781b      	ldrb	r3, [r3, #0]
  }
}
 800992a:	4618      	mov	r0, r3
 800992c:	3714      	adds	r7, #20
 800992e:	46bd      	mov	sp, r7
 8009930:	bc80      	pop	{r7}
 8009932:	4770      	bx	lr

08009934 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b084      	sub	sp, #16
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	460b      	mov	r3, r1
 800993e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009940:	2300      	movs	r3, #0
 8009942:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009944:	2300      	movs	r3, #0
 8009946:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800994e:	78fa      	ldrb	r2, [r7, #3]
 8009950:	4611      	mov	r1, r2
 8009952:	4618      	mov	r0, r3
 8009954:	f7f9 f81a 	bl	800298c <HAL_PCD_SetAddress>
 8009958:	4603      	mov	r3, r0
 800995a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800995c:	7bfb      	ldrb	r3, [r7, #15]
 800995e:	4618      	mov	r0, r3
 8009960:	f000 f880 	bl	8009a64 <USBD_Get_USB_Status>
 8009964:	4603      	mov	r3, r0
 8009966:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009968:	7bbb      	ldrb	r3, [r7, #14]
}
 800996a:	4618      	mov	r0, r3
 800996c:	3710      	adds	r7, #16
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}

08009972 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009972:	b580      	push	{r7, lr}
 8009974:	b086      	sub	sp, #24
 8009976:	af00      	add	r7, sp, #0
 8009978:	60f8      	str	r0, [r7, #12]
 800997a:	607a      	str	r2, [r7, #4]
 800997c:	461a      	mov	r2, r3
 800997e:	460b      	mov	r3, r1
 8009980:	72fb      	strb	r3, [r7, #11]
 8009982:	4613      	mov	r3, r2
 8009984:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009986:	2300      	movs	r3, #0
 8009988:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800998a:	2300      	movs	r3, #0
 800998c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009994:	893b      	ldrh	r3, [r7, #8]
 8009996:	7af9      	ldrb	r1, [r7, #11]
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	f7f9 f91e 	bl	8002bda <HAL_PCD_EP_Transmit>
 800999e:	4603      	mov	r3, r0
 80099a0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099a2:	7dfb      	ldrb	r3, [r7, #23]
 80099a4:	4618      	mov	r0, r3
 80099a6:	f000 f85d 	bl	8009a64 <USBD_Get_USB_Status>
 80099aa:	4603      	mov	r3, r0
 80099ac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80099ae:	7dbb      	ldrb	r3, [r7, #22]
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3718      	adds	r7, #24
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b086      	sub	sp, #24
 80099bc:	af00      	add	r7, sp, #0
 80099be:	60f8      	str	r0, [r7, #12]
 80099c0:	607a      	str	r2, [r7, #4]
 80099c2:	461a      	mov	r2, r3
 80099c4:	460b      	mov	r3, r1
 80099c6:	72fb      	strb	r3, [r7, #11]
 80099c8:	4613      	mov	r3, r2
 80099ca:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099cc:	2300      	movs	r3, #0
 80099ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099d0:	2300      	movs	r3, #0
 80099d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80099da:	893b      	ldrh	r3, [r7, #8]
 80099dc:	7af9      	ldrb	r1, [r7, #11]
 80099de:	687a      	ldr	r2, [r7, #4]
 80099e0:	f7f9 f8a7 	bl	8002b32 <HAL_PCD_EP_Receive>
 80099e4:	4603      	mov	r3, r0
 80099e6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099e8:	7dfb      	ldrb	r3, [r7, #23]
 80099ea:	4618      	mov	r0, r3
 80099ec:	f000 f83a 	bl	8009a64 <USBD_Get_USB_Status>
 80099f0:	4603      	mov	r3, r0
 80099f2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80099f4:	7dbb      	ldrb	r3, [r7, #22]
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3718      	adds	r7, #24
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}

080099fe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099fe:	b580      	push	{r7, lr}
 8009a00:	b082      	sub	sp, #8
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	6078      	str	r0, [r7, #4]
 8009a06:	460b      	mov	r3, r1
 8009a08:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a10:	78fa      	ldrb	r2, [r7, #3]
 8009a12:	4611      	mov	r1, r2
 8009a14:	4618      	mov	r0, r3
 8009a16:	f7f9 f8c9 	bl	8002bac <HAL_PCD_EP_GetRxCount>
 8009a1a:	4603      	mov	r3, r0
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3708      	adds	r7, #8
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b083      	sub	sp, #12
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009a2c:	4b02      	ldr	r3, [pc, #8]	; (8009a38 <USBD_static_malloc+0x14>)
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	370c      	adds	r7, #12
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bc80      	pop	{r7}
 8009a36:	4770      	bx	lr
 8009a38:	200012c8 	.word	0x200012c8

08009a3c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b083      	sub	sp, #12
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]

}
 8009a44:	bf00      	nop
 8009a46:	370c      	adds	r7, #12
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bc80      	pop	{r7}
 8009a4c:	4770      	bx	lr

08009a4e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a4e:	b480      	push	{r7}
 8009a50:	b083      	sub	sp, #12
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
 8009a56:	460b      	mov	r3, r1
 8009a58:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009a5a:	bf00      	nop
 8009a5c:	370c      	adds	r7, #12
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bc80      	pop	{r7}
 8009a62:	4770      	bx	lr

08009a64 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b085      	sub	sp, #20
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009a72:	79fb      	ldrb	r3, [r7, #7]
 8009a74:	2b03      	cmp	r3, #3
 8009a76:	d817      	bhi.n	8009aa8 <USBD_Get_USB_Status+0x44>
 8009a78:	a201      	add	r2, pc, #4	; (adr r2, 8009a80 <USBD_Get_USB_Status+0x1c>)
 8009a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a7e:	bf00      	nop
 8009a80:	08009a91 	.word	0x08009a91
 8009a84:	08009a97 	.word	0x08009a97
 8009a88:	08009a9d 	.word	0x08009a9d
 8009a8c:	08009aa3 	.word	0x08009aa3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009a90:	2300      	movs	r3, #0
 8009a92:	73fb      	strb	r3, [r7, #15]
    break;
 8009a94:	e00b      	b.n	8009aae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009a96:	2302      	movs	r3, #2
 8009a98:	73fb      	strb	r3, [r7, #15]
    break;
 8009a9a:	e008      	b.n	8009aae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	73fb      	strb	r3, [r7, #15]
    break;
 8009aa0:	e005      	b.n	8009aae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009aa2:	2302      	movs	r3, #2
 8009aa4:	73fb      	strb	r3, [r7, #15]
    break;
 8009aa6:	e002      	b.n	8009aae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009aa8:	2302      	movs	r3, #2
 8009aaa:	73fb      	strb	r3, [r7, #15]
    break;
 8009aac:	bf00      	nop
  }
  return usb_status;
 8009aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3714      	adds	r7, #20
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bc80      	pop	{r7}
 8009ab8:	4770      	bx	lr
 8009aba:	bf00      	nop

08009abc <__errno>:
 8009abc:	4b01      	ldr	r3, [pc, #4]	; (8009ac4 <__errno+0x8>)
 8009abe:	6818      	ldr	r0, [r3, #0]
 8009ac0:	4770      	bx	lr
 8009ac2:	bf00      	nop
 8009ac4:	2000017c 	.word	0x2000017c

08009ac8 <__libc_init_array>:
 8009ac8:	b570      	push	{r4, r5, r6, lr}
 8009aca:	2600      	movs	r6, #0
 8009acc:	4d0c      	ldr	r5, [pc, #48]	; (8009b00 <__libc_init_array+0x38>)
 8009ace:	4c0d      	ldr	r4, [pc, #52]	; (8009b04 <__libc_init_array+0x3c>)
 8009ad0:	1b64      	subs	r4, r4, r5
 8009ad2:	10a4      	asrs	r4, r4, #2
 8009ad4:	42a6      	cmp	r6, r4
 8009ad6:	d109      	bne.n	8009aec <__libc_init_array+0x24>
 8009ad8:	f000 fc9c 	bl	800a414 <_init>
 8009adc:	2600      	movs	r6, #0
 8009ade:	4d0a      	ldr	r5, [pc, #40]	; (8009b08 <__libc_init_array+0x40>)
 8009ae0:	4c0a      	ldr	r4, [pc, #40]	; (8009b0c <__libc_init_array+0x44>)
 8009ae2:	1b64      	subs	r4, r4, r5
 8009ae4:	10a4      	asrs	r4, r4, #2
 8009ae6:	42a6      	cmp	r6, r4
 8009ae8:	d105      	bne.n	8009af6 <__libc_init_array+0x2e>
 8009aea:	bd70      	pop	{r4, r5, r6, pc}
 8009aec:	f855 3b04 	ldr.w	r3, [r5], #4
 8009af0:	4798      	blx	r3
 8009af2:	3601      	adds	r6, #1
 8009af4:	e7ee      	b.n	8009ad4 <__libc_init_array+0xc>
 8009af6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009afa:	4798      	blx	r3
 8009afc:	3601      	adds	r6, #1
 8009afe:	e7f2      	b.n	8009ae6 <__libc_init_array+0x1e>
 8009b00:	0800a54c 	.word	0x0800a54c
 8009b04:	0800a54c 	.word	0x0800a54c
 8009b08:	0800a54c 	.word	0x0800a54c
 8009b0c:	0800a550 	.word	0x0800a550

08009b10 <memset>:
 8009b10:	4603      	mov	r3, r0
 8009b12:	4402      	add	r2, r0
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d100      	bne.n	8009b1a <memset+0xa>
 8009b18:	4770      	bx	lr
 8009b1a:	f803 1b01 	strb.w	r1, [r3], #1
 8009b1e:	e7f9      	b.n	8009b14 <memset+0x4>

08009b20 <siprintf>:
 8009b20:	b40e      	push	{r1, r2, r3}
 8009b22:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009b26:	b500      	push	{lr}
 8009b28:	b09c      	sub	sp, #112	; 0x70
 8009b2a:	ab1d      	add	r3, sp, #116	; 0x74
 8009b2c:	9002      	str	r0, [sp, #8]
 8009b2e:	9006      	str	r0, [sp, #24]
 8009b30:	9107      	str	r1, [sp, #28]
 8009b32:	9104      	str	r1, [sp, #16]
 8009b34:	4808      	ldr	r0, [pc, #32]	; (8009b58 <siprintf+0x38>)
 8009b36:	4909      	ldr	r1, [pc, #36]	; (8009b5c <siprintf+0x3c>)
 8009b38:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b3c:	9105      	str	r1, [sp, #20]
 8009b3e:	6800      	ldr	r0, [r0, #0]
 8009b40:	a902      	add	r1, sp, #8
 8009b42:	9301      	str	r3, [sp, #4]
 8009b44:	f000 f868 	bl	8009c18 <_svfiprintf_r>
 8009b48:	2200      	movs	r2, #0
 8009b4a:	9b02      	ldr	r3, [sp, #8]
 8009b4c:	701a      	strb	r2, [r3, #0]
 8009b4e:	b01c      	add	sp, #112	; 0x70
 8009b50:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b54:	b003      	add	sp, #12
 8009b56:	4770      	bx	lr
 8009b58:	2000017c 	.word	0x2000017c
 8009b5c:	ffff0208 	.word	0xffff0208

08009b60 <__ssputs_r>:
 8009b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b64:	688e      	ldr	r6, [r1, #8]
 8009b66:	4682      	mov	sl, r0
 8009b68:	429e      	cmp	r6, r3
 8009b6a:	460c      	mov	r4, r1
 8009b6c:	4690      	mov	r8, r2
 8009b6e:	461f      	mov	r7, r3
 8009b70:	d838      	bhi.n	8009be4 <__ssputs_r+0x84>
 8009b72:	898a      	ldrh	r2, [r1, #12]
 8009b74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009b78:	d032      	beq.n	8009be0 <__ssputs_r+0x80>
 8009b7a:	6825      	ldr	r5, [r4, #0]
 8009b7c:	6909      	ldr	r1, [r1, #16]
 8009b7e:	3301      	adds	r3, #1
 8009b80:	eba5 0901 	sub.w	r9, r5, r1
 8009b84:	6965      	ldr	r5, [r4, #20]
 8009b86:	444b      	add	r3, r9
 8009b88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b90:	106d      	asrs	r5, r5, #1
 8009b92:	429d      	cmp	r5, r3
 8009b94:	bf38      	it	cc
 8009b96:	461d      	movcc	r5, r3
 8009b98:	0553      	lsls	r3, r2, #21
 8009b9a:	d531      	bpl.n	8009c00 <__ssputs_r+0xa0>
 8009b9c:	4629      	mov	r1, r5
 8009b9e:	f000 fb6f 	bl	800a280 <_malloc_r>
 8009ba2:	4606      	mov	r6, r0
 8009ba4:	b950      	cbnz	r0, 8009bbc <__ssputs_r+0x5c>
 8009ba6:	230c      	movs	r3, #12
 8009ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8009bac:	f8ca 3000 	str.w	r3, [sl]
 8009bb0:	89a3      	ldrh	r3, [r4, #12]
 8009bb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bb6:	81a3      	strh	r3, [r4, #12]
 8009bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bbc:	464a      	mov	r2, r9
 8009bbe:	6921      	ldr	r1, [r4, #16]
 8009bc0:	f000 face 	bl	800a160 <memcpy>
 8009bc4:	89a3      	ldrh	r3, [r4, #12]
 8009bc6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009bca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bce:	81a3      	strh	r3, [r4, #12]
 8009bd0:	6126      	str	r6, [r4, #16]
 8009bd2:	444e      	add	r6, r9
 8009bd4:	6026      	str	r6, [r4, #0]
 8009bd6:	463e      	mov	r6, r7
 8009bd8:	6165      	str	r5, [r4, #20]
 8009bda:	eba5 0509 	sub.w	r5, r5, r9
 8009bde:	60a5      	str	r5, [r4, #8]
 8009be0:	42be      	cmp	r6, r7
 8009be2:	d900      	bls.n	8009be6 <__ssputs_r+0x86>
 8009be4:	463e      	mov	r6, r7
 8009be6:	4632      	mov	r2, r6
 8009be8:	4641      	mov	r1, r8
 8009bea:	6820      	ldr	r0, [r4, #0]
 8009bec:	f000 fac6 	bl	800a17c <memmove>
 8009bf0:	68a3      	ldr	r3, [r4, #8]
 8009bf2:	2000      	movs	r0, #0
 8009bf4:	1b9b      	subs	r3, r3, r6
 8009bf6:	60a3      	str	r3, [r4, #8]
 8009bf8:	6823      	ldr	r3, [r4, #0]
 8009bfa:	4433      	add	r3, r6
 8009bfc:	6023      	str	r3, [r4, #0]
 8009bfe:	e7db      	b.n	8009bb8 <__ssputs_r+0x58>
 8009c00:	462a      	mov	r2, r5
 8009c02:	f000 fbb1 	bl	800a368 <_realloc_r>
 8009c06:	4606      	mov	r6, r0
 8009c08:	2800      	cmp	r0, #0
 8009c0a:	d1e1      	bne.n	8009bd0 <__ssputs_r+0x70>
 8009c0c:	4650      	mov	r0, sl
 8009c0e:	6921      	ldr	r1, [r4, #16]
 8009c10:	f000 face 	bl	800a1b0 <_free_r>
 8009c14:	e7c7      	b.n	8009ba6 <__ssputs_r+0x46>
	...

08009c18 <_svfiprintf_r>:
 8009c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c1c:	4698      	mov	r8, r3
 8009c1e:	898b      	ldrh	r3, [r1, #12]
 8009c20:	4607      	mov	r7, r0
 8009c22:	061b      	lsls	r3, r3, #24
 8009c24:	460d      	mov	r5, r1
 8009c26:	4614      	mov	r4, r2
 8009c28:	b09d      	sub	sp, #116	; 0x74
 8009c2a:	d50e      	bpl.n	8009c4a <_svfiprintf_r+0x32>
 8009c2c:	690b      	ldr	r3, [r1, #16]
 8009c2e:	b963      	cbnz	r3, 8009c4a <_svfiprintf_r+0x32>
 8009c30:	2140      	movs	r1, #64	; 0x40
 8009c32:	f000 fb25 	bl	800a280 <_malloc_r>
 8009c36:	6028      	str	r0, [r5, #0]
 8009c38:	6128      	str	r0, [r5, #16]
 8009c3a:	b920      	cbnz	r0, 8009c46 <_svfiprintf_r+0x2e>
 8009c3c:	230c      	movs	r3, #12
 8009c3e:	603b      	str	r3, [r7, #0]
 8009c40:	f04f 30ff 	mov.w	r0, #4294967295
 8009c44:	e0d1      	b.n	8009dea <_svfiprintf_r+0x1d2>
 8009c46:	2340      	movs	r3, #64	; 0x40
 8009c48:	616b      	str	r3, [r5, #20]
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	9309      	str	r3, [sp, #36]	; 0x24
 8009c4e:	2320      	movs	r3, #32
 8009c50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c54:	2330      	movs	r3, #48	; 0x30
 8009c56:	f04f 0901 	mov.w	r9, #1
 8009c5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c5e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009e04 <_svfiprintf_r+0x1ec>
 8009c62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c66:	4623      	mov	r3, r4
 8009c68:	469a      	mov	sl, r3
 8009c6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c6e:	b10a      	cbz	r2, 8009c74 <_svfiprintf_r+0x5c>
 8009c70:	2a25      	cmp	r2, #37	; 0x25
 8009c72:	d1f9      	bne.n	8009c68 <_svfiprintf_r+0x50>
 8009c74:	ebba 0b04 	subs.w	fp, sl, r4
 8009c78:	d00b      	beq.n	8009c92 <_svfiprintf_r+0x7a>
 8009c7a:	465b      	mov	r3, fp
 8009c7c:	4622      	mov	r2, r4
 8009c7e:	4629      	mov	r1, r5
 8009c80:	4638      	mov	r0, r7
 8009c82:	f7ff ff6d 	bl	8009b60 <__ssputs_r>
 8009c86:	3001      	adds	r0, #1
 8009c88:	f000 80aa 	beq.w	8009de0 <_svfiprintf_r+0x1c8>
 8009c8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c8e:	445a      	add	r2, fp
 8009c90:	9209      	str	r2, [sp, #36]	; 0x24
 8009c92:	f89a 3000 	ldrb.w	r3, [sl]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	f000 80a2 	beq.w	8009de0 <_svfiprintf_r+0x1c8>
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8009ca2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ca6:	f10a 0a01 	add.w	sl, sl, #1
 8009caa:	9304      	str	r3, [sp, #16]
 8009cac:	9307      	str	r3, [sp, #28]
 8009cae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009cb2:	931a      	str	r3, [sp, #104]	; 0x68
 8009cb4:	4654      	mov	r4, sl
 8009cb6:	2205      	movs	r2, #5
 8009cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cbc:	4851      	ldr	r0, [pc, #324]	; (8009e04 <_svfiprintf_r+0x1ec>)
 8009cbe:	f000 fa41 	bl	800a144 <memchr>
 8009cc2:	9a04      	ldr	r2, [sp, #16]
 8009cc4:	b9d8      	cbnz	r0, 8009cfe <_svfiprintf_r+0xe6>
 8009cc6:	06d0      	lsls	r0, r2, #27
 8009cc8:	bf44      	itt	mi
 8009cca:	2320      	movmi	r3, #32
 8009ccc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cd0:	0711      	lsls	r1, r2, #28
 8009cd2:	bf44      	itt	mi
 8009cd4:	232b      	movmi	r3, #43	; 0x2b
 8009cd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cda:	f89a 3000 	ldrb.w	r3, [sl]
 8009cde:	2b2a      	cmp	r3, #42	; 0x2a
 8009ce0:	d015      	beq.n	8009d0e <_svfiprintf_r+0xf6>
 8009ce2:	4654      	mov	r4, sl
 8009ce4:	2000      	movs	r0, #0
 8009ce6:	f04f 0c0a 	mov.w	ip, #10
 8009cea:	9a07      	ldr	r2, [sp, #28]
 8009cec:	4621      	mov	r1, r4
 8009cee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cf2:	3b30      	subs	r3, #48	; 0x30
 8009cf4:	2b09      	cmp	r3, #9
 8009cf6:	d94e      	bls.n	8009d96 <_svfiprintf_r+0x17e>
 8009cf8:	b1b0      	cbz	r0, 8009d28 <_svfiprintf_r+0x110>
 8009cfa:	9207      	str	r2, [sp, #28]
 8009cfc:	e014      	b.n	8009d28 <_svfiprintf_r+0x110>
 8009cfe:	eba0 0308 	sub.w	r3, r0, r8
 8009d02:	fa09 f303 	lsl.w	r3, r9, r3
 8009d06:	4313      	orrs	r3, r2
 8009d08:	46a2      	mov	sl, r4
 8009d0a:	9304      	str	r3, [sp, #16]
 8009d0c:	e7d2      	b.n	8009cb4 <_svfiprintf_r+0x9c>
 8009d0e:	9b03      	ldr	r3, [sp, #12]
 8009d10:	1d19      	adds	r1, r3, #4
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	9103      	str	r1, [sp, #12]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	bfbb      	ittet	lt
 8009d1a:	425b      	neglt	r3, r3
 8009d1c:	f042 0202 	orrlt.w	r2, r2, #2
 8009d20:	9307      	strge	r3, [sp, #28]
 8009d22:	9307      	strlt	r3, [sp, #28]
 8009d24:	bfb8      	it	lt
 8009d26:	9204      	strlt	r2, [sp, #16]
 8009d28:	7823      	ldrb	r3, [r4, #0]
 8009d2a:	2b2e      	cmp	r3, #46	; 0x2e
 8009d2c:	d10c      	bne.n	8009d48 <_svfiprintf_r+0x130>
 8009d2e:	7863      	ldrb	r3, [r4, #1]
 8009d30:	2b2a      	cmp	r3, #42	; 0x2a
 8009d32:	d135      	bne.n	8009da0 <_svfiprintf_r+0x188>
 8009d34:	9b03      	ldr	r3, [sp, #12]
 8009d36:	3402      	adds	r4, #2
 8009d38:	1d1a      	adds	r2, r3, #4
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	9203      	str	r2, [sp, #12]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	bfb8      	it	lt
 8009d42:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d46:	9305      	str	r3, [sp, #20]
 8009d48:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009e08 <_svfiprintf_r+0x1f0>
 8009d4c:	2203      	movs	r2, #3
 8009d4e:	4650      	mov	r0, sl
 8009d50:	7821      	ldrb	r1, [r4, #0]
 8009d52:	f000 f9f7 	bl	800a144 <memchr>
 8009d56:	b140      	cbz	r0, 8009d6a <_svfiprintf_r+0x152>
 8009d58:	2340      	movs	r3, #64	; 0x40
 8009d5a:	eba0 000a 	sub.w	r0, r0, sl
 8009d5e:	fa03 f000 	lsl.w	r0, r3, r0
 8009d62:	9b04      	ldr	r3, [sp, #16]
 8009d64:	3401      	adds	r4, #1
 8009d66:	4303      	orrs	r3, r0
 8009d68:	9304      	str	r3, [sp, #16]
 8009d6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d6e:	2206      	movs	r2, #6
 8009d70:	4826      	ldr	r0, [pc, #152]	; (8009e0c <_svfiprintf_r+0x1f4>)
 8009d72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d76:	f000 f9e5 	bl	800a144 <memchr>
 8009d7a:	2800      	cmp	r0, #0
 8009d7c:	d038      	beq.n	8009df0 <_svfiprintf_r+0x1d8>
 8009d7e:	4b24      	ldr	r3, [pc, #144]	; (8009e10 <_svfiprintf_r+0x1f8>)
 8009d80:	bb1b      	cbnz	r3, 8009dca <_svfiprintf_r+0x1b2>
 8009d82:	9b03      	ldr	r3, [sp, #12]
 8009d84:	3307      	adds	r3, #7
 8009d86:	f023 0307 	bic.w	r3, r3, #7
 8009d8a:	3308      	adds	r3, #8
 8009d8c:	9303      	str	r3, [sp, #12]
 8009d8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d90:	4433      	add	r3, r6
 8009d92:	9309      	str	r3, [sp, #36]	; 0x24
 8009d94:	e767      	b.n	8009c66 <_svfiprintf_r+0x4e>
 8009d96:	460c      	mov	r4, r1
 8009d98:	2001      	movs	r0, #1
 8009d9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d9e:	e7a5      	b.n	8009cec <_svfiprintf_r+0xd4>
 8009da0:	2300      	movs	r3, #0
 8009da2:	f04f 0c0a 	mov.w	ip, #10
 8009da6:	4619      	mov	r1, r3
 8009da8:	3401      	adds	r4, #1
 8009daa:	9305      	str	r3, [sp, #20]
 8009dac:	4620      	mov	r0, r4
 8009dae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009db2:	3a30      	subs	r2, #48	; 0x30
 8009db4:	2a09      	cmp	r2, #9
 8009db6:	d903      	bls.n	8009dc0 <_svfiprintf_r+0x1a8>
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d0c5      	beq.n	8009d48 <_svfiprintf_r+0x130>
 8009dbc:	9105      	str	r1, [sp, #20]
 8009dbe:	e7c3      	b.n	8009d48 <_svfiprintf_r+0x130>
 8009dc0:	4604      	mov	r4, r0
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8009dc8:	e7f0      	b.n	8009dac <_svfiprintf_r+0x194>
 8009dca:	ab03      	add	r3, sp, #12
 8009dcc:	9300      	str	r3, [sp, #0]
 8009dce:	462a      	mov	r2, r5
 8009dd0:	4638      	mov	r0, r7
 8009dd2:	4b10      	ldr	r3, [pc, #64]	; (8009e14 <_svfiprintf_r+0x1fc>)
 8009dd4:	a904      	add	r1, sp, #16
 8009dd6:	f3af 8000 	nop.w
 8009dda:	1c42      	adds	r2, r0, #1
 8009ddc:	4606      	mov	r6, r0
 8009dde:	d1d6      	bne.n	8009d8e <_svfiprintf_r+0x176>
 8009de0:	89ab      	ldrh	r3, [r5, #12]
 8009de2:	065b      	lsls	r3, r3, #25
 8009de4:	f53f af2c 	bmi.w	8009c40 <_svfiprintf_r+0x28>
 8009de8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009dea:	b01d      	add	sp, #116	; 0x74
 8009dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009df0:	ab03      	add	r3, sp, #12
 8009df2:	9300      	str	r3, [sp, #0]
 8009df4:	462a      	mov	r2, r5
 8009df6:	4638      	mov	r0, r7
 8009df8:	4b06      	ldr	r3, [pc, #24]	; (8009e14 <_svfiprintf_r+0x1fc>)
 8009dfa:	a904      	add	r1, sp, #16
 8009dfc:	f000 f87c 	bl	8009ef8 <_printf_i>
 8009e00:	e7eb      	b.n	8009dda <_svfiprintf_r+0x1c2>
 8009e02:	bf00      	nop
 8009e04:	0800a518 	.word	0x0800a518
 8009e08:	0800a51e 	.word	0x0800a51e
 8009e0c:	0800a522 	.word	0x0800a522
 8009e10:	00000000 	.word	0x00000000
 8009e14:	08009b61 	.word	0x08009b61

08009e18 <_printf_common>:
 8009e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e1c:	4616      	mov	r6, r2
 8009e1e:	4699      	mov	r9, r3
 8009e20:	688a      	ldr	r2, [r1, #8]
 8009e22:	690b      	ldr	r3, [r1, #16]
 8009e24:	4607      	mov	r7, r0
 8009e26:	4293      	cmp	r3, r2
 8009e28:	bfb8      	it	lt
 8009e2a:	4613      	movlt	r3, r2
 8009e2c:	6033      	str	r3, [r6, #0]
 8009e2e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009e32:	460c      	mov	r4, r1
 8009e34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009e38:	b10a      	cbz	r2, 8009e3e <_printf_common+0x26>
 8009e3a:	3301      	adds	r3, #1
 8009e3c:	6033      	str	r3, [r6, #0]
 8009e3e:	6823      	ldr	r3, [r4, #0]
 8009e40:	0699      	lsls	r1, r3, #26
 8009e42:	bf42      	ittt	mi
 8009e44:	6833      	ldrmi	r3, [r6, #0]
 8009e46:	3302      	addmi	r3, #2
 8009e48:	6033      	strmi	r3, [r6, #0]
 8009e4a:	6825      	ldr	r5, [r4, #0]
 8009e4c:	f015 0506 	ands.w	r5, r5, #6
 8009e50:	d106      	bne.n	8009e60 <_printf_common+0x48>
 8009e52:	f104 0a19 	add.w	sl, r4, #25
 8009e56:	68e3      	ldr	r3, [r4, #12]
 8009e58:	6832      	ldr	r2, [r6, #0]
 8009e5a:	1a9b      	subs	r3, r3, r2
 8009e5c:	42ab      	cmp	r3, r5
 8009e5e:	dc28      	bgt.n	8009eb2 <_printf_common+0x9a>
 8009e60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009e64:	1e13      	subs	r3, r2, #0
 8009e66:	6822      	ldr	r2, [r4, #0]
 8009e68:	bf18      	it	ne
 8009e6a:	2301      	movne	r3, #1
 8009e6c:	0692      	lsls	r2, r2, #26
 8009e6e:	d42d      	bmi.n	8009ecc <_printf_common+0xb4>
 8009e70:	4649      	mov	r1, r9
 8009e72:	4638      	mov	r0, r7
 8009e74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e78:	47c0      	blx	r8
 8009e7a:	3001      	adds	r0, #1
 8009e7c:	d020      	beq.n	8009ec0 <_printf_common+0xa8>
 8009e7e:	6823      	ldr	r3, [r4, #0]
 8009e80:	68e5      	ldr	r5, [r4, #12]
 8009e82:	f003 0306 	and.w	r3, r3, #6
 8009e86:	2b04      	cmp	r3, #4
 8009e88:	bf18      	it	ne
 8009e8a:	2500      	movne	r5, #0
 8009e8c:	6832      	ldr	r2, [r6, #0]
 8009e8e:	f04f 0600 	mov.w	r6, #0
 8009e92:	68a3      	ldr	r3, [r4, #8]
 8009e94:	bf08      	it	eq
 8009e96:	1aad      	subeq	r5, r5, r2
 8009e98:	6922      	ldr	r2, [r4, #16]
 8009e9a:	bf08      	it	eq
 8009e9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	bfc4      	itt	gt
 8009ea4:	1a9b      	subgt	r3, r3, r2
 8009ea6:	18ed      	addgt	r5, r5, r3
 8009ea8:	341a      	adds	r4, #26
 8009eaa:	42b5      	cmp	r5, r6
 8009eac:	d11a      	bne.n	8009ee4 <_printf_common+0xcc>
 8009eae:	2000      	movs	r0, #0
 8009eb0:	e008      	b.n	8009ec4 <_printf_common+0xac>
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	4652      	mov	r2, sl
 8009eb6:	4649      	mov	r1, r9
 8009eb8:	4638      	mov	r0, r7
 8009eba:	47c0      	blx	r8
 8009ebc:	3001      	adds	r0, #1
 8009ebe:	d103      	bne.n	8009ec8 <_printf_common+0xb0>
 8009ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ec8:	3501      	adds	r5, #1
 8009eca:	e7c4      	b.n	8009e56 <_printf_common+0x3e>
 8009ecc:	2030      	movs	r0, #48	; 0x30
 8009ece:	18e1      	adds	r1, r4, r3
 8009ed0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009ed4:	1c5a      	adds	r2, r3, #1
 8009ed6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009eda:	4422      	add	r2, r4
 8009edc:	3302      	adds	r3, #2
 8009ede:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ee2:	e7c5      	b.n	8009e70 <_printf_common+0x58>
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	4622      	mov	r2, r4
 8009ee8:	4649      	mov	r1, r9
 8009eea:	4638      	mov	r0, r7
 8009eec:	47c0      	blx	r8
 8009eee:	3001      	adds	r0, #1
 8009ef0:	d0e6      	beq.n	8009ec0 <_printf_common+0xa8>
 8009ef2:	3601      	adds	r6, #1
 8009ef4:	e7d9      	b.n	8009eaa <_printf_common+0x92>
	...

08009ef8 <_printf_i>:
 8009ef8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009efc:	7e0f      	ldrb	r7, [r1, #24]
 8009efe:	4691      	mov	r9, r2
 8009f00:	2f78      	cmp	r7, #120	; 0x78
 8009f02:	4680      	mov	r8, r0
 8009f04:	460c      	mov	r4, r1
 8009f06:	469a      	mov	sl, r3
 8009f08:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009f0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009f0e:	d807      	bhi.n	8009f20 <_printf_i+0x28>
 8009f10:	2f62      	cmp	r7, #98	; 0x62
 8009f12:	d80a      	bhi.n	8009f2a <_printf_i+0x32>
 8009f14:	2f00      	cmp	r7, #0
 8009f16:	f000 80d9 	beq.w	800a0cc <_printf_i+0x1d4>
 8009f1a:	2f58      	cmp	r7, #88	; 0x58
 8009f1c:	f000 80a4 	beq.w	800a068 <_printf_i+0x170>
 8009f20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009f28:	e03a      	b.n	8009fa0 <_printf_i+0xa8>
 8009f2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009f2e:	2b15      	cmp	r3, #21
 8009f30:	d8f6      	bhi.n	8009f20 <_printf_i+0x28>
 8009f32:	a101      	add	r1, pc, #4	; (adr r1, 8009f38 <_printf_i+0x40>)
 8009f34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009f38:	08009f91 	.word	0x08009f91
 8009f3c:	08009fa5 	.word	0x08009fa5
 8009f40:	08009f21 	.word	0x08009f21
 8009f44:	08009f21 	.word	0x08009f21
 8009f48:	08009f21 	.word	0x08009f21
 8009f4c:	08009f21 	.word	0x08009f21
 8009f50:	08009fa5 	.word	0x08009fa5
 8009f54:	08009f21 	.word	0x08009f21
 8009f58:	08009f21 	.word	0x08009f21
 8009f5c:	08009f21 	.word	0x08009f21
 8009f60:	08009f21 	.word	0x08009f21
 8009f64:	0800a0b3 	.word	0x0800a0b3
 8009f68:	08009fd5 	.word	0x08009fd5
 8009f6c:	0800a095 	.word	0x0800a095
 8009f70:	08009f21 	.word	0x08009f21
 8009f74:	08009f21 	.word	0x08009f21
 8009f78:	0800a0d5 	.word	0x0800a0d5
 8009f7c:	08009f21 	.word	0x08009f21
 8009f80:	08009fd5 	.word	0x08009fd5
 8009f84:	08009f21 	.word	0x08009f21
 8009f88:	08009f21 	.word	0x08009f21
 8009f8c:	0800a09d 	.word	0x0800a09d
 8009f90:	682b      	ldr	r3, [r5, #0]
 8009f92:	1d1a      	adds	r2, r3, #4
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	602a      	str	r2, [r5, #0]
 8009f98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	e0a4      	b.n	800a0ee <_printf_i+0x1f6>
 8009fa4:	6820      	ldr	r0, [r4, #0]
 8009fa6:	6829      	ldr	r1, [r5, #0]
 8009fa8:	0606      	lsls	r6, r0, #24
 8009faa:	f101 0304 	add.w	r3, r1, #4
 8009fae:	d50a      	bpl.n	8009fc6 <_printf_i+0xce>
 8009fb0:	680e      	ldr	r6, [r1, #0]
 8009fb2:	602b      	str	r3, [r5, #0]
 8009fb4:	2e00      	cmp	r6, #0
 8009fb6:	da03      	bge.n	8009fc0 <_printf_i+0xc8>
 8009fb8:	232d      	movs	r3, #45	; 0x2d
 8009fba:	4276      	negs	r6, r6
 8009fbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fc0:	230a      	movs	r3, #10
 8009fc2:	485e      	ldr	r0, [pc, #376]	; (800a13c <_printf_i+0x244>)
 8009fc4:	e019      	b.n	8009ffa <_printf_i+0x102>
 8009fc6:	680e      	ldr	r6, [r1, #0]
 8009fc8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009fcc:	602b      	str	r3, [r5, #0]
 8009fce:	bf18      	it	ne
 8009fd0:	b236      	sxthne	r6, r6
 8009fd2:	e7ef      	b.n	8009fb4 <_printf_i+0xbc>
 8009fd4:	682b      	ldr	r3, [r5, #0]
 8009fd6:	6820      	ldr	r0, [r4, #0]
 8009fd8:	1d19      	adds	r1, r3, #4
 8009fda:	6029      	str	r1, [r5, #0]
 8009fdc:	0601      	lsls	r1, r0, #24
 8009fde:	d501      	bpl.n	8009fe4 <_printf_i+0xec>
 8009fe0:	681e      	ldr	r6, [r3, #0]
 8009fe2:	e002      	b.n	8009fea <_printf_i+0xf2>
 8009fe4:	0646      	lsls	r6, r0, #25
 8009fe6:	d5fb      	bpl.n	8009fe0 <_printf_i+0xe8>
 8009fe8:	881e      	ldrh	r6, [r3, #0]
 8009fea:	2f6f      	cmp	r7, #111	; 0x6f
 8009fec:	bf0c      	ite	eq
 8009fee:	2308      	moveq	r3, #8
 8009ff0:	230a      	movne	r3, #10
 8009ff2:	4852      	ldr	r0, [pc, #328]	; (800a13c <_printf_i+0x244>)
 8009ff4:	2100      	movs	r1, #0
 8009ff6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ffa:	6865      	ldr	r5, [r4, #4]
 8009ffc:	2d00      	cmp	r5, #0
 8009ffe:	bfa8      	it	ge
 800a000:	6821      	ldrge	r1, [r4, #0]
 800a002:	60a5      	str	r5, [r4, #8]
 800a004:	bfa4      	itt	ge
 800a006:	f021 0104 	bicge.w	r1, r1, #4
 800a00a:	6021      	strge	r1, [r4, #0]
 800a00c:	b90e      	cbnz	r6, 800a012 <_printf_i+0x11a>
 800a00e:	2d00      	cmp	r5, #0
 800a010:	d04d      	beq.n	800a0ae <_printf_i+0x1b6>
 800a012:	4615      	mov	r5, r2
 800a014:	fbb6 f1f3 	udiv	r1, r6, r3
 800a018:	fb03 6711 	mls	r7, r3, r1, r6
 800a01c:	5dc7      	ldrb	r7, [r0, r7]
 800a01e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a022:	4637      	mov	r7, r6
 800a024:	42bb      	cmp	r3, r7
 800a026:	460e      	mov	r6, r1
 800a028:	d9f4      	bls.n	800a014 <_printf_i+0x11c>
 800a02a:	2b08      	cmp	r3, #8
 800a02c:	d10b      	bne.n	800a046 <_printf_i+0x14e>
 800a02e:	6823      	ldr	r3, [r4, #0]
 800a030:	07de      	lsls	r6, r3, #31
 800a032:	d508      	bpl.n	800a046 <_printf_i+0x14e>
 800a034:	6923      	ldr	r3, [r4, #16]
 800a036:	6861      	ldr	r1, [r4, #4]
 800a038:	4299      	cmp	r1, r3
 800a03a:	bfde      	ittt	le
 800a03c:	2330      	movle	r3, #48	; 0x30
 800a03e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a042:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a046:	1b52      	subs	r2, r2, r5
 800a048:	6122      	str	r2, [r4, #16]
 800a04a:	464b      	mov	r3, r9
 800a04c:	4621      	mov	r1, r4
 800a04e:	4640      	mov	r0, r8
 800a050:	f8cd a000 	str.w	sl, [sp]
 800a054:	aa03      	add	r2, sp, #12
 800a056:	f7ff fedf 	bl	8009e18 <_printf_common>
 800a05a:	3001      	adds	r0, #1
 800a05c:	d14c      	bne.n	800a0f8 <_printf_i+0x200>
 800a05e:	f04f 30ff 	mov.w	r0, #4294967295
 800a062:	b004      	add	sp, #16
 800a064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a068:	4834      	ldr	r0, [pc, #208]	; (800a13c <_printf_i+0x244>)
 800a06a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a06e:	6829      	ldr	r1, [r5, #0]
 800a070:	6823      	ldr	r3, [r4, #0]
 800a072:	f851 6b04 	ldr.w	r6, [r1], #4
 800a076:	6029      	str	r1, [r5, #0]
 800a078:	061d      	lsls	r5, r3, #24
 800a07a:	d514      	bpl.n	800a0a6 <_printf_i+0x1ae>
 800a07c:	07df      	lsls	r7, r3, #31
 800a07e:	bf44      	itt	mi
 800a080:	f043 0320 	orrmi.w	r3, r3, #32
 800a084:	6023      	strmi	r3, [r4, #0]
 800a086:	b91e      	cbnz	r6, 800a090 <_printf_i+0x198>
 800a088:	6823      	ldr	r3, [r4, #0]
 800a08a:	f023 0320 	bic.w	r3, r3, #32
 800a08e:	6023      	str	r3, [r4, #0]
 800a090:	2310      	movs	r3, #16
 800a092:	e7af      	b.n	8009ff4 <_printf_i+0xfc>
 800a094:	6823      	ldr	r3, [r4, #0]
 800a096:	f043 0320 	orr.w	r3, r3, #32
 800a09a:	6023      	str	r3, [r4, #0]
 800a09c:	2378      	movs	r3, #120	; 0x78
 800a09e:	4828      	ldr	r0, [pc, #160]	; (800a140 <_printf_i+0x248>)
 800a0a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a0a4:	e7e3      	b.n	800a06e <_printf_i+0x176>
 800a0a6:	0659      	lsls	r1, r3, #25
 800a0a8:	bf48      	it	mi
 800a0aa:	b2b6      	uxthmi	r6, r6
 800a0ac:	e7e6      	b.n	800a07c <_printf_i+0x184>
 800a0ae:	4615      	mov	r5, r2
 800a0b0:	e7bb      	b.n	800a02a <_printf_i+0x132>
 800a0b2:	682b      	ldr	r3, [r5, #0]
 800a0b4:	6826      	ldr	r6, [r4, #0]
 800a0b6:	1d18      	adds	r0, r3, #4
 800a0b8:	6961      	ldr	r1, [r4, #20]
 800a0ba:	6028      	str	r0, [r5, #0]
 800a0bc:	0635      	lsls	r5, r6, #24
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	d501      	bpl.n	800a0c6 <_printf_i+0x1ce>
 800a0c2:	6019      	str	r1, [r3, #0]
 800a0c4:	e002      	b.n	800a0cc <_printf_i+0x1d4>
 800a0c6:	0670      	lsls	r0, r6, #25
 800a0c8:	d5fb      	bpl.n	800a0c2 <_printf_i+0x1ca>
 800a0ca:	8019      	strh	r1, [r3, #0]
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	4615      	mov	r5, r2
 800a0d0:	6123      	str	r3, [r4, #16]
 800a0d2:	e7ba      	b.n	800a04a <_printf_i+0x152>
 800a0d4:	682b      	ldr	r3, [r5, #0]
 800a0d6:	2100      	movs	r1, #0
 800a0d8:	1d1a      	adds	r2, r3, #4
 800a0da:	602a      	str	r2, [r5, #0]
 800a0dc:	681d      	ldr	r5, [r3, #0]
 800a0de:	6862      	ldr	r2, [r4, #4]
 800a0e0:	4628      	mov	r0, r5
 800a0e2:	f000 f82f 	bl	800a144 <memchr>
 800a0e6:	b108      	cbz	r0, 800a0ec <_printf_i+0x1f4>
 800a0e8:	1b40      	subs	r0, r0, r5
 800a0ea:	6060      	str	r0, [r4, #4]
 800a0ec:	6863      	ldr	r3, [r4, #4]
 800a0ee:	6123      	str	r3, [r4, #16]
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0f6:	e7a8      	b.n	800a04a <_printf_i+0x152>
 800a0f8:	462a      	mov	r2, r5
 800a0fa:	4649      	mov	r1, r9
 800a0fc:	4640      	mov	r0, r8
 800a0fe:	6923      	ldr	r3, [r4, #16]
 800a100:	47d0      	blx	sl
 800a102:	3001      	adds	r0, #1
 800a104:	d0ab      	beq.n	800a05e <_printf_i+0x166>
 800a106:	6823      	ldr	r3, [r4, #0]
 800a108:	079b      	lsls	r3, r3, #30
 800a10a:	d413      	bmi.n	800a134 <_printf_i+0x23c>
 800a10c:	68e0      	ldr	r0, [r4, #12]
 800a10e:	9b03      	ldr	r3, [sp, #12]
 800a110:	4298      	cmp	r0, r3
 800a112:	bfb8      	it	lt
 800a114:	4618      	movlt	r0, r3
 800a116:	e7a4      	b.n	800a062 <_printf_i+0x16a>
 800a118:	2301      	movs	r3, #1
 800a11a:	4632      	mov	r2, r6
 800a11c:	4649      	mov	r1, r9
 800a11e:	4640      	mov	r0, r8
 800a120:	47d0      	blx	sl
 800a122:	3001      	adds	r0, #1
 800a124:	d09b      	beq.n	800a05e <_printf_i+0x166>
 800a126:	3501      	adds	r5, #1
 800a128:	68e3      	ldr	r3, [r4, #12]
 800a12a:	9903      	ldr	r1, [sp, #12]
 800a12c:	1a5b      	subs	r3, r3, r1
 800a12e:	42ab      	cmp	r3, r5
 800a130:	dcf2      	bgt.n	800a118 <_printf_i+0x220>
 800a132:	e7eb      	b.n	800a10c <_printf_i+0x214>
 800a134:	2500      	movs	r5, #0
 800a136:	f104 0619 	add.w	r6, r4, #25
 800a13a:	e7f5      	b.n	800a128 <_printf_i+0x230>
 800a13c:	0800a529 	.word	0x0800a529
 800a140:	0800a53a 	.word	0x0800a53a

0800a144 <memchr>:
 800a144:	4603      	mov	r3, r0
 800a146:	b510      	push	{r4, lr}
 800a148:	b2c9      	uxtb	r1, r1
 800a14a:	4402      	add	r2, r0
 800a14c:	4293      	cmp	r3, r2
 800a14e:	4618      	mov	r0, r3
 800a150:	d101      	bne.n	800a156 <memchr+0x12>
 800a152:	2000      	movs	r0, #0
 800a154:	e003      	b.n	800a15e <memchr+0x1a>
 800a156:	7804      	ldrb	r4, [r0, #0]
 800a158:	3301      	adds	r3, #1
 800a15a:	428c      	cmp	r4, r1
 800a15c:	d1f6      	bne.n	800a14c <memchr+0x8>
 800a15e:	bd10      	pop	{r4, pc}

0800a160 <memcpy>:
 800a160:	440a      	add	r2, r1
 800a162:	4291      	cmp	r1, r2
 800a164:	f100 33ff 	add.w	r3, r0, #4294967295
 800a168:	d100      	bne.n	800a16c <memcpy+0xc>
 800a16a:	4770      	bx	lr
 800a16c:	b510      	push	{r4, lr}
 800a16e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a172:	4291      	cmp	r1, r2
 800a174:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a178:	d1f9      	bne.n	800a16e <memcpy+0xe>
 800a17a:	bd10      	pop	{r4, pc}

0800a17c <memmove>:
 800a17c:	4288      	cmp	r0, r1
 800a17e:	b510      	push	{r4, lr}
 800a180:	eb01 0402 	add.w	r4, r1, r2
 800a184:	d902      	bls.n	800a18c <memmove+0x10>
 800a186:	4284      	cmp	r4, r0
 800a188:	4623      	mov	r3, r4
 800a18a:	d807      	bhi.n	800a19c <memmove+0x20>
 800a18c:	1e43      	subs	r3, r0, #1
 800a18e:	42a1      	cmp	r1, r4
 800a190:	d008      	beq.n	800a1a4 <memmove+0x28>
 800a192:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a196:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a19a:	e7f8      	b.n	800a18e <memmove+0x12>
 800a19c:	4601      	mov	r1, r0
 800a19e:	4402      	add	r2, r0
 800a1a0:	428a      	cmp	r2, r1
 800a1a2:	d100      	bne.n	800a1a6 <memmove+0x2a>
 800a1a4:	bd10      	pop	{r4, pc}
 800a1a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a1aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a1ae:	e7f7      	b.n	800a1a0 <memmove+0x24>

0800a1b0 <_free_r>:
 800a1b0:	b538      	push	{r3, r4, r5, lr}
 800a1b2:	4605      	mov	r5, r0
 800a1b4:	2900      	cmp	r1, #0
 800a1b6:	d040      	beq.n	800a23a <_free_r+0x8a>
 800a1b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1bc:	1f0c      	subs	r4, r1, #4
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	bfb8      	it	lt
 800a1c2:	18e4      	addlt	r4, r4, r3
 800a1c4:	f000 f910 	bl	800a3e8 <__malloc_lock>
 800a1c8:	4a1c      	ldr	r2, [pc, #112]	; (800a23c <_free_r+0x8c>)
 800a1ca:	6813      	ldr	r3, [r2, #0]
 800a1cc:	b933      	cbnz	r3, 800a1dc <_free_r+0x2c>
 800a1ce:	6063      	str	r3, [r4, #4]
 800a1d0:	6014      	str	r4, [r2, #0]
 800a1d2:	4628      	mov	r0, r5
 800a1d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1d8:	f000 b90c 	b.w	800a3f4 <__malloc_unlock>
 800a1dc:	42a3      	cmp	r3, r4
 800a1de:	d908      	bls.n	800a1f2 <_free_r+0x42>
 800a1e0:	6820      	ldr	r0, [r4, #0]
 800a1e2:	1821      	adds	r1, r4, r0
 800a1e4:	428b      	cmp	r3, r1
 800a1e6:	bf01      	itttt	eq
 800a1e8:	6819      	ldreq	r1, [r3, #0]
 800a1ea:	685b      	ldreq	r3, [r3, #4]
 800a1ec:	1809      	addeq	r1, r1, r0
 800a1ee:	6021      	streq	r1, [r4, #0]
 800a1f0:	e7ed      	b.n	800a1ce <_free_r+0x1e>
 800a1f2:	461a      	mov	r2, r3
 800a1f4:	685b      	ldr	r3, [r3, #4]
 800a1f6:	b10b      	cbz	r3, 800a1fc <_free_r+0x4c>
 800a1f8:	42a3      	cmp	r3, r4
 800a1fa:	d9fa      	bls.n	800a1f2 <_free_r+0x42>
 800a1fc:	6811      	ldr	r1, [r2, #0]
 800a1fe:	1850      	adds	r0, r2, r1
 800a200:	42a0      	cmp	r0, r4
 800a202:	d10b      	bne.n	800a21c <_free_r+0x6c>
 800a204:	6820      	ldr	r0, [r4, #0]
 800a206:	4401      	add	r1, r0
 800a208:	1850      	adds	r0, r2, r1
 800a20a:	4283      	cmp	r3, r0
 800a20c:	6011      	str	r1, [r2, #0]
 800a20e:	d1e0      	bne.n	800a1d2 <_free_r+0x22>
 800a210:	6818      	ldr	r0, [r3, #0]
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	4401      	add	r1, r0
 800a216:	6011      	str	r1, [r2, #0]
 800a218:	6053      	str	r3, [r2, #4]
 800a21a:	e7da      	b.n	800a1d2 <_free_r+0x22>
 800a21c:	d902      	bls.n	800a224 <_free_r+0x74>
 800a21e:	230c      	movs	r3, #12
 800a220:	602b      	str	r3, [r5, #0]
 800a222:	e7d6      	b.n	800a1d2 <_free_r+0x22>
 800a224:	6820      	ldr	r0, [r4, #0]
 800a226:	1821      	adds	r1, r4, r0
 800a228:	428b      	cmp	r3, r1
 800a22a:	bf01      	itttt	eq
 800a22c:	6819      	ldreq	r1, [r3, #0]
 800a22e:	685b      	ldreq	r3, [r3, #4]
 800a230:	1809      	addeq	r1, r1, r0
 800a232:	6021      	streq	r1, [r4, #0]
 800a234:	6063      	str	r3, [r4, #4]
 800a236:	6054      	str	r4, [r2, #4]
 800a238:	e7cb      	b.n	800a1d2 <_free_r+0x22>
 800a23a:	bd38      	pop	{r3, r4, r5, pc}
 800a23c:	200014e8 	.word	0x200014e8

0800a240 <sbrk_aligned>:
 800a240:	b570      	push	{r4, r5, r6, lr}
 800a242:	4e0e      	ldr	r6, [pc, #56]	; (800a27c <sbrk_aligned+0x3c>)
 800a244:	460c      	mov	r4, r1
 800a246:	6831      	ldr	r1, [r6, #0]
 800a248:	4605      	mov	r5, r0
 800a24a:	b911      	cbnz	r1, 800a252 <sbrk_aligned+0x12>
 800a24c:	f000 f8bc 	bl	800a3c8 <_sbrk_r>
 800a250:	6030      	str	r0, [r6, #0]
 800a252:	4621      	mov	r1, r4
 800a254:	4628      	mov	r0, r5
 800a256:	f000 f8b7 	bl	800a3c8 <_sbrk_r>
 800a25a:	1c43      	adds	r3, r0, #1
 800a25c:	d00a      	beq.n	800a274 <sbrk_aligned+0x34>
 800a25e:	1cc4      	adds	r4, r0, #3
 800a260:	f024 0403 	bic.w	r4, r4, #3
 800a264:	42a0      	cmp	r0, r4
 800a266:	d007      	beq.n	800a278 <sbrk_aligned+0x38>
 800a268:	1a21      	subs	r1, r4, r0
 800a26a:	4628      	mov	r0, r5
 800a26c:	f000 f8ac 	bl	800a3c8 <_sbrk_r>
 800a270:	3001      	adds	r0, #1
 800a272:	d101      	bne.n	800a278 <sbrk_aligned+0x38>
 800a274:	f04f 34ff 	mov.w	r4, #4294967295
 800a278:	4620      	mov	r0, r4
 800a27a:	bd70      	pop	{r4, r5, r6, pc}
 800a27c:	200014ec 	.word	0x200014ec

0800a280 <_malloc_r>:
 800a280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a284:	1ccd      	adds	r5, r1, #3
 800a286:	f025 0503 	bic.w	r5, r5, #3
 800a28a:	3508      	adds	r5, #8
 800a28c:	2d0c      	cmp	r5, #12
 800a28e:	bf38      	it	cc
 800a290:	250c      	movcc	r5, #12
 800a292:	2d00      	cmp	r5, #0
 800a294:	4607      	mov	r7, r0
 800a296:	db01      	blt.n	800a29c <_malloc_r+0x1c>
 800a298:	42a9      	cmp	r1, r5
 800a29a:	d905      	bls.n	800a2a8 <_malloc_r+0x28>
 800a29c:	230c      	movs	r3, #12
 800a29e:	2600      	movs	r6, #0
 800a2a0:	603b      	str	r3, [r7, #0]
 800a2a2:	4630      	mov	r0, r6
 800a2a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2a8:	4e2e      	ldr	r6, [pc, #184]	; (800a364 <_malloc_r+0xe4>)
 800a2aa:	f000 f89d 	bl	800a3e8 <__malloc_lock>
 800a2ae:	6833      	ldr	r3, [r6, #0]
 800a2b0:	461c      	mov	r4, r3
 800a2b2:	bb34      	cbnz	r4, 800a302 <_malloc_r+0x82>
 800a2b4:	4629      	mov	r1, r5
 800a2b6:	4638      	mov	r0, r7
 800a2b8:	f7ff ffc2 	bl	800a240 <sbrk_aligned>
 800a2bc:	1c43      	adds	r3, r0, #1
 800a2be:	4604      	mov	r4, r0
 800a2c0:	d14d      	bne.n	800a35e <_malloc_r+0xde>
 800a2c2:	6834      	ldr	r4, [r6, #0]
 800a2c4:	4626      	mov	r6, r4
 800a2c6:	2e00      	cmp	r6, #0
 800a2c8:	d140      	bne.n	800a34c <_malloc_r+0xcc>
 800a2ca:	6823      	ldr	r3, [r4, #0]
 800a2cc:	4631      	mov	r1, r6
 800a2ce:	4638      	mov	r0, r7
 800a2d0:	eb04 0803 	add.w	r8, r4, r3
 800a2d4:	f000 f878 	bl	800a3c8 <_sbrk_r>
 800a2d8:	4580      	cmp	r8, r0
 800a2da:	d13a      	bne.n	800a352 <_malloc_r+0xd2>
 800a2dc:	6821      	ldr	r1, [r4, #0]
 800a2de:	3503      	adds	r5, #3
 800a2e0:	1a6d      	subs	r5, r5, r1
 800a2e2:	f025 0503 	bic.w	r5, r5, #3
 800a2e6:	3508      	adds	r5, #8
 800a2e8:	2d0c      	cmp	r5, #12
 800a2ea:	bf38      	it	cc
 800a2ec:	250c      	movcc	r5, #12
 800a2ee:	4638      	mov	r0, r7
 800a2f0:	4629      	mov	r1, r5
 800a2f2:	f7ff ffa5 	bl	800a240 <sbrk_aligned>
 800a2f6:	3001      	adds	r0, #1
 800a2f8:	d02b      	beq.n	800a352 <_malloc_r+0xd2>
 800a2fa:	6823      	ldr	r3, [r4, #0]
 800a2fc:	442b      	add	r3, r5
 800a2fe:	6023      	str	r3, [r4, #0]
 800a300:	e00e      	b.n	800a320 <_malloc_r+0xa0>
 800a302:	6822      	ldr	r2, [r4, #0]
 800a304:	1b52      	subs	r2, r2, r5
 800a306:	d41e      	bmi.n	800a346 <_malloc_r+0xc6>
 800a308:	2a0b      	cmp	r2, #11
 800a30a:	d916      	bls.n	800a33a <_malloc_r+0xba>
 800a30c:	1961      	adds	r1, r4, r5
 800a30e:	42a3      	cmp	r3, r4
 800a310:	6025      	str	r5, [r4, #0]
 800a312:	bf18      	it	ne
 800a314:	6059      	strne	r1, [r3, #4]
 800a316:	6863      	ldr	r3, [r4, #4]
 800a318:	bf08      	it	eq
 800a31a:	6031      	streq	r1, [r6, #0]
 800a31c:	5162      	str	r2, [r4, r5]
 800a31e:	604b      	str	r3, [r1, #4]
 800a320:	4638      	mov	r0, r7
 800a322:	f104 060b 	add.w	r6, r4, #11
 800a326:	f000 f865 	bl	800a3f4 <__malloc_unlock>
 800a32a:	f026 0607 	bic.w	r6, r6, #7
 800a32e:	1d23      	adds	r3, r4, #4
 800a330:	1af2      	subs	r2, r6, r3
 800a332:	d0b6      	beq.n	800a2a2 <_malloc_r+0x22>
 800a334:	1b9b      	subs	r3, r3, r6
 800a336:	50a3      	str	r3, [r4, r2]
 800a338:	e7b3      	b.n	800a2a2 <_malloc_r+0x22>
 800a33a:	6862      	ldr	r2, [r4, #4]
 800a33c:	42a3      	cmp	r3, r4
 800a33e:	bf0c      	ite	eq
 800a340:	6032      	streq	r2, [r6, #0]
 800a342:	605a      	strne	r2, [r3, #4]
 800a344:	e7ec      	b.n	800a320 <_malloc_r+0xa0>
 800a346:	4623      	mov	r3, r4
 800a348:	6864      	ldr	r4, [r4, #4]
 800a34a:	e7b2      	b.n	800a2b2 <_malloc_r+0x32>
 800a34c:	4634      	mov	r4, r6
 800a34e:	6876      	ldr	r6, [r6, #4]
 800a350:	e7b9      	b.n	800a2c6 <_malloc_r+0x46>
 800a352:	230c      	movs	r3, #12
 800a354:	4638      	mov	r0, r7
 800a356:	603b      	str	r3, [r7, #0]
 800a358:	f000 f84c 	bl	800a3f4 <__malloc_unlock>
 800a35c:	e7a1      	b.n	800a2a2 <_malloc_r+0x22>
 800a35e:	6025      	str	r5, [r4, #0]
 800a360:	e7de      	b.n	800a320 <_malloc_r+0xa0>
 800a362:	bf00      	nop
 800a364:	200014e8 	.word	0x200014e8

0800a368 <_realloc_r>:
 800a368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a36c:	4680      	mov	r8, r0
 800a36e:	4614      	mov	r4, r2
 800a370:	460e      	mov	r6, r1
 800a372:	b921      	cbnz	r1, 800a37e <_realloc_r+0x16>
 800a374:	4611      	mov	r1, r2
 800a376:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a37a:	f7ff bf81 	b.w	800a280 <_malloc_r>
 800a37e:	b92a      	cbnz	r2, 800a38c <_realloc_r+0x24>
 800a380:	f7ff ff16 	bl	800a1b0 <_free_r>
 800a384:	4625      	mov	r5, r4
 800a386:	4628      	mov	r0, r5
 800a388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a38c:	f000 f838 	bl	800a400 <_malloc_usable_size_r>
 800a390:	4284      	cmp	r4, r0
 800a392:	4607      	mov	r7, r0
 800a394:	d802      	bhi.n	800a39c <_realloc_r+0x34>
 800a396:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a39a:	d812      	bhi.n	800a3c2 <_realloc_r+0x5a>
 800a39c:	4621      	mov	r1, r4
 800a39e:	4640      	mov	r0, r8
 800a3a0:	f7ff ff6e 	bl	800a280 <_malloc_r>
 800a3a4:	4605      	mov	r5, r0
 800a3a6:	2800      	cmp	r0, #0
 800a3a8:	d0ed      	beq.n	800a386 <_realloc_r+0x1e>
 800a3aa:	42bc      	cmp	r4, r7
 800a3ac:	4622      	mov	r2, r4
 800a3ae:	4631      	mov	r1, r6
 800a3b0:	bf28      	it	cs
 800a3b2:	463a      	movcs	r2, r7
 800a3b4:	f7ff fed4 	bl	800a160 <memcpy>
 800a3b8:	4631      	mov	r1, r6
 800a3ba:	4640      	mov	r0, r8
 800a3bc:	f7ff fef8 	bl	800a1b0 <_free_r>
 800a3c0:	e7e1      	b.n	800a386 <_realloc_r+0x1e>
 800a3c2:	4635      	mov	r5, r6
 800a3c4:	e7df      	b.n	800a386 <_realloc_r+0x1e>
	...

0800a3c8 <_sbrk_r>:
 800a3c8:	b538      	push	{r3, r4, r5, lr}
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	4d05      	ldr	r5, [pc, #20]	; (800a3e4 <_sbrk_r+0x1c>)
 800a3ce:	4604      	mov	r4, r0
 800a3d0:	4608      	mov	r0, r1
 800a3d2:	602b      	str	r3, [r5, #0]
 800a3d4:	f7f6 fdce 	bl	8000f74 <_sbrk>
 800a3d8:	1c43      	adds	r3, r0, #1
 800a3da:	d102      	bne.n	800a3e2 <_sbrk_r+0x1a>
 800a3dc:	682b      	ldr	r3, [r5, #0]
 800a3de:	b103      	cbz	r3, 800a3e2 <_sbrk_r+0x1a>
 800a3e0:	6023      	str	r3, [r4, #0]
 800a3e2:	bd38      	pop	{r3, r4, r5, pc}
 800a3e4:	200014f0 	.word	0x200014f0

0800a3e8 <__malloc_lock>:
 800a3e8:	4801      	ldr	r0, [pc, #4]	; (800a3f0 <__malloc_lock+0x8>)
 800a3ea:	f000 b811 	b.w	800a410 <__retarget_lock_acquire_recursive>
 800a3ee:	bf00      	nop
 800a3f0:	200014f4 	.word	0x200014f4

0800a3f4 <__malloc_unlock>:
 800a3f4:	4801      	ldr	r0, [pc, #4]	; (800a3fc <__malloc_unlock+0x8>)
 800a3f6:	f000 b80c 	b.w	800a412 <__retarget_lock_release_recursive>
 800a3fa:	bf00      	nop
 800a3fc:	200014f4 	.word	0x200014f4

0800a400 <_malloc_usable_size_r>:
 800a400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a404:	1f18      	subs	r0, r3, #4
 800a406:	2b00      	cmp	r3, #0
 800a408:	bfbc      	itt	lt
 800a40a:	580b      	ldrlt	r3, [r1, r0]
 800a40c:	18c0      	addlt	r0, r0, r3
 800a40e:	4770      	bx	lr

0800a410 <__retarget_lock_acquire_recursive>:
 800a410:	4770      	bx	lr

0800a412 <__retarget_lock_release_recursive>:
 800a412:	4770      	bx	lr

0800a414 <_init>:
 800a414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a416:	bf00      	nop
 800a418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a41a:	bc08      	pop	{r3}
 800a41c:	469e      	mov	lr, r3
 800a41e:	4770      	bx	lr

0800a420 <_fini>:
 800a420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a422:	bf00      	nop
 800a424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a426:	bc08      	pop	{r3}
 800a428:	469e      	mov	lr, r3
 800a42a:	4770      	bx	lr
